<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Json字符串与对象的互转</title>
    <link href="/2021/12/03/Json%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <url>/2021/12/03/Json%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>在开发过程中，经常需要和别的系统交换数据，数据交换的格式有XML、JSON等，JSON作为一个轻量级的数据格式比xml效率要高，XML需要很多的标签，这无疑占据了网络流量，JSON在这方面则做的很好，下面先看下JSON的格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;JSON&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京市西城区&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">25</span>&#125;<span class="hljs-comment">//JSON的对象格式的字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;com.lyq.pojo.Student&quot;</span>,&#123;<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;211&quot;</span>,<span class="hljs-attr">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;Jane&quot;</span>,<span class="hljs-attr">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-attr">&quot;db&quot;</span>:<span class="hljs-string">&quot;mysql&quot;</span>&#125;]<span class="hljs-comment">//数组对象格式</span><br></code></pre></td></tr></table></figure><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>​    要实现JSON与java对象之间的互转，需要借助<strong>第三方jar包</strong>，此处使用json-lib这个jar包，可以冲<a href="https://mvnrepository.com/">此处</a>下载相关jar包，json-lib需要<code>commons-beanutils-1.8.0.jar、commons-collections-3.2.1.jar、commons-lang-2.5.jar、commons-logging-1.1.1.jar、ezmorph-1.0.6.jar </code>五个包的支持。</p><p>json-lib提供了几个类可以完成此功能，例<code>JSONObject、JSONArray</code>从类的名字上可以看出JSONObject转化的应该是对象格式的，而JSONArray转化的则应该是数组对象（即，带[]形式）的。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>jdk15<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、Java普通对象和JSON字符串的互转"><a href="#2、Java普通对象和JSON字符串的互转" class="headerlink" title="2、Java普通对象和JSON字符串的互转"></a>2、Java普通对象和JSON字符串的互转</h2><h3 id="2-1-Java对象-–》Json字符串"><a href="#2-1-Java对象-–》Json字符串" class="headerlink" title="2.1 Java对象 –》Json字符串"></a>2.1 Java对象 –》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String stuno;<br>    <span class="hljs-keyword">private</span> String stuname;<br>    <span class="hljs-keyword">private</span> String stusex;<br>    <span class="hljs-keyword">private</span> String db;<br>    <br>    <span class="hljs-comment">//此处省略setter和getter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​    Java对象转Json字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Student对象通过JSONObject和JSONArray两种方式转Json字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">convertObject</span><span class="hljs-params">()</span> </span>&#123;        <br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;成武&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        JSONObject json = JSONObject.fromObject(stu);<br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray array=JSONArray.fromObject(stu);<br>        <br>        String strJson=json.toString();<br>        String strArray=array.toString();<br>        <br>        System.out.println(<span class="hljs-string">&quot;strJson:&quot;</span>+strJson);<br>        System.out.println(<span class="hljs-string">&quot;strArray:&quot;</span>+strArray);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    下面为打印结果：</p><blockquote><p>strJson:{“db”:”Mysql”,”id”:3,”stuname”:”成武”,”stuno”:”100”,”stusex”:”M”}<br>strArray:[{“db”:”Mysql”,”id”:3,”stuname”:”成武”,”stuno”:”100”,”stusex”:”M”}]</p></blockquote><p>​    两种方法都可以把java对象转化为JSON字符串，只是转化后的<strong>结构</strong>不同。</p><h3 id="2-2-JSON字符串-—》Java对象"><a href="#2-2-JSON字符串-—》Java对象" class="headerlink" title="2.2 JSON字符串 —》Java对象"></a>2.2 JSON字符串 —》Java对象</h3><p>​    首先需要定义两种不同格式的字符串，需要使用\对双引号进行转义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonStrToJava</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//定义两种不同格式的字符串</span><br>        String objectStr=<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;李四\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;&quot;</span>;<br>        String arrayStr=<span class="hljs-string">&quot;[&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;李四\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;]&quot;</span>;<br>    <br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        JSONObject jsonObject=JSONObject.fromObject(objectStr);<br>        Student stu=(Student)JSONObject.toBean(jsonObject, Student.class);<br>        <br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray jsonArray=JSONArray.fromObject(arrayStr);<br>        <span class="hljs-comment">//获得jsonArray的第一个元素</span><br>        Object o=jsonArray.get(<span class="hljs-number">0</span>);<br>        JSONObject jsonObject2=JSONObject.fromObject(o);<br>        Student stu2=(Student)JSONObject.toBean(jsonObject2, Student.class);<br>        System.out.println(<span class="hljs-string">&quot;stu:&quot;</span>+stu);<br>        System.out.println(<span class="hljs-string">&quot;stu2:&quot;</span>+stu2);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    下面为打印结果：</p><blockquote><p>stu:Student{id=3, stuno=’100’, stuname=’李四’, stusex=’M’, db=’Mysql’}<br>stu2:Student{id=3, stuno=’100’, stuname=’李四’, stusex=’M’, db=’Mysql’}</p></blockquote><p>​    使用<code>JSONObject</code>可以轻松的把JSON格式的字符串转化为java对象，但是使用<code>JSONArray</code>就没那么容易了，因为它有<strong>“[]”</strong>符号，所以我们这里在<strong>获得了JSONArray的对象之后</strong>，<strong>取其第一个元素</strong>即我们需要的一个student的变形，然后使用JSONObject轻松获得</p><h2 id="3、list和json字符串的互转"><a href="#3、list和json字符串的互转" class="headerlink" title="3、list和json字符串的互转"></a>3、<strong>list和json字符串的互转</strong></h2><h3 id="3-1-list-–》Json字符串"><a href="#3-1-list-–》Json字符串" class="headerlink" title="3.1 list –》Json字符串"></a>3.1 list –》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listToJSON</span><span class="hljs-params">()</span></span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;王建&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br>        Student stu2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;李承&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        List&lt;Student&gt; lists=<span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        lists.add(stu);<br>        lists.add(stu2);<br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        <span class="hljs-comment">//JSONObject listObject=JSONObject.fromObject(lists);//会报错</span><br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray listArray=JSONArray.fromObject(lists);<br><br>        <span class="hljs-comment">//System.out.println(&quot;listObject:&quot;+listObject.toString());</span><br>        System.out.println(<span class="hljs-string">&quot;listArray:&quot;</span>+listArray.toString());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​    我把使用JSONObject的方式给注掉了，我们先看注释之前的结果：</p><blockquote><p>net.sf.json.JSONException: ‘object’ is an array. Use JSONArray instead</p></blockquote><p>​    注释后，正确执行结果为：</p><blockquote><p>listArray:[{“db”:”Mysql”,”id”:4,”stuname”:”王建”,”stuno”:”101”,”stusex”:”M”},{“db”:”Mysql”,”id”:5,”stuname”:”李承”,”stuno”:”102”,”stusex”:”N”}]</p></blockquote><h3 id="3-2-Json字符串-–》list"><a href="#3-2-Json字符串-–》list" class="headerlink" title="3.2 Json字符串 –》list"></a>3.2 Json字符串 –》list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonToList</span><span class="hljs-params">()</span></span>&#123;<br>        String arrayStr=<span class="hljs-string">&quot;[&#123;\&quot;id\&quot;:\&quot;4\&quot;,\&quot;stuname\&quot;:\&quot;王建\&quot;,\&quot;stuno\&quot;:\&quot;101\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;]&quot;</span>;<br>        <span class="hljs-comment">//转化为list</span><br>        List&lt;Student&gt; list2=(List&lt;Student&gt;)JSONArray.toList(JSONArray.fromObject(arrayStr), Student.class);<br><br>        <span class="hljs-keyword">for</span> (Student stu : list2) &#123;<br>            System.out.println(stu);<br>        &#125;<br>        <span class="hljs-comment">//转化为数组</span><br>        Student[] ss =(Student[])JSONArray.toArray(JSONArray.fromObject(arrayStr),Student.class);<br>        <span class="hljs-keyword">for</span> (Student student : ss) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;王建&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;王建&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>由于字符串的格式为带有“[]”的格式，所以这里<strong>选择JSONArray</strong>这个对象，它有<code>toArray、toList</code>方法可供使用，前者转化为java中的<strong>数组</strong>，后者转化为java中的<strong>list</strong>，由于这里有实体类进行对应，所以在使用时指定了泛型的类型（Student.class），这样就可以得到转化后的对象</p><h2 id="4、map和Json字符串的互转"><a href="#4、map和Json字符串的互转" class="headerlink" title="4、map和Json字符串的互转"></a>4、map和Json字符串的互转</h2><h3 id="4-1-Map-—》Json字符串"><a href="#4-1-Map-—》Json字符串" class="headerlink" title="4.1 Map —》Json字符串"></a>4.1 Map —》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mapToJSON</span><span class="hljs-params">()</span></span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;成武&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br>        Student stu1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;王建&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        HashMap&lt;String, Student&gt; stuMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Student&gt;();<br>        stuMap.put(<span class="hljs-string">&quot;first&quot;</span>,stu);<br>        stuMap.put(<span class="hljs-string">&quot;second&quot;</span>,stu1);<br><br>        <span class="hljs-comment">//1、JSONObject</span><br>        JSONObject mapObject= JSONObject.fromObject(stuMap);<br>        System.out.println(<span class="hljs-string">&quot;mapObject&quot;</span>+mapObject.toString());<br><br>        <span class="hljs-comment">//2、JSONArray</span><br>        JSONArray mapArray=JSONArray.fromObject(stuMap);<br>        System.out.println(<span class="hljs-string">&quot;mapArray:&quot;</span>+mapArray.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mapObject</span>&#123;<span class="hljs-string">&quot;first&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;成武&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;100&quot;</span>&#125;,<span class="hljs-string">&quot;second&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;王建&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;101&quot;</span>&#125;&#125;<br><span class="hljs-attribute">mapArray</span>:[&#123;<span class="hljs-string">&quot;first&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;成武&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;100&quot;</span>&#125;,<span class="hljs-string">&quot;second&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;王建&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;101&quot;</span>&#125;&#125;]<br></code></pre></td></tr></table></figure><h3 id="4-2-Json字符串-—》Map"><a href="#4-2-Json字符串-—》Map" class="headerlink" title="4.2 Json字符串 —》Map"></a>4.2 Json字符串 —》Map</h3><p>JSON字符串不能直接转化为map对象，要想取得map中的键对应的值需要别的方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Student first;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFirst</span><span class="hljs-params">(Student first)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonToMap</span><span class="hljs-params">()</span></span>&#123;<br>        String strObject=<span class="hljs-string">&quot;&#123;\&quot;first\&quot;:&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;成武\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;&#125;&quot;</span>;<br><br>        <span class="hljs-comment">//JSONObject</span><br>        JSONObject jsonObject=JSONObject.fromObject(strObject);<br>        Map map=<span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;first&quot;</span>, Student.class);<br><br>        <span class="hljs-comment">//使用了toBean方法，需要三个参数</span><br>        MyBean my=(MyBean)JSONObject.toBean(jsonObject, MyBean.class, map);<br>        System.out.println(my.getFirst());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;成武&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>使用toBean()方法是传入了三个参数，第一个是JSONObject对象，第二个是MyBean.class，第三个是一个Map对象。通过MyBean可以知道此类中要有一个first的属性，且其类型为Student，要和map中的键和值类型对应，即，first对应键 first类型对应值的类型。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的基本使用</title>
    <link href="/2021/12/01/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/01/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Markdown标题"><a href="#1、Markdown标题" class="headerlink" title="1、Markdown标题"></a>1、Markdown标题</h1><h2 id="1-1-使用-和-标记一级和二级标题"><a href="#1-1-使用-和-标记一级和二级标题" class="headerlink" title="1.1 使用 = 和 - 标记一级和二级标题"></a>1.1 使用 = 和 - 标记一级和二级标题</h2><p>= 和 - 标记语法格式如下:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">我展示的是一级标题</span><br><span class="hljs-section">=================</span><br><br><span class="hljs-section">我展示的是二级标题</span><br><span class="hljs-section">-----------------</span><br></code></pre></td></tr></table></figure><h2 id="1-2-使用-号标记"><a href="#1-2-使用-号标记" class="headerlink" title="1.2 使用#号标记"></a>1.2 使用#号标记</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h1 id="2、段落格式"><a href="#2、段落格式" class="headerlink" title="2、段落格式"></a>2、段落格式</h1><h2 id="2-1-字体"><a href="#2-1-字体" class="headerlink" title="2.1 字体"></a>2.1 字体</h2><p>markdown可以使用一下几种字体</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><h2 id="2-2-分割线"><a href="#2-2-分割线" class="headerlink" title="2.2 分割线"></a>2.2 分割线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">- - -</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">----------</span></span><br></code></pre></td></tr></table></figure><h2 id="2-3-删除线"><a href="#2-3-删除线" class="headerlink" title="2.3 删除线"></a>2.3 删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~BAIDU.COM~~<br></code></pre></td></tr></table></figure><p>效果如：<del>BAIDU.COM</del></p><h2 id="2-4-下划线"><a href="#2-4-下划线" class="headerlink" title="2.4 下划线"></a>2.4 下划线</h2><p>下划线可以通过 HTML 的 <code>^&lt;u&gt;</code> 标签来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示效果为： <u>带下划线文本</u></p><h2 id="2-5-注脚"><a href="#2-5-注脚" class="headerlink" title="2.5 注脚"></a>2.5 注脚</h2><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[^要注明的文本]<br></code></pre></td></tr></table></figure><h1 id="3、Markdown-列表"><a href="#3、Markdown-列表" class="headerlink" title="3、Markdown 列表"></a>3、Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><h2 id="3-1无序列表"><a href="#3-1无序列表" class="headerlink" title="3.1无序列表"></a>3.1无序列表</h2><p>  使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要<strong>添加一个空格</strong>，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><h2 id="3-2有序列表"><a href="#3-2有序列表" class="headerlink" title="3.2有序列表"></a>3.2有序列表</h2><p>  使用数字并加上 . 号来表示，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><h2 id="3-3-列表嵌套"><a href="#3-3-列表嵌套" class="headerlink" title="3.3 列表嵌套"></a>3.3 列表嵌套</h2><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="4、Markdown区块"><a href="#4、Markdown区块" class="headerlink" title="4、Markdown区块"></a>4、Markdown区块</h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">区块引用</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">菜鸟教程</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">学的不仅是技术更是梦想</span><br></code></pre></td></tr></table></figure><p>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">最外层</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">&gt; 第一层嵌套</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">&gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><p>展示效果如下：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="4-1-区块中使用列表"><a href="#4-1-区块中使用列表" class="headerlink" title="4.1 区块中使用列表"></a>4.1 区块中使用列表</h2><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">区块中使用列表</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第一项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第二项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第三项</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><h2 id="4-2-列表中使用区块"><a href="#4-2-列表中使用区块" class="headerlink" title="4.2 列表中使用区块"></a>4.2 列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前<strong>添加四个空格</strong>的缩进。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<br><span class="hljs-code">    &gt; 菜鸟教程</span><br><span class="hljs-code">    &gt; 学的不仅是技术更是梦想</span><br><span class="hljs-bullet">* </span>第二项<br></code></pre></td></tr></table></figure><p>显示效果如下</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1 id="5、Markdown代码"><a href="#5、Markdown代码" class="headerlink" title="5、Markdown代码"></a>5、Markdown代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`printf()` 函数<br></code></pre></td></tr></table></figure><p>显示效果为： <code>printf()</code> 函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p><p>也可以使用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><h1 id="6、Markdown-链接"><a href="#6、Markdown-链接" class="headerlink" title="6、Markdown 链接"></a>6、Markdown 链接</h1><h2 id="6-1-使用方法："><a href="#6-1-使用方法：" class="headerlink" title="6.1 使用方法："></a>6.1 使用方法：</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><p>例如：<code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code><br>效果为：这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a><br>直接使用链接地址： <code>&lt;https://www.runoob.com&gt;</code><br>效果为：<a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="6-2-高级链接"><a href="#6-2-高级链接" class="headerlink" title="6.2 高级链接"></a>6.2 高级链接</h2><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">这个链接用 <span class="hljs-selector-tag">1</span> 作为网址变量 <span class="hljs-selector-attr">[Google]</span><span class="hljs-selector-attr">[1]</span><br>这个链接用 <span class="hljs-selector-tag">runoob</span> 作为网址变量 <span class="hljs-selector-attr">[Runoob]</span><span class="hljs-selector-attr">[runoob]</span><br>然后在文档的结尾为变量赋值（网址）<br><br>  <span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br>  <span class="hljs-selector-attr">[runoob]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.runoob.com/</span><br></code></pre></td></tr></table></figure><p>效果为：<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h1 id="7、Markdown-图片"><a href="#7、Markdown-图片" class="headerlink" title="7、Markdown 图片"></a>7、Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br><br>!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址 <span class="hljs-string">&quot;可选标题&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png)<br><br>![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png <span class="hljs-string">&quot;RUNOOB&quot;</span>)<br></code></pre></td></tr></table></figure><p>显示效果为:<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">这个链接用 <span class="hljs-number">1</span> 作为网址变量 [RUNOOB][<span class="hljs-number">1</span>].<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-number">1</span>]: http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png<br></code></pre></td></tr></table></figure><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="8、Markdown-表格"><a href="#8、Markdown-表格" class="headerlink" title="8、Markdown 表格"></a>8、Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>显示的效果为：<br>|  表头   | 表头  |<br>|  —-  | —-  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br>对齐方式<br>我们可以设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。、<br>实例如下：<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure>显示效果为为：<table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/27/hello-world/"/>
    <url>/2021/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! 这是hexo自动生成的第一个欢迎也面. 查看 <a href="https://hexo.io/docs/">文档</a> 了解更多信息. 如果您在使用Hexo时遇到任何问题，可以在 <a href="https://hexo.io/docs/troubleshooting.html">疑难解答</a>中找到答案 ,也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>上询问我.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新的也面"><a href="#创建一个新的也面" class="headerlink" title="创建一个新的也面"></a>创建一个新的也面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动blog服务"><a href="#启动blog服务" class="headerlink" title="启动blog服务"></a>启动blog服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="发布到远端"><a href="#发布到远端" class="headerlink" title="发布到远端"></a>发布到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
