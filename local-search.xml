<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hotel数据模板</title>
    <link href="/2022/04/19/hotel%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/04/19/hotel%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>数据模板，来源于黑马程序员教程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_hotel`  (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店id&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店名称&#x27;</span>,<br>  `address` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店地址&#x27;</span>,<br>  `price` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店价格&#x27;</span>,<br>  `score` <span class="hljs-type">int</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店评分&#x27;</span>,<br>  `brand` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店品牌&#x27;</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;所在城市&#x27;</span>,<br>  `star_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店星级，1星到5星，1钻到5钻&#x27;</span>,<br>  `business` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;商圈&#x27;</span>,<br>  `latitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;纬度&#x27;</span>,<br>  `longitude` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;经度&#x27;</span>,<br>  `pic` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;酒店图片&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4_general_ci ROW_FORMAT <span class="hljs-operator">=</span> Compact;<br><br><span class="hljs-comment">--数据来源于黑马课程</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">36934</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海宝山路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;静安交通路40号&#x27;</span>, <span class="hljs-number">336</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;四川北路商业区&#x27;</span>, <span class="hljs-string">&#x27;31.251433&#x27;</span>, <span class="hljs-string">&#x27;121.47522&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3E/40/Cii9EVkyLrKIXo1vAAHgrxo_pUcAALcKQLD688AAeDH564_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">38609</span>, <span class="hljs-string">&#x27;速8酒店(上海赤峰路店)&#x27;</span>, <span class="hljs-string">&#x27;广灵二路126号&#x27;</span>, <span class="hljs-number">249</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;四川北路商业区&#x27;</span>, <span class="hljs-string">&#x27;31.282444&#x27;</span>, <span class="hljs-string">&#x27;121.479385&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/DF/96/Cii-TFkx0ImIQZeiAAITil0LM7cAALCYwKXHQ4AAhOi377_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">38665</span>, <span class="hljs-string">&#x27;速8酒店上海中山北路兰田路店&#x27;</span>, <span class="hljs-string">&#x27;兰田路38号&#x27;</span>, <span class="hljs-number">226</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;长风公园地区&#x27;</span>, <span class="hljs-string">&#x27;31.244288&#x27;</span>, <span class="hljs-string">&#x27;121.422419&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/EF/86/Cii-Tlk2mV2IMZ-_AAEucgG3dx4AALaawEjiycAAS6K083_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">38812</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海漕溪路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;徐汇龙华西路315弄58号&#x27;</span>, <span class="hljs-number">298</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;八万人体育场地区&#x27;</span>, <span class="hljs-string">&#x27;31.174377&#x27;</span>, <span class="hljs-string">&#x27;121.442875&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/E0/0E/Cii-TlkyIr2IEWNoAAHQYv7i5CkAALD-QP2iJwAAdB6245_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">39106</span>, <span class="hljs-string">&#x27;7天连锁酒店（上海莘庄地铁站店）&#x27;</span>, <span class="hljs-string">&#x27;闵行莘庄镇七莘路299号&#x27;</span>, <span class="hljs-number">348</span>, <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;莘庄工业区&#x27;</span>, <span class="hljs-string">&#x27;31.113812&#x27;</span>, <span class="hljs-string">&#x27;121.375869&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/11/Cii-T1ku2zGIGR7uAAF1NYY9clwAAKxZAHO8HgAAXVN368_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">39141</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海五角场复旦同济大学店)&#x27;</span>, <span class="hljs-string">&#x27;杨浦国权路315号&#x27;</span>, <span class="hljs-number">349</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;江湾、五角场商业区&#x27;</span>, <span class="hljs-string">&#x27;31.290057&#x27;</span>, <span class="hljs-string">&#x27;121.508804&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/C7/E3/Cii-T1knFXCIJzNYAAFB8-uFNAEAAKYkQPcw1IAAUIL012_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">45845</span>, <span class="hljs-string">&#x27;上海西藏大厦万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;虹桥路100号&#x27;</span>, <span class="hljs-number">589</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;徐家汇地区&#x27;</span>, <span class="hljs-string">&#x27;31.192714&#x27;</span>, <span class="hljs-string">&#x27;121.434717&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/48GNb9GZpJDCejVAcQHYWwYyU8T_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">45870</span>, <span class="hljs-string">&#x27;上海临港豪生大酒店&#x27;</span>, <span class="hljs-string">&#x27;新元南路555号&#x27;</span>, <span class="hljs-number">896</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;滴水湖临港地区&#x27;</span>, <span class="hljs-string">&#x27;30.871729&#x27;</span>, <span class="hljs-string">&#x27;121.81959&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2F5HoQvBgypoDUE46752ppnQaTqs_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">46829</span>, <span class="hljs-string">&#x27;上海浦西万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;恒丰路338号&#x27;</span>, <span class="hljs-number">726</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;上海火车站地区&#x27;</span>, <span class="hljs-string">&#x27;31.242977&#x27;</span>, <span class="hljs-string">&#x27;121.455864&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/x87VCoyaR8cTuYFZmKHe8VC6Wk1_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">47066</span>, <span class="hljs-string">&#x27;上海浦东东站华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;施新路958号&#x27;</span>, <span class="hljs-number">408</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;浦东机场核心区&#x27;</span>, <span class="hljs-string">&#x27;31.147989&#x27;</span>, <span class="hljs-string">&#x27;121.759199&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2pNujAVaQbXACzkHp8bQMm6zqwhp_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">47478</span>, <span class="hljs-string">&#x27;速8酒店(上海松江中心店)&#x27;</span>, <span class="hljs-string">&#x27;松江荣乐东路677号&#x27;</span>, <span class="hljs-number">428</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;佘山、松江大学城&#x27;</span>, <span class="hljs-string">&#x27;31.016712&#x27;</span>, <span class="hljs-string">&#x27;121.261606&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/filebroker/cdn/res/07/36/073662e1718fccefb7130a9da44ddf5c_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56201</span>, <span class="hljs-string">&#x27;上海齐鲁万怡大酒店&#x27;</span>, <span class="hljs-string">&#x27;东方路838号&#x27;</span>, <span class="hljs-number">873</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;浦东陆家嘴金融贸易区&#x27;</span>, <span class="hljs-string">&#x27;31.226031&#x27;</span>, <span class="hljs-string">&#x27;121.525801&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B6/Cii-TF3eXKeIJeN7AASiKHbTtx4AAGRegDSBzMABKJA111_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56214</span>, <span class="hljs-string">&#x27;上海浦东华美达大酒店&#x27;</span>, <span class="hljs-string">&#x27;新金桥路18号&#x27;</span>, <span class="hljs-number">830</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;浦东金桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.244916&#x27;</span>, <span class="hljs-string">&#x27;121.590752&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3jtXiuMKZEXJAuKuAkc47yLCjUBt_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56227</span>, <span class="hljs-string">&#x27;上海圣淘沙万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;南桥镇南桥路1号&#x27;</span>, <span class="hljs-number">899</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;奉贤开发区&#x27;</span>, <span class="hljs-string">&#x27;30.910917&#x27;</span>, <span class="hljs-string">&#x27;121.456525&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B9/Cii-U13eXSiIdJjXAARSA6FywFYAAGRnwHvy1AABFIb158_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56392</span>, <span class="hljs-string">&#x27;上海银星皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;番禺路400号&#x27;</span>, <span class="hljs-number">809</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;徐家汇地区&#x27;</span>, <span class="hljs-string">&#x27;31.202768&#x27;</span>, <span class="hljs-string">&#x27;121.429524&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/37ucQ38K3UFdcRqntJ8M5dt884HR_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56852</span>, <span class="hljs-string">&#x27;上海财大豪生大酒店&#x27;</span>, <span class="hljs-string">&#x27;武东路188号&#x27;</span>, <span class="hljs-number">592</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;江湾/五角场商业区&#x27;</span>, <span class="hljs-string">&#x27;31.304182&#x27;</span>, <span class="hljs-string">&#x27;121.492936&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2jGHezLZvPZqC9cBGesbP5vAhCXi_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56912</span>, <span class="hljs-string">&#x27;上海华凯华美达广场酒店&#x27;</span>, <span class="hljs-string">&#x27;月华路9号&#x27;</span>, <span class="hljs-number">747</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;奉贤开发区&#x27;</span>, <span class="hljs-string">&#x27;30.814382&#x27;</span>, <span class="hljs-string">&#x27;121.464521&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/45iaCNCuZavJTxwTLskhVKzwynLD_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">56977</span>, <span class="hljs-string">&#x27;上海五角场华美达大酒店&#x27;</span>, <span class="hljs-string">&#x27;黄兴路1888号&#x27;</span>, <span class="hljs-number">499</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;江湾/五角场商业区&#x27;</span>, <span class="hljs-string">&#x27;31.292932&#x27;</span>, <span class="hljs-string">&#x27;121.519759&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/26VREqAQdaGFvJdAJALVtjxcNMpL_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60214</span>, <span class="hljs-string">&#x27;上海金茂君悦大酒店&#x27;</span>, <span class="hljs-string">&#x27;世纪大道88号（54楼办理入住）&#x27;</span>, <span class="hljs-number">699</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;君悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;浦东陆家嘴金融贸易区&#x27;</span>, <span class="hljs-string">&#x27;31.235152&#x27;</span>, <span class="hljs-string">&#x27;121.506082&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/7Azm3jvGUHuXe3eS1DrixAWVTXY_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60223</span>, <span class="hljs-string">&#x27;上海希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;静安华山路250号&#x27;</span>, <span class="hljs-number">2688</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;静安寺地区&#x27;</span>, <span class="hljs-string">&#x27;31.219306&#x27;</span>, <span class="hljs-string">&#x27;121.445427&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/filebroker/cdn/res/92/10/9210e74442aceceaf6e196d61fc3b6b1_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60359</span>, <span class="hljs-string">&#x27;上海外高桥皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;杨高北路1000号&#x27;</span>, <span class="hljs-number">3299</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;浦东外高桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.338944&#x27;</span>, <span class="hljs-string">&#x27;121.590611&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/VcKUM9zUSiVgDhFioc6mWQoX9ES_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60363</span>, <span class="hljs-string">&#x27;上海新世界丽笙大酒店&#x27;</span>, <span class="hljs-string">&#x27;南京西路88号&#x27;</span>, <span class="hljs-number">1341</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;丽笙&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;人民广场地区&#x27;</span>, <span class="hljs-string">&#x27;31.23462&#x27;</span>, <span class="hljs-string">&#x27;121.47327&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2j31b7X3YzGkf4Li3phS6TG1mtwm_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60398</span>, <span class="hljs-string">&#x27;上海复旦皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;邯郸路199号&#x27;</span>, <span class="hljs-number">924</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;江湾/五角场商业区&#x27;</span>, <span class="hljs-string">&#x27;31.295382&#x27;</span>, <span class="hljs-string">&#x27;121.502537&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2H1Gk8LHaBWZfYvR6NYYcGTvACmL_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60487</span>, <span class="hljs-string">&#x27;上海外滩茂悦大酒店&#x27;</span>, <span class="hljs-string">&#x27;黄浦路199号&#x27;</span>, <span class="hljs-number">689</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;君悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;外滩地区&#x27;</span>, <span class="hljs-string">&#x27;31.245409&#x27;</span>, <span class="hljs-string">&#x27;121.492969&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2Swp2h1fdj9zCUKsk63BQvVgKLTo_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60522</span>, <span class="hljs-string">&#x27;上海嘉豪淮海国际豪生酒店&#x27;</span>, <span class="hljs-string">&#x27;汾阳路1号&#x27;</span>, <span class="hljs-number">425</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;淮海路/新天地地区&#x27;</span>, <span class="hljs-string">&#x27;31.215497&#x27;</span>, <span class="hljs-string">&#x27;121.456297&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/38UBi4QYuaF8jN94CxQ7tb7tjtmZ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60916</span>, <span class="hljs-string">&#x27;上海绿地万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;沪宜公路3101号&#x27;</span>, <span class="hljs-number">328</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;嘉定新城&#x27;</span>, <span class="hljs-string">&#x27;31.368523&#x27;</span>, <span class="hljs-string">&#x27;121.258567&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3VLwG9tTQQnp3M3MTeMTdx9nas9B_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60922</span>, <span class="hljs-string">&#x27;上海虹桥祥源希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;红松东路1116号&#x27;</span>, <span class="hljs-number">1108</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;虹桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.18746&#x27;</span>, <span class="hljs-string">&#x27;121.395312&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/tQRqDTFkHnHzMZiDKjcGV81ekvc_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">60935</span>, <span class="hljs-string">&#x27;上海虹口三至喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;四平路59号&#x27;</span>, <span class="hljs-number">1899</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;四川北路商业区&#x27;</span>, <span class="hljs-string">&#x27;31.2579&#x27;</span>, <span class="hljs-string">&#x27;121.487954&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3C3gxLxLjVwnkxJwJm8rd3f38kcd_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">61075</span>, <span class="hljs-string">&#x27;上海雅居乐万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;西藏中路555号&#x27;</span>, <span class="hljs-number">1152</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;人民广场地区&#x27;</span>, <span class="hljs-string">&#x27;31.236681&#x27;</span>, <span class="hljs-string">&#x27;121.473529&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3FoT16PkXavKsssvktVvVq5Si6Cr_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">61083</span>, <span class="hljs-string">&#x27;上海滴水湖皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;自由贸易试验区临港新片区南岛1号&#x27;</span>, <span class="hljs-number">971</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;滴水湖临港地区&#x27;</span>, <span class="hljs-string">&#x27;30.890867&#x27;</span>, <span class="hljs-string">&#x27;121.937241&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/312e971Rnj9qFyR3pPv4bTtpj1hX_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">309208</span>, <span class="hljs-string">&#x27;北京王府井希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;王府井东街8号&#x27;</span>, <span class="hljs-number">1679</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;天安门/王府井地区&#x27;</span>, <span class="hljs-string">&#x27;39.914539&#x27;</span>, <span class="hljs-string">&#x27;116.413392&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/10/Cii-TF3ePt2IX9UEAALb6VYBSmoAAGKMgGsuW8AAtwB147_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">394559</span>, <span class="hljs-string">&#x27;北京东方君悦大酒店&#x27;</span>, <span class="hljs-string">&#x27;长安街1号东方广场&#x27;</span>, <span class="hljs-number">686</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;君悦&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;天安门/王府井地区&#x27;</span>, <span class="hljs-string">&#x27;39.909635&#x27;</span>, <span class="hljs-string">&#x27;116.414621&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3mFqcNSh7eEo9yc3Rw2P5HDNTdDe_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">394617</span>, <span class="hljs-string">&#x27;北京宝辰饭店&#x27;</span>, <span class="hljs-string">&#x27;建国门内大街甲18号&#x27;</span>, <span class="hljs-number">418</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;北京站/建国门地区&#x27;</span>, <span class="hljs-string">&#x27;39.905768&#x27;</span>, <span class="hljs-string">&#x27;116.428153&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/NEYa6EfDHuhhb19Ct85WBbkKHZU_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">394796</span>, <span class="hljs-string">&#x27;北京新云南皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;东北三环西坝河太阳宫桥东北角云南大厦&#x27;</span>, <span class="hljs-number">485</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;国展中心地区&#x27;</span>, <span class="hljs-string">&#x27;39.972409&#x27;</span>, <span class="hljs-string">&#x27;116.434698&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/dfP8K782eTsohQWSRdkd7St9LA2_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">395434</span>, <span class="hljs-string">&#x27;北京希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;东三环北路东方路1号&#x27;</span>, <span class="hljs-number">350</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;燕莎/朝阳公园商业区&#x27;</span>, <span class="hljs-string">&#x27;39.952703&#x27;</span>, <span class="hljs-string">&#x27;116.462387&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3fwNbKGhk6XCrkdVyxwhC5uGpLVy_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">395702</span>, <span class="hljs-string">&#x27;北京首都机场希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;首都机场3号航站楼三经路1号&#x27;</span>, <span class="hljs-number">222</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;首都机场/新国展地区&#x27;</span>, <span class="hljs-string">&#x27;40.048969&#x27;</span>, <span class="hljs-string">&#x27;116.619566&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/10/Cii-U13ePtuIMRSjAAFZ58NGQrMAAGKMgADZ1QAAVn_167_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">395787</span>, <span class="hljs-string">&#x27;北京海航大厦万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;霄云路甲26号&#x27;</span>, <span class="hljs-number">1302</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;燕莎/朝阳公园商业区&#x27;</span>, <span class="hljs-string">&#x27;39.959861&#x27;</span>, <span class="hljs-string">&#x27;116.467363&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3zFiWi2C9SmbcQwCZgJFQC9ahvs5_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">395799</span>, <span class="hljs-string">&#x27;北京国际艺苑皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;王府井大街48号&#x27;</span>, <span class="hljs-number">636</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;天安门/王府井地区&#x27;</span>, <span class="hljs-string">&#x27;39.918994&#x27;</span>, <span class="hljs-string">&#x27;116.411277&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/10/Cii-U13ePvyIahjPAAMykV278aEAAGKOQO9e4UAAzKp283_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">395815</span>, <span class="hljs-string">&#x27;北京明豪华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;天竺镇府前一街13号&#x27;</span>, <span class="hljs-number">558</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;首都机场/新国展地区&#x27;</span>, <span class="hljs-string">&#x27;40.062832&#x27;</span>, <span class="hljs-string">&#x27;116.580678&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/13/Cii-U13eP2mIKCwvAAODTZXT-fAAAGKVAA9taIAA4Nl245_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">396189</span>, <span class="hljs-string">&#x27;北京朝阳悠唐皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;三丰北里3号&#x27;</span>, <span class="hljs-number">944</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;三里屯/工体/东直门地区&#x27;</span>, <span class="hljs-string">&#x27;39.92129&#x27;</span>, <span class="hljs-string">&#x27;116.43847&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/tT6ipLain1ZovR5gnQ7tJ4KKym5_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">396471</span>, <span class="hljs-string">&#x27;维也纳酒店（北京花园路店）&#x27;</span>, <span class="hljs-string">&#x27;海淀北太平庄花园路甲17号&#x27;</span>, <span class="hljs-number">381</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;马甸、安贞地区&#x27;</span>, <span class="hljs-string">&#x27;39.970837&#x27;</span>, <span class="hljs-string">&#x27;116.365244&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/filebroker/cdn/res/17/00/1700926908bae6ba3e5ef96de7b7d4cc_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">396506</span>, <span class="hljs-string">&#x27;北京金隅喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;北三环东路36号&#x27;</span>, <span class="hljs-number">357</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;马甸/安贞地区&#x27;</span>, <span class="hljs-string">&#x27;39.967163&#x27;</span>, <span class="hljs-string">&#x27;116.4099&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/29FW2WtGzzUtPhWR1LKxcFZAVa9P_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">413460</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京天坛店)&#x27;</span>, <span class="hljs-string">&#x27;东城天坛东里甲48号&#x27;</span>, <span class="hljs-number">753</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;前门、崇文门商贸区&#x27;</span>, <span class="hljs-string">&#x27;39.875786&#x27;</span>, <span class="hljs-string">&#x27;116.421987&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/C7/D8/Cii-T1knCK6IWTtxAAI0plLButMAAKYTAJu-woAAjS-422_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">413476</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京南站店)&#x27;</span>, <span class="hljs-string">&#x27;丰台马家堡西路22号&#x27;</span>, <span class="hljs-number">478</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;永定门、南站、大红门、南苑地区&#x27;</span>, <span class="hljs-string">&#x27;39.845363&#x27;</span>, <span class="hljs-string">&#x27;116.372327&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/26/B7/Cii-U1knCtaISM4VAAHkEQd-mrAAAKw0ALVCwEAAeQp741_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">414168</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京西直门店)&#x27;</span>, <span class="hljs-string">&#x27;西城平安里西大街翠花街育幼胡同甲20-22号&#x27;</span>, <span class="hljs-number">419</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;西单、金融街地区&#x27;</span>, <span class="hljs-string">&#x27;39.931338&#x27;</span>, <span class="hljs-string">&#x27;116.364982&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/bc/66/bc666859edf4fc072a8006c66758058d_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">414481</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京团结湖地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;朝阳团结湖北里9号楼&#x27;</span>, <span class="hljs-number">525</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;燕莎、三里屯商业区&#x27;</span>, <span class="hljs-string">&#x27;39.928457&#x27;</span>, <span class="hljs-string">&#x27;116.466132&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/38/2D/Cii9EFkv2-uIPTaBAALX6P-rbdUAALPpwHv4ykAAtgA277_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">414698</span>, <span class="hljs-string">&#x27;7天连锁酒店（北京798艺术区店）&#x27;</span>, <span class="hljs-string">&#x27;朝阳北京市朝阳区酒仙桥北路（798艺术区北门）彩虹路6号-电通创意广场大院内&#x27;</span>, <span class="hljs-number">553</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;望京、酒仙桥、798地区&#x27;</span>, <span class="hljs-string">&#x27;39.990671&#x27;</span>, <span class="hljs-string">&#x27;116.498452&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/11/Cii-T1ku2zqIN7SiAAEdvT6RrjUAAKxZQKFooYAAR3V090_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">415600</span>, <span class="hljs-string">&#x27;如家酒店(北京朝阳北路传媒大学褡裢坡地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;三间房乡褡裢坡村青年沟西侧558号&#x27;</span>, <span class="hljs-number">259</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;传媒大学/管庄地区&#x27;</span>, <span class="hljs-string">&#x27;39.923212&#x27;</span>, <span class="hljs-string">&#x27;116.560023&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3NezpxNZWQMdNXibwbMkQuAZjDyJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">415659</span>, <span class="hljs-string">&#x27;7天连锁酒店（北京紫竹桥店）&#x27;</span>, <span class="hljs-string">&#x27;海淀北洼路甲3号&#x27;</span>, <span class="hljs-number">781</span>, <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;西直门及北京展览馆地区&#x27;</span>, <span class="hljs-string">&#x27;39.936138&#x27;</span>, <span class="hljs-string">&#x27;116.302405&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3C/22/Cii9EVkxPMqIZJz-AAIh0esETAIAALXbgNQkH8AAiHp053_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">416121</span>, <span class="hljs-string">&#x27;如家酒店(北京西客站北广场店)&#x27;</span>, <span class="hljs-string">&#x27;莲花池东路120-2号6层&#x27;</span>, <span class="hljs-number">275</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;北京西站/丽泽商务区&#x27;</span>, <span class="hljs-string">&#x27;39.896449&#x27;</span>, <span class="hljs-string">&#x27;116.317382&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/42DTRnKbiYoiGFVzrV9ZJUxNbvRo_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">416260</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京通州八里桥店)&#x27;</span>, <span class="hljs-string">&#x27;永顺镇西马庄小区&#x27;</span>, <span class="hljs-number">534</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;果园环岛、通州区&#x27;</span>, <span class="hljs-string">&#x27;39.915443&#x27;</span>, <span class="hljs-string">&#x27;116.631871&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/DF/5A/Cii-TlkxkeGIKM0oAAGOb64RvToAALBAAH9Fg8AAY6H201_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">416268</span>, <span class="hljs-string">&#x27;和颐酒店(北京传媒大学财满街店)&#x27;</span>, <span class="hljs-string">&#x27;朝阳路高井176号&#x27;</span>, <span class="hljs-number">524</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;国贸地区&#x27;</span>, <span class="hljs-string">&#x27;39.918277&#x27;</span>, <span class="hljs-string">&#x27;116.53015&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/13/Cii-TF3eP5GIJIOLAAUwsIVCxdAAAGKXgK5a0IABTDI239_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">416307</span>, <span class="hljs-string">&#x27;速8酒店(北京新国展首都机场后沙峪店)&#x27;</span>, <span class="hljs-string">&#x27;后沙峪镇裕民大街32号&#x27;</span>, <span class="hljs-number">350</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;首都机场/新国展地区&#x27;</span>, <span class="hljs-string">&#x27;40.099019&#x27;</span>, <span class="hljs-string">&#x27;116.543655&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/3E/Cii-TF3eRgGIHCkKAAP_ATvriiQAAGL0AIoLtUAA_8Z513_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">432335</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海北外滩国际客运中心地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;唐山路145号&#x27;</span>, <span class="hljs-number">249</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;北外滩地区&#x27;</span>, <span class="hljs-string">&#x27;31.252585&#x27;</span>, <span class="hljs-string">&#x27;121.498753&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/c1/ba/c1baf64418437c56617f89840c6411ef_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">433576</span>, <span class="hljs-string">&#x27;如家酒店(上海南京路步行街店)&#x27;</span>, <span class="hljs-string">&#x27;南京东路480号保安坊内&#x27;</span>, <span class="hljs-number">379</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;人民广场地区&#x27;</span>, <span class="hljs-string">&#x27;31.236454&#x27;</span>, <span class="hljs-string">&#x27;121.480948&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/BA/Cii-U13eXVaIQmdaAAWxgzdXXxEAAGRrgNIOkoABbGb143_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">434082</span>, <span class="hljs-string">&#x27;如家酒店·neo(上海外滩城隍庙小南门地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;复兴东路260号&#x27;</span>, <span class="hljs-number">392</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;豫园地区&#x27;</span>, <span class="hljs-string">&#x27;31.220706&#x27;</span>, <span class="hljs-string">&#x27;121.498769&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B6/Cii-U13eXLGIdHFzAAIG-5cEwDEAAGRfQNNIV0AAgcT627_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">441836</span>, <span class="hljs-string">&#x27;如家酒店(北京国展三元桥店)&#x27;</span>, <span class="hljs-string">&#x27;西坝河东里36号&#x27;</span>, <span class="hljs-number">458</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;国展中心地区&#x27;</span>, <span class="hljs-string">&#x27;39.966238&#x27;</span>, <span class="hljs-string">&#x27;116.450142&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/39/Cii-TF3eRTGITp1UAAYIilRD7skAAGLngIuAnQABgii479_w200_h200_c1_t0.png&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">485775</span>, <span class="hljs-string">&#x27;如家酒店(上海闵行华东师范大学吴泾店)&#x27;</span>, <span class="hljs-string">&#x27;吴泾镇宝秀路977号&#x27;</span>, <span class="hljs-number">161</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;交大/闵行经济开发区&#x27;</span>, <span class="hljs-string">&#x27;31.047135&#x27;</span>, <span class="hljs-string">&#x27;121.46224&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/V8pz15CkiMX5xYJRmbbp5zkKWJ8_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">489756</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京平谷店)&#x27;</span>, <span class="hljs-string">&#x27;文化北街4-16号&#x27;</span>, <span class="hljs-number">544</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;平谷城区&#x27;</span>, <span class="hljs-string">&#x27;40.14308&#x27;</span>, <span class="hljs-string">&#x27;117.111554&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/2e/b4/2eb4edb22ddb981307d8570beb1d746d_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">517915</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳草埔地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;布吉路1036号&#x27;</span>, <span class="hljs-number">159</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;田贝/水贝珠宝城&#x27;</span>, <span class="hljs-string">&#x27;22.583191&#x27;</span>, <span class="hljs-string">&#x27;114.118499&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/228vhBCQmFRFWQBYX1cgoFQb6x58_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">527938</span>, <span class="hljs-string">&#x27;深圳好日子皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;福华一路28号&#x27;</span>, <span class="hljs-number">590</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;会展中心/CBD&#x27;</span>, <span class="hljs-string">&#x27;22.537153&#x27;</span>, <span class="hljs-string">&#x27;114.053529&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/b6Ztz5jn4MngK3Hzfxuu9JGsjrm_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">541619</span>, <span class="hljs-string">&#x27;如家酒店(上海莘庄地铁站龙之梦商业广场店)&#x27;</span>, <span class="hljs-string">&#x27;莘庄镇莘浜路172号&#x27;</span>, <span class="hljs-number">149</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;莘庄工业区&#x27;</span>, <span class="hljs-string">&#x27;31.105797&#x27;</span>, <span class="hljs-string">&#x27;121.37755&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3mKs3jETvJDj3dDdkRB9UyLLvPna_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">542068</span>, <span class="hljs-string">&#x27;上海茂业华美达广场酒店&#x27;</span>, <span class="hljs-string">&#x27;沪南路938号&#x27;</span>, <span class="hljs-number">646</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;浦东新国际博览中心&#x27;</span>, <span class="hljs-string">&#x27;31.182761&#x27;</span>, <span class="hljs-string">&#x27;121.554106&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2139uDFUZ2VKxrathwSeeE4DwyFU_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">546869</span>, <span class="hljs-string">&#x27;深圳彭年万丽酒店&#x27;</span>, <span class="hljs-string">&#x27;嘉宾路2002号（毗邻金光华购物广场）&#x27;</span>, <span class="hljs-number">701</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万丽&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;罗湖口岸/火车站&#x27;</span>, <span class="hljs-string">&#x27;22.540989&#x27;</span>, <span class="hljs-string">&#x27;114.122665&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/gwAbqEXFUpjUBmnxUfK89p3zBBT_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">581859</span>, <span class="hljs-string">&#x27;维也纳酒店（北京丰益桥店）（原申晨酒店）&#x27;</span>, <span class="hljs-string">&#x27;丰台丰管路8号&#x27;</span>, <span class="hljs-number">648</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;北京西站、丽泽商务区&#x27;</span>, <span class="hljs-string">&#x27;39.857707&#x27;</span>, <span class="hljs-string">&#x27;116.312482&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/97/43/97438481b9e79abad429e5c30d7f303f_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">584697</span>, <span class="hljs-string">&#x27;7天连锁酒店（深圳华强赛格广场店）&#x27;</span>, <span class="hljs-string">&#x27;华强南路3024号赛格苑1栋&#x27;</span>, <span class="hljs-number">362</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;华强北商业区&#x27;</span>, <span class="hljs-string">&#x27;22.539831&#x27;</span>, <span class="hljs-string">&#x27;114.087899&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/11/Cii-T1ku2zmIcP4sAAEw8iuLXFgAAKxZQH7HVYAATEK972_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">593228</span>, <span class="hljs-string">&#x27;7天连锁酒店（北京颐和园店）&#x27;</span>, <span class="hljs-string">&#x27;海淀厢红旗路功德寺桥北侧&#x27;</span>, <span class="hljs-number">730</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;香山、八大处风景区&#x27;</span>, <span class="hljs-string">&#x27;40.003959&#x27;</span>, <span class="hljs-string">&#x27;116.256718&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/55/84/55841f502c5a711e66dd5454b64f559b_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">598591</span>, <span class="hljs-string">&#x27;上海丽昂豪生大酒店&#x27;</span>, <span class="hljs-string">&#x27;金新路99号&#x27;</span>, <span class="hljs-number">529</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;浦东金桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.252496&#x27;</span>, <span class="hljs-string">&#x27;121.600085&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2KfPPyPx9rWyVXif2CUuxv61Nryc_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">607915</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳皇岗店)&#x27;</span>, <span class="hljs-string">&#x27;滨河大道6033号海滨广场国皇大厦3楼&#x27;</span>, <span class="hljs-number">313</span>, <span class="hljs-number">42</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;皇岗口岸/福田口岸&#x27;</span>, <span class="hljs-string">&#x27;22.528101&#x27;</span>, <span class="hljs-string">&#x27;114.064221&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/qMyCJVYuW21nsCeEBt8CMfmEhra_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">608374</span>, <span class="hljs-string">&#x27;如家酒店(上海浦东机场龙东大道合庆店)&#x27;</span>, <span class="hljs-string">&#x27;东川公路5863号&#x27;</span>, <span class="hljs-number">160</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东机场核心区&#x27;</span>, <span class="hljs-string">&#x27;31.237662&#x27;</span>, <span class="hljs-string">&#x27;121.718556&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/LUYxGGV4pzjKeN5a69K4deU8JD8_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">609023</span>, <span class="hljs-string">&#x27;如家酒店·neo(上海外高桥保税区北地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;花山路1209号&#x27;</span>, <span class="hljs-number">266</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东外高桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.351148&#x27;</span>, <span class="hljs-string">&#x27;121.585606&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3cJ6KTfms9cfEnME8WRkQQBXBkYm_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">609372</span>, <span class="hljs-string">&#x27;豪派特华美达广场酒店(深圳北站店)&#x27;</span>, <span class="hljs-string">&#x27;民治街道梅龙路与民旺路交汇处&#x27;</span>, <span class="hljs-number">498</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;深圳北站地区&#x27;</span>, <span class="hljs-string">&#x27;22.620501&#x27;</span>, <span class="hljs-string">&#x27;114.033874&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3G5TnUCPbjGYHAVWfvuixw8bs69t_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">624417</span>, <span class="hljs-string">&#x27;深圳君悦酒店&#x27;</span>, <span class="hljs-string">&#x27;宝安南路1881号&#x27;</span>, <span class="hljs-number">442</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;君悦&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;万象城/京基100&#x27;</span>, <span class="hljs-string">&#x27;22.537247&#x27;</span>, <span class="hljs-string">&#x27;114.111182&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EA/Cii-TF3ZpVmIVDJ9AAXvJftz_AgAAFrrQKbI4oABe89086_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">628327</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳罗湖口岸国贸地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;人民南路2011号&#x27;</span>, <span class="hljs-number">223</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;罗湖口岸/火车站&#x27;</span>, <span class="hljs-string">&#x27;22.536734&#x27;</span>, <span class="hljs-string">&#x27;114.118336&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2rKHmQWHYiY8GZA3xBHpFKCLZwZo_w200_h200_c1_t0.png&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">629023</span>, <span class="hljs-string">&#x27;和颐酒店(北京十里河欢乐谷店)&#x27;</span>, <span class="hljs-string">&#x27;十八里店乡周家庄288号&#x27;</span>, <span class="hljs-number">390</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;劲松/潘家园地区&#x27;</span>, <span class="hljs-string">&#x27;39.853354&#x27;</span>, <span class="hljs-string">&#x27;116.483437&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/28hnDdqn5uzuzCKYkw2x4pYmunXM_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">629729</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海张江高科园区店)&#x27;</span>, <span class="hljs-string">&#x27;浦东新区蔡伦路103号&#x27;</span>, <span class="hljs-number">267</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东张江地区&#x27;</span>, <span class="hljs-string">&#x27;31.196154&#x27;</span>, <span class="hljs-string">&#x27;121.62071&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/d9/61/d961508a10865b9b29c033064f31b913_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">635963</span>, <span class="hljs-string">&#x27;深圳龙岗珠江皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;龙岗中心城龙翔大道9009号珠江广场&#x27;</span>, <span class="hljs-number">737</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;龙岗中心区/大运新城&#x27;</span>, <span class="hljs-string">&#x27;22.722941&#x27;</span>, <span class="hljs-string">&#x27;114.250002&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EA/Cii-U13ZpWGIasKjAAY1SNE36KMAAFrrwMNoAwABjVg973_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">636080</span>, <span class="hljs-string">&#x27;深圳大中华喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;福华路一号大中华国际交易广场&#x27;</span>, <span class="hljs-number">1556</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;会展中心/CBD&#x27;</span>, <span class="hljs-string">&#x27;22.535567&#x27;</span>, <span class="hljs-string">&#x27;114.062005&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3hQRTmAUW9PegTjxMiEfYwh2HnKp_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">644417</span>, <span class="hljs-string">&#x27;上海外高桥喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;自由贸易试验区基隆路28号（二号门内）&#x27;</span>, <span class="hljs-number">2419</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;浦东外高桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.350989&#x27;</span>, <span class="hljs-string">&#x27;121.588751&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/1Rrtg9n7PdMEivVDhsehbJBrEre_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">648219</span>, <span class="hljs-string">&#x27;上海金桥红枫万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;新金桥路15号&#x27;</span>, <span class="hljs-number">891</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;浦东金桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.244061&#x27;</span>, <span class="hljs-string">&#x27;121.591153&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B6/Cii-TF3eXKuIR_a0AAUx-Xd2JLQAAGRfACSpvUABTIR560_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">657192</span>, <span class="hljs-string">&#x27;深圳宝安中天美景华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;新桥街道万丰社区中心路7-1号&#x27;</span>, <span class="hljs-number">498</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;深圳国际会展中心商圈&#x27;</span>, <span class="hljs-string">&#x27;22.716473&#x27;</span>, <span class="hljs-string">&#x27;113.826391&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EA/Cii-U13ZpVeIRbhTAAOzGZSDtlcAAFrrQEWM-AAA7Mx626_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">659496</span>, <span class="hljs-string">&#x27;维也纳酒店(深圳国王店)&#x27;</span>, <span class="hljs-string">&#x27;龙华新区龙华龙观西路95号&#x27;</span>, <span class="hljs-number">714</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;深圳北站地区&#x27;</span>, <span class="hljs-string">&#x27;22.65892&#x27;</span>, <span class="hljs-string">&#x27;114.006817&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/b4/76/b476cacc575a7ff237128ba2fd63923a_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">670673</span>, <span class="hljs-string">&#x27;北京龙城华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;昌平路319号&#x27;</span>, <span class="hljs-number">506</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;回龙观/天通苑地区&#x27;</span>, <span class="hljs-string">&#x27;40.084219&#x27;</span>, <span class="hljs-string">&#x27;116.304313&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/T3WruZV3S4MfcxdD1HFVhZjaBLW_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">672207</span>, <span class="hljs-string">&#x27;和颐至尊酒店(北京望京798店)&#x27;</span>, <span class="hljs-string">&#x27;酒仙桥北路9号荧屏里4号楼&#x27;</span>, <span class="hljs-number">579</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;望京/酒仙桥/798地区&#x27;</span>, <span class="hljs-string">&#x27;39.98835&#x27;</span>, <span class="hljs-string">&#x27;116.491217&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2y56zwK8kd2tBuRUyF7XeJ2ucvWM_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">684720</span>, <span class="hljs-string">&#x27;和颐酒店(深圳罗湖口岸火车地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;沿河南路1064号&#x27;</span>, <span class="hljs-number">208</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;罗湖口岸/火车站&#x27;</span>, <span class="hljs-string">&#x27;22.533753&#x27;</span>, <span class="hljs-string">&#x27;114.122491&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2LFgB2iFawKKoGADwzhW6jpCSaJT_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">696948</span>, <span class="hljs-string">&#x27;上海新园华美达广场酒店&#x27;</span>, <span class="hljs-string">&#x27;漕宝路509号&#x27;</span>, <span class="hljs-number">1290</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;光大会展中心/漕河泾地区&#x27;</span>, <span class="hljs-string">&#x27;31.163802&#x27;</span>, <span class="hljs-string">&#x27;121.405618&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B6/Cii-TF3eXHuIE57sAAZx8iP6rMIAAGRbgAH09gABnIK621_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">706343</span>, <span class="hljs-string">&#x27;速8酒店（北京西客站北广场店）&#x27;</span>, <span class="hljs-string">&#x27;丰台莲花池东路126号&#x27;</span>, <span class="hljs-number">268</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;北京西站、丽泽商务区&#x27;</span>, <span class="hljs-string">&#x27;39.896623&#x27;</span>, <span class="hljs-string">&#x27;116.315586&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/E3/46/Cii-TlkzMXWIL0sAAAGG8a3YwiwAALJlgG-r5YAAYcJ067_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">707357</span>, <span class="hljs-string">&#x27;维也纳酒店（上海南站光大店）&#x27;</span>, <span class="hljs-string">&#x27;徐汇桂林路46号（钦州南路路口往南100米）&#x27;</span>, <span class="hljs-number">3288</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;光大会展中心&#x27;</span>, <span class="hljs-string">&#x27;31.156297&#x27;</span>, <span class="hljs-string">&#x27;121.419948&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/f7/13/f713f8f98d777d8d53aafefb37a79ef6_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">711837</span>, <span class="hljs-string">&#x27;速8酒店（北京立水桥店）&#x27;</span>, <span class="hljs-string">&#x27;朝阳安立路3号1幢3层&#x27;</span>, <span class="hljs-number">268</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;亚运村、奥体中心地区&#x27;</span>, <span class="hljs-string">&#x27;40.043717&#x27;</span>, <span class="hljs-string">&#x27;116.410962&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/b3/87/b3876eaf16af62521cf6fb474504b8ca_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">727679</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳步行街老街地铁站二店)&#x27;</span>, <span class="hljs-string">&#x27;罗湖区东门中路2216号华佳广场12-14楼（东门天桥东头）&#x27;</span>, <span class="hljs-number">742</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;东门商业区&#x27;</span>, <span class="hljs-string">&#x27;22.54585&#x27;</span>, <span class="hljs-string">&#x27;114.122227&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/39/99/Cii9EFkwVMKIP_mCAAI3fOHlS1wAALSDAMeO2MAAjeU309_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">728180</span>, <span class="hljs-string">&#x27;如家酒店(深圳宝安西乡地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;西乡大道298-7号（富通城二期公交站旁）&#x27;</span>, <span class="hljs-number">184</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;宝安体育中心商圈&#x27;</span>, <span class="hljs-string">&#x27;22.569693&#x27;</span>, <span class="hljs-string">&#x27;113.860186&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/FHdugqgUgYLPMoC4u4rdTbAPrVF_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">728415</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳东门步行街晒布地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;晒布路67号&#x27;</span>, <span class="hljs-number">152</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;东门商业区&#x27;</span>, <span class="hljs-string">&#x27;22.550183&#x27;</span>, <span class="hljs-string">&#x27;114.120771&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/57/Cii-U13PFNWISSnQAAEpTtoilsQAAEVWgEvur8AASlm647_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">728461</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳会展中心店)&#x27;</span>, <span class="hljs-string">&#x27;新洲路世纪工艺品广场307栋&#x27;</span>, <span class="hljs-number">258</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;皇岗口岸/福田口岸&#x27;</span>, <span class="hljs-string">&#x27;22.518026&#x27;</span>, <span class="hljs-string">&#x27;114.046061&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/56/Cii-TF3PFKOIPl0JAANm4ge6DdMAAEVTQK2SP8AA2b6365_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">728604</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳南山地铁站南山市场店)&#x27;</span>, <span class="hljs-string">&#x27;南新路顺富街18号化州大厦&#x27;</span>, <span class="hljs-number">198</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;科技园&#x27;</span>, <span class="hljs-string">&#x27;22.525561&#x27;</span>, <span class="hljs-string">&#x27;113.920058&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/57/Cii-TF3PFLmIDGWiAAPHkaNTuOIAAEVVQBGazAAA8ep611_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">730454</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳万象城店)&#x27;</span>, <span class="hljs-string">&#x27;罗湖区嘉宾路4025号城市天地广场内&#x27;</span>, <span class="hljs-number">552</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;罗湖口岸/火车站&#x27;</span>, <span class="hljs-string">&#x27;22.537078&#x27;</span>, <span class="hljs-string">&#x27;114.113733&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/C8/4C/Cii-Tlknhz2IFnYNAAInF2jEK14AAKbcQNB5M8AAicv660_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">730569</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳梅林卓越城店)&#x27;</span>, <span class="hljs-string">&#x27;孖岭地铁口C出口左手边，青年学院对面&#x27;</span>, <span class="hljs-number">269</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;莲花山/梅林&#x27;</span>, <span class="hljs-string">&#x27;22.568701&#x27;</span>, <span class="hljs-string">&#x27;114.068464&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/0B/Cii-Tlku2dOISeGXAAAUw3MvPrIAAKxYALB2VAAABTb555_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">730968</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳宝安地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;宝安区宝安25区创业二路步行街金麒麟服装广场4栋&#x27;</span>, <span class="hljs-number">314</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;宝安中心区/前海&#x27;</span>, <span class="hljs-string">&#x27;22.568162&#x27;</span>, <span class="hljs-string">&#x27;113.900968&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/0B/Cii-T1ku2cqIWTOOAAAS_bvRI5UAAKxXwILCFYAABMV285_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">751035</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海自贸区北门地铁站店)(原外高桥地铁北站店)&#x27;</span>, <span class="hljs-string">&#x27;花山路706号&#x27;</span>, <span class="hljs-number">328</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东外高桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.348029&#x27;</span>, <span class="hljs-string">&#x27;121.576896&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3A/21/Cii-U1kwxUCINXaHAAGmh7z6qRAAALUdwMKGREAAaaf928_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">844350</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳世界之窗店)&#x27;</span>, <span class="hljs-string">&#x27;南山区白石洲沙河街2号金三角大厦&#x27;</span>, <span class="hljs-number">769</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;华侨城&#x27;</span>, <span class="hljs-string">&#x27;22.540501&#x27;</span>, <span class="hljs-string">&#x27;113.968858&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/D8/11/Cii-TFku2zmIOdjCAAAQJpLFhEEAAKxZQIEvQ0AABA-920_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2316304</span>, <span class="hljs-string">&#x27;如家酒店(深圳双龙地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;龙岗街道龙岗墟社区龙平东路62号&#x27;</span>, <span class="hljs-number">135</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;龙岗中心区/大运新城&#x27;</span>, <span class="hljs-string">&#x27;22.730828&#x27;</span>, <span class="hljs-string">&#x27;114.278337&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4AzEoQ44awd1D2g95a6XDtJf3dkw_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2329005</span>, <span class="hljs-string">&#x27;维也纳酒店(深圳华之沙店)&#x27;</span>, <span class="hljs-string">&#x27;福强路新洲九街28号&#x27;</span>, <span class="hljs-number">651</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;皇岗口岸/福田口岸&#x27;</span>, <span class="hljs-string">&#x27;22.524835&#x27;</span>, <span class="hljs-string">&#x27;114.048214&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/88/f0/88f05cd11990ef39ae187886c76f40a5_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2351601</span>, <span class="hljs-string">&#x27;深圳蛇口希尔顿南海酒店&#x27;</span>, <span class="hljs-string">&#x27;望海路1177号&#x27;</span>, <span class="hljs-number">509</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;深圳湾口岸/蛇口&#x27;</span>, <span class="hljs-string">&#x27;22.479373&#x27;</span>, <span class="hljs-string">&#x27;113.916013&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EA/Cii-TF3ZpXOIfa6fAAJjiUOiuYgAAFrtgDtgpQAAmOh799_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2359697</span>, <span class="hljs-string">&#x27;如家酒店(北京上地安宁庄东路店)&#x27;</span>, <span class="hljs-string">&#x27;清河小营安宁庄东路18号20号楼&#x27;</span>, <span class="hljs-number">420</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;上地产业园/西三旗&#x27;</span>, <span class="hljs-string">&#x27;40.041322&#x27;</span>, <span class="hljs-string">&#x27;116.333316&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2wj2f8mo9WZQCmzm51cwkZ9zvyp8_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5865979</span>, <span class="hljs-string">&#x27;北京丽都皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;将台路6号&#x27;</span>, <span class="hljs-number">1168</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;望京/酒仙桥/798地区&#x27;</span>, <span class="hljs-string">&#x27;39.978133&#x27;</span>, <span class="hljs-string">&#x27;116.478642&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/Yo4xL3RUsYUnDDc5QcQWj7sCrUX_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5870456</span>, <span class="hljs-string">&#x27;上海宝华万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;广中西路333号&#x27;</span>, <span class="hljs-number">922</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;大宁国际商业区&#x27;</span>, <span class="hljs-string">&#x27;31.279371&#x27;</span>, <span class="hljs-string">&#x27;121.446327&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/BA/Cii-U13eXVqIZXDFAAUC_xbrQDAAAGRrwPRyOcABQMX057_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5871652</span>, <span class="hljs-string">&#x27;上海圣诺亚皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;金沙江路1699号&#x27;</span>, <span class="hljs-number">770</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;长风公园地区&#x27;</span>, <span class="hljs-string">&#x27;31.232346&#x27;</span>, <span class="hljs-string">&#x27;121.377709&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/J4sP7qRSHa9rFYnKTW75ZPB393M_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5872067</span>, <span class="hljs-string">&#x27;崇明金茂凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;陈家镇揽海路799弄&#x27;</span>, <span class="hljs-number">1024</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;崇明岛/长兴岛/横沙岛&#x27;</span>, <span class="hljs-string">&#x27;31.466563&#x27;</span>, <span class="hljs-string">&#x27;121.799671&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/fsKrbnNsmSsYnNLmhh3ZvVjZ5cA_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5873072</span>, <span class="hljs-string">&#x27;速8酒店（上海火车站北广场店）&#x27;</span>, <span class="hljs-string">&#x27;闸北芷江西路796号&#x27;</span>, <span class="hljs-number">190</span>, <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;上海火车站地区&#x27;</span>, <span class="hljs-string">&#x27;31.255579&#x27;</span>, <span class="hljs-string">&#x27;121.452903&#x27;</span>, <span class="hljs-string">&#x27;https://m2.tuniucdn.com/filebroker/cdn/res/96/6d/966d6596e6cb7b48c9cc1d7da79b57c8_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7094829</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳华强南店)&#x27;</span>, <span class="hljs-string">&#x27;松岭路9号（南园小学对面）&#x27;</span>, <span class="hljs-number">215</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;华强北商业区&#x27;</span>, <span class="hljs-string">&#x27;22.536842&#x27;</span>, <span class="hljs-string">&#x27;114.094316&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3WDhaZZ9yALHw8yNiU6HJyrdC3u5_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">189429168</span>, <span class="hljs-string">&#x27;7天连锁酒店(北京大兴黄村清源路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;清源西路55号&#x27;</span>, <span class="hljs-number">392</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;大兴农业生态观光区&#x27;</span>, <span class="hljs-string">&#x27;39.743751&#x27;</span>, <span class="hljs-string">&#x27;116.321676&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/4F/25/Cii9EFk3LmOIFtnDAAHm5kdIiM8AAL1FQM8kG0AAeb-418_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197487869</span>, <span class="hljs-string">&#x27;如家酒店(北京第二外国语大学南门双桥地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;三间房乡新房村1号&#x27;</span>, <span class="hljs-number">321</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;传媒大学/管庄地区&#x27;</span>, <span class="hljs-string">&#x27;39.90635&#x27;</span>, <span class="hljs-string">&#x27;116.565528&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/ZkgDAs8tTMvgFHdVPpikNqENEn1_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197488318</span>, <span class="hljs-string">&#x27;速8酒店（北京立水桥地铁南站店）&#x27;</span>, <span class="hljs-string">&#x27;朝阳北苑路18号院3号楼4层&#x27;</span>, <span class="hljs-number">344</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;亚运村、奥体中心地区&#x27;</span>, <span class="hljs-string">&#x27;40.043689&#x27;</span>, <span class="hljs-string">&#x27;116.414138&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/36/4D/Cii9EVkvP72IYYjgAAF7yZeWV-wAALMQACOARMAAXvh983_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197492277</span>, <span class="hljs-string">&#x27;速8酒店（北京平谷兴谷环岛店）&#x27;</span>, <span class="hljs-string">&#x27;平谷平谷大街31号&#x27;</span>, <span class="hljs-number">614</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;平谷城区&#x27;</span>, <span class="hljs-string">&#x27;40.159255&#x27;</span>, <span class="hljs-string">&#x27;117.12401&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/38/D5/Cii9EFkwFCiII79zAAHKsXy_LAoAALQuQEmEZ4AAcrJ339_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197492479</span>, <span class="hljs-string">&#x27;如家酒店(北京顺义中心地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;光明南大街14号&#x27;</span>, <span class="hljs-number">306</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;顺义温泉休闲区&#x27;</span>, <span class="hljs-string">&#x27;40.124783&#x27;</span>, <span class="hljs-string">&#x27;116.65751&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2hNBSjmMTk6JQ2o8ixr5s3ioevhB_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197496182</span>, <span class="hljs-string">&#x27;和颐酒店(北京团结湖地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;团结湖路9号楼&#x27;</span>, <span class="hljs-number">341</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;燕莎/朝阳公园商业区&#x27;</span>, <span class="hljs-string">&#x27;39.930731&#x27;</span>, <span class="hljs-string">&#x27;116.466602&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2gK41VpMb4AwyNkwQEkfFo83uTUU_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197496980</span>, <span class="hljs-string">&#x27;速8酒店(北京温都水城王府店)&#x27;</span>, <span class="hljs-string">&#x27;昌平北七家镇平西府村（温都水城东200米）&#x27;</span>, <span class="hljs-number">585</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;小汤山温泉度假区&#x27;</span>, <span class="hljs-string">&#x27;40.10144&#x27;</span>, <span class="hljs-string">&#x27;116.380641&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/C7/CB/Cii-T1km_5eICnpJAAHOWN1GylMAAKYJwF0Hp8AAc5w000_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197516492</span>, <span class="hljs-string">&#x27;速8酒店（北京南苑东高地店）&#x27;</span>, <span class="hljs-string">&#x27;丰台南大红门路东营房15号&#x27;</span>, <span class="hljs-number">651</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;永定门、南站、大红门、南苑地区&#x27;</span>, <span class="hljs-string">&#x27;39.78996&#x27;</span>, <span class="hljs-string">&#x27;116.42081&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3B/D8/Cii-U1kxKGWIQlaxAAIdkjkSALkAALXDQMFbTsAAh2q158_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197835483</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳大学桃园店)&#x27;</span>, <span class="hljs-string">&#x27;南山区桃园西路160号&#x27;</span>, <span class="hljs-number">431</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;科技园&#x27;</span>, <span class="hljs-string">&#x27;22.532576&#x27;</span>, <span class="hljs-string">&#x27;113.916362&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/38/40/Cii9EFkv4XKIQN85AAFUcDrkXe0AALPvwPRn08AAVSI037_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">197837109</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳龙岗大道布吉地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;布吉镇深惠路龙珠商城&#x27;</span>, <span class="hljs-number">127</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;布吉/深圳东站&#x27;</span>, <span class="hljs-string">&#x27;22.602482&#x27;</span>, <span class="hljs-string">&#x27;114.123284&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/58/Cii-TF3PFZOIA7jwAAKInGFN4xgAAEVbAGeP4AAAoi0485_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">198323591</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳北站龙华汽车站店)&#x27;</span>, <span class="hljs-string">&#x27;龙华新区建辉路2号&#x27;</span>, <span class="hljs-number">209</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;深圳北站地区&#x27;</span>, <span class="hljs-string">&#x27;22.671313&#x27;</span>, <span class="hljs-string">&#x27;114.02784&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2dkB2HzbaBUJ7adZZfZaeS9JCvjP_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200208940</span>, <span class="hljs-string">&#x27;上海浦东喜来登由由公寓&#x27;</span>, <span class="hljs-string">&#x27;浦建路38号&#x27;</span>, <span class="hljs-number">3168</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;浦东新国际博览中心&#x27;</span>, <span class="hljs-string">&#x27;31.208553&#x27;</span>, <span class="hljs-string">&#x27;121.518552&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/m3Nrm37Yx6YV4NwqRvSYnFRNSGk_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200210163</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海徐家汇宜山路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;徐汇钦州北路78号&#x27;</span>, <span class="hljs-number">219</span>, <span class="hljs-number">35</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;光大会展中心&#x27;</span>, <span class="hljs-string">&#x27;31.180615&#x27;</span>, <span class="hljs-string">&#x27;121.422916&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/DF/96/Cii-Tlkx0TOIGtOzAAEe_xcDxeIAALCZQJyxf4AAR8X941_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200214437</span>, <span class="hljs-string">&#x27;上海浦东机场华美达广场酒店&#x27;</span>, <span class="hljs-string">&#x27;浦东机场启航路1100号&#x27;</span>, <span class="hljs-number">600</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四星级&#x27;</span>, <span class="hljs-string">&#x27;浦东机场核心区&#x27;</span>, <span class="hljs-string">&#x27;31.160969&#x27;</span>, <span class="hljs-string">&#x27;121.799086&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2D2gbXDgrMx76uWfwzmoWpmSCCXx_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200214538</span>, <span class="hljs-string">&#x27;上海绿地万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;江滨路99号（打浦路底）&#x27;</span>, <span class="hljs-number">720</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;打浦桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.192103&#x27;</span>, <span class="hljs-string">&#x27;121.47298&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/268jVMuWdYok5ehGFhQ2QNhBhUhs_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200214715</span>, <span class="hljs-string">&#x27;上海浦东喜来登由由大酒店&#x27;</span>, <span class="hljs-string">&#x27;浦建路38号&#x27;</span>, <span class="hljs-number">2489</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;浦东新国际博览中心&#x27;</span>, <span class="hljs-string">&#x27;31.208739&#x27;</span>, <span class="hljs-string">&#x27;121.518305&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/36t2KUGs4h5YgYSaLSkr5pMXLM54_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200214824</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海陆家嘴八佰伴店)&#x27;</span>, <span class="hljs-string">&#x27;崂山路689号&#x27;</span>, <span class="hljs-number">249</span>, <span class="hljs-number">36</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东陆家嘴金融贸易区&#x27;</span>, <span class="hljs-string">&#x27;31.220656&#x27;</span>, <span class="hljs-string">&#x27;121.525127&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3D/95/Cii9EVkx0JCIRDFfAAIMnl8npiYAALaawHMG2kAAgy2536_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200215226</span>, <span class="hljs-string">&#x27;上海颖奕皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;博园路6555号&#x27;</span>, <span class="hljs-number">907</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;嘉定新城&#x27;</span>, <span class="hljs-string">&#x27;31.272533&#x27;</span>, <span class="hljs-string">&#x27;121.19179&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3Uyfi2aBRETE1K5PChiLVZCwtDLF_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200215286</span>, <span class="hljs-string">&#x27;上海万豪虹桥大酒店&#x27;</span>, <span class="hljs-string">&#x27;虹桥路2270号&#x27;</span>, <span class="hljs-number">910</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;虹桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.191529&#x27;</span>, <span class="hljs-string">&#x27;121.375577&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/52/B6/Cii-TF3eXK6IBQoRAAbgs1dyxJwAAGRfAPXbPQABuDL314_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200215365</span>, <span class="hljs-string">&#x27;如家酒店(上海虹桥漕河泾古北店)&#x27;</span>, <span class="hljs-string">&#x27;虹梅路2971号&#x27;</span>, <span class="hljs-number">189</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;虹桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.180968&#x27;</span>, <span class="hljs-string">&#x27;121.392415&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2WPfVp6auQkYoHzAdSbxwHAtQFfa_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200215548</span>, <span class="hljs-string">&#x27;速8酒店（上海虹桥枢纽九亭中心路店）&#x27;</span>, <span class="hljs-string">&#x27;松江九亭镇中心路128号&#x27;</span>, <span class="hljs-number">198</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;七宝古镇&#x27;</span>, <span class="hljs-string">&#x27;31.119363&#x27;</span>, <span class="hljs-string">&#x27;121.322768&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/42/40/Cii-U1kziVOIGTw-AAGRMfcIwJwAALi6ACRnUsAAZFJ536_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">200216665</span>, <span class="hljs-string">&#x27;维也纳酒店（上海奉贤南桥中心店）&#x27;</span>, <span class="hljs-string">&#x27;奉贤沪杭公路1758-8号&#x27;</span>, <span class="hljs-number">1289</span>, <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;奉贤开发区&#x27;</span>, <span class="hljs-string">&#x27;30.934646&#x27;</span>, <span class="hljs-string">&#x27;121.451449&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/DC/A8/Cii-T1kw5leIQAA3AAFzNYtL4loAAK9OQOyk4sAAXNN152_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">219484323</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳观澜章阁店）&#x27;</span>, <span class="hljs-string">&#x27;宝安区章阁村桂月路章阁市场汇龙峰景一期A栋2-4层&#x27;</span>, <span class="hljs-number">725</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;观澜&#x27;</span>, <span class="hljs-string">&#x27;22.746493&#x27;</span>, <span class="hljs-string">&#x27;114.023&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3C/8C/Cii-U1kxXqaIeqeuAAHwF4GDmOcAALYFQI9zMMAAfAv100_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">223318960</span>, <span class="hljs-string">&#x27;和颐酒店(深圳深南大道华强路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;深南中路2081号&#x27;</span>, <span class="hljs-number">637</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;华强北商业区&#x27;</span>, <span class="hljs-string">&#x27;22.540313&#x27;</span>, <span class="hljs-string">&#x27;114.088611&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2M7am7D8rPTeTQAhxqBeMSANaqGr_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">233036941</span>, <span class="hljs-string">&#x27;7天连锁酒店(上海东林寺店)&#x27;</span>, <span class="hljs-string">&#x27;朱泾镇文商路79号&#x27;</span>, <span class="hljs-number">218</span>, <span class="hljs-number">37</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;金山枫泾古镇地区&#x27;</span>, <span class="hljs-string">&#x27;30.895912&#x27;</span>, <span class="hljs-string">&#x27;121.160238&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G4/M00/35/13/Cii_J1zr5PyIY3acAAFCnHJPxLUAAGX-ABvcIMAAUK0087_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">234719711</span>, <span class="hljs-string">&#x27;如家酒店·neo(北京朝阳北路十里堡地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;朝阳北路八里庄南里26号&#x27;</span>, <span class="hljs-number">378</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;国贸地区&#x27;</span>, <span class="hljs-string">&#x27;39.922472&#x27;</span>, <span class="hljs-string">&#x27;116.501118&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2rHdXNCmycnUxw99AniFC25ZDSfJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">234719728</span>, <span class="hljs-string">&#x27;速8酒店（北京房山城关店）&#x27;</span>, <span class="hljs-string">&#x27;房山城关镇城隍庙街10号(原房山老公安局)&#x27;</span>, <span class="hljs-number">392</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;39.705216&#x27;</span>, <span class="hljs-string">&#x27;115.981904&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/3F/66/Cii9EFkyeImIB3ZVAAHcTtTFt4oAALdsgICDO0AAdxm378_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">235196477</span>, <span class="hljs-string">&#x27;和颐酒店(北京总部基地店)&#x27;</span>, <span class="hljs-string">&#x27;丰葆路106号&#x27;</span>, <span class="hljs-number">379</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;总部基地/丰台体育中心/南宫地区&#x27;</span>, <span class="hljs-string">&#x27;39.815383&#x27;</span>, <span class="hljs-string">&#x27;116.291012&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3J7Hcvwt5xZJL3NkS4wPJ6csmFb9_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">339777429</span>, <span class="hljs-string">&#x27;上海嘉定喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;菊园新区嘉唐公路66号&#x27;</span>, <span class="hljs-number">1286</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;嘉定新城&#x27;</span>, <span class="hljs-string">&#x27;31.394595&#x27;</span>, <span class="hljs-string">&#x27;121.245773&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2v2fKuo5bzhunSBC1n1E42cLTkZV_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">339952837</span>, <span class="hljs-string">&#x27;如家酒店(北京良乡西路店)&#x27;</span>, <span class="hljs-string">&#x27;良乡西路7号&#x27;</span>, <span class="hljs-number">159</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;房山风景区&#x27;</span>, <span class="hljs-string">&#x27;39.73167&#x27;</span>, <span class="hljs-string">&#x27;116.132482&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3Dpgf5RTTzrxpeN5y3RLnRVtxMEA_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">343341695</span>, <span class="hljs-string">&#x27;和颐酒店(北京中关村软件园店)&#x27;</span>, <span class="hljs-string">&#x27;东北旺西路8号中关村软件园一期9号楼&#x27;</span>, <span class="hljs-number">245</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;上地产业园/西三旗&#x27;</span>, <span class="hljs-string">&#x27;40.044663&#x27;</span>, <span class="hljs-string">&#x27;116.29607&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3hSkPeWRQ3VK1heRQpHzJNMTanQz_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">365011120</span>, <span class="hljs-string">&#x27;和颐酒店(北京石景山万达广场店)&#x27;</span>, <span class="hljs-string">&#x27;鲁谷东街甲26号&#x27;</span>, <span class="hljs-number">505</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;公主坟/五棵松/石景山游乐园地区&#x27;</span>, <span class="hljs-string">&#x27;39.895479&#x27;</span>, <span class="hljs-string">&#x27;116.240386&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3iwohdQzyZP9azUkYAwTFj7WzBwd_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">368343863</span>, <span class="hljs-string">&#x27;如家酒店(上海金桥博兴路地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;博兴路1119号&#x27;</span>, <span class="hljs-number">218</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;浦东金桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.266272&#x27;</span>, <span class="hljs-string">&#x27;121.593829&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/w5ERtGJEmdgdgy5qtLPatR1xfm4_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">368701368</span>, <span class="hljs-string">&#x27;深圳大中华希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;福田深南大道1003号&#x27;</span>, <span class="hljs-number">1666</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;会展中心/CBD&#x27;</span>, <span class="hljs-string">&#x27;22.539313&#x27;</span>, <span class="hljs-string">&#x27;114.069763&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4EnHseZ73LXdFJY7DSdJ8xqAcjXe_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1393017952</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳宝安松岗地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;松岗镇河滨北路12号盛华大厦&#x27;</span>, <span class="hljs-number">166</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;松岗商业中心区&#x27;</span>, <span class="hljs-string">&#x27;22.768912&#x27;</span>, <span class="hljs-string">&#x27;113.83325&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4NehRjdHyZDKxTjAxTYv27FHq8LJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1400304687</span>, <span class="hljs-string">&#x27;如家酒店(深圳横岗地铁站新马商贸城店)&#x27;</span>, <span class="hljs-string">&#x27;龙岗大道横岗段4004号&#x27;</span>, <span class="hljs-number">149</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;龙岗中心区/大运新城&#x27;</span>, <span class="hljs-string">&#x27;22.642629&#x27;</span>, <span class="hljs-string">&#x27;114.202799&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/5A/Cii-TF3PFkiIb27dAAEqdDcKl3YAAEViQGVWY0AASqM960_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1406627919</span>, <span class="hljs-string">&#x27;深圳中洲万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;海德一道88号中洲控股中心A座&#x27;</span>, <span class="hljs-number">204</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;海岸城/后海&#x27;</span>, <span class="hljs-string">&#x27;22.517293&#x27;</span>, <span class="hljs-string">&#x27;113.933785&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3wsinQAcuWtCdmv1yxauVG2PSYpC_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1418471719</span>, <span class="hljs-string">&#x27;上海宝龙丽笙酒店&#x27;</span>, <span class="hljs-string">&#x27;金海路2449弄2号&#x27;</span>, <span class="hljs-number">860</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;丽笙&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;浦东金桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.26571&#x27;</span>, <span class="hljs-string">&#x27;121.650132&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3myGUurFCriEVMGPy9yYMPFdb9Zh_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1455383931</span>, <span class="hljs-string">&#x27;如家酒店(深圳宝安客运中心站店)&#x27;</span>, <span class="hljs-string">&#x27;西乡河西金雅新苑34栋&#x27;</span>, <span class="hljs-number">169</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;宝安商业区&#x27;</span>, <span class="hljs-string">&#x27;22.590272&#x27;</span>, <span class="hljs-string">&#x27;113.881933&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2w9cbbpzjjsyd2wRhFrnUpBMT8b4_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1457521002</span>, <span class="hljs-string">&#x27;7天连锁酒店(深圳西丽茶光地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;珠光北路280号天下湘军1楼&#x27;</span>, <span class="hljs-number">517</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;大学城/西丽动物园&#x27;</span>, <span class="hljs-string">&#x27;22.576187&#x27;</span>, <span class="hljs-string">&#x27;113.956166&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/E3/E0/Cii-Tlkzdl6IfQYfAAHCgNVDe1sAALK6gPBDhQAAcKY242_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1463484295</span>, <span class="hljs-string">&#x27;上海和平豪生酒店&#x27;</span>, <span class="hljs-string">&#x27;沪南公路2653-2号&#x27;</span>, <span class="hljs-number">650</span>, <span class="hljs-number">41</span>, <span class="hljs-string">&#x27;豪生&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;周浦康桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.146478&#x27;</span>, <span class="hljs-string">&#x27;121.568218&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/ZxM9gWHqj657ndRsHw4j4p3CQ5k_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1514269829</span>, <span class="hljs-string">&#x27;如家酒店(上海东川路碧江商业广场店)&#x27;</span>, <span class="hljs-string">&#x27;东川路2645号&#x27;</span>, <span class="hljs-number">218</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;交大/闵行经济开发区&#x27;</span>, <span class="hljs-string">&#x27;31.008875&#x27;</span>, <span class="hljs-string">&#x27;121.402813&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/R92UunuCRXiG826G9Ptu7orqs7b_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1557882030</span>, <span class="hljs-string">&#x27;维也纳酒店（深圳东门老街店）&#x27;</span>, <span class="hljs-string">&#x27;罗湖区东门新园路37号益德楼&#x27;</span>, <span class="hljs-number">336</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;维也纳&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;东门商业区&#x27;</span>, <span class="hljs-string">&#x27;22.549413&#x27;</span>, <span class="hljs-string">&#x27;114.118866&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/45/83/Cii9EFk0opCIPl9CAAKHl3Egm6oAALoKwLNWlwAAoev470_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1557997004</span>, <span class="hljs-string">&#x27;上海五角场凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;国定东路88号&#x27;</span>, <span class="hljs-number">1104</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;江湾/五角场商业区&#x27;</span>, <span class="hljs-string">&#x27;31.300645&#x27;</span>, <span class="hljs-string">&#x27;121.51918&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3a3Zz9cDgbJEEJ1GcXzKhTh21YqK_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1565094427</span>, <span class="hljs-string">&#x27;上海国际旅游度假区万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;秀浦路3999弄17号&#x27;</span>, <span class="hljs-number">713</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;迪士尼度假区&#x27;</span>, <span class="hljs-string">&#x27;31.132913&#x27;</span>, <span class="hljs-string">&#x27;121.63464&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/KPBUPunPDETYWg8WaJDSmiZC65z_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1584362548</span>, <span class="hljs-string">&#x27;如家酒店(上海浦东国际旅游度假区御桥地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;御青路315-317号&#x27;</span>, <span class="hljs-number">339</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;周浦康桥地区&#x27;</span>, <span class="hljs-string">&#x27;31.15719&#x27;</span>, <span class="hljs-string">&#x27;121.572392&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2ybd3wqdoBtBeKcPxmyso9y1hNXa_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1630005459</span>, <span class="hljs-string">&#x27;7天连锁酒店（深圳地王大厦红桂路店）（原红桂路店）&#x27;</span>, <span class="hljs-string">&#x27;罗湖区宝安南路2078号深港豪苑（与红桂路交汇处）&#x27;</span>, <span class="hljs-number">143</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;7天酒店&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;22.550341&#x27;</span>, <span class="hljs-string">&#x27;114.10965&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G2/M00/EA/18/Cii-T1k1KaGIIkQVAAD4fD_T3FcAALTtABiCJ8AAPiU164_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1637944903</span>, <span class="hljs-string">&#x27;速8酒店北京后海店&#x27;</span>, <span class="hljs-string">&#x27;西城北京市西城区德胜门内大街兴华胡同五福里2号&#x27;</span>, <span class="hljs-number">213</span>, <span class="hljs-number">39</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;后海&#x27;</span>, <span class="hljs-string">&#x27;39.934452&#x27;</span>, <span class="hljs-string">&#x27;116.38184&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/48/0C/Cii9EVk1JNuILdBWAAHv5O89TjMAALrFgJ8bwcAAe_8197_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1649956165</span>, <span class="hljs-string">&#x27;上海南青华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;华夏东路811号&#x27;</span>, <span class="hljs-number">299</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;迪士尼度假区&#x27;</span>, <span class="hljs-string">&#x27;31.195206&#x27;</span>, <span class="hljs-string">&#x27;121.664791&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2RHmQgTpte3UVSDJ5KbqobbZGRnE_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1714520967</span>, <span class="hljs-string">&#x27;速8酒店(北京安华桥黄寺大街店)&#x27;</span>, <span class="hljs-string">&#x27;黄寺大街12号院16号楼&#x27;</span>, <span class="hljs-number">559</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;速8&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;马甸、安贞地区&#x27;</span>, <span class="hljs-string">&#x27;39.962742&#x27;</span>, <span class="hljs-string">&#x27;116.388431&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G1/M00/4A/21/Cii-U1k1o-uIdcUZAAIbmIKVlKAAALtvQGBb6kAAhuw170_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1725781423</span>, <span class="hljs-string">&#x27;上海三迪华美达酒店&#x27;</span>, <span class="hljs-string">&#x27;广富林路600弄7号&#x27;</span>, <span class="hljs-number">690</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;华美达&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;佘山/松江大学城&#x27;</span>, <span class="hljs-string">&#x27;31.058023&#x27;</span>, <span class="hljs-string">&#x27;121.246536&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/NoHym6tuKwVazxy33wRNTNuQWd2_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1734220581</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳大鹏佳兆业店)&#x27;</span>, <span class="hljs-string">&#x27;大鹏街道新园街12号&#x27;</span>, <span class="hljs-number">378</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;较场尾/大鹏所城&#x27;</span>, <span class="hljs-string">&#x27;22.592661&#x27;</span>, <span class="hljs-string">&#x27;114.475167&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3nWzyWt63gtwPzRf5xbHvwKM27vU_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1754929048</span>, <span class="hljs-string">&#x27;上海环球港凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;宁夏路718号&#x27;</span>, <span class="hljs-number">1336</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;中山公园商业区&#x27;</span>, <span class="hljs-string">&#x27;31.232041&#x27;</span>, <span class="hljs-string">&#x27;121.412492&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/B6/Cii-U13ZY-CIF-8MAAXkwQoY7FIAAFpQgEE1bgABeTZ750_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1762661667</span>, <span class="hljs-string">&#x27;深圳佳兆业万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;棕榈大道33号&#x27;</span>, <span class="hljs-number">223</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;较场尾/大鹏所城&#x27;</span>, <span class="hljs-string">&#x27;22.569193&#x27;</span>, <span class="hljs-string">&#x27;114.459325&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EC/Cii-TF3ZqE-IYM0NAAY6GIHLZNsAAFr2QDhR8EABjow444_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1765008760</span>, <span class="hljs-string">&#x27;如家酒店(北京西直门北京北站店)&#x27;</span>, <span class="hljs-string">&#x27;西直门北大街49号&#x27;</span>, <span class="hljs-number">356</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;西直门/北京展览馆地区&#x27;</span>, <span class="hljs-string">&#x27;39.945106&#x27;</span>, <span class="hljs-string">&#x27;116.353827&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4CLwbCE9346jYn7nFsJTQXuBExTJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1880614409</span>, <span class="hljs-string">&#x27;上海崇明由由喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;揽海路2888号&#x27;</span>, <span class="hljs-number">2198</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;崇明岛/长兴岛/横沙岛&#x27;</span>, <span class="hljs-string">&#x27;31.462167&#x27;</span>, <span class="hljs-string">&#x27;121.823103&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/21gDCGgRT3xFqCd3FxBh633j6Qsu_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1889333146</span>, <span class="hljs-string">&#x27;如家酒店(北京西客站丽泽桥店)&#x27;</span>, <span class="hljs-string">&#x27;西三环南路44号-218&#x27;</span>, <span class="hljs-number">459</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;北京西站/丽泽商务区&#x27;</span>, <span class="hljs-string">&#x27;39.869638&#x27;</span>, <span class="hljs-string">&#x27;116.313075&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/kG5corYUDC7U1qE8RAY6xCVnGxq_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1908594080</span>, <span class="hljs-string">&#x27;上海建工浦江皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;陈行公路3701号&#x27;</span>, <span class="hljs-number">843</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;浦江镇地区&#x27;</span>, <span class="hljs-string">&#x27;31.090063&#x27;</span>, <span class="hljs-string">&#x27;121.489728&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/B7/Cii-U13ZZDWIePrGAAPyImW93N0AAFpRgMmj4MAA_I6005_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1913922369</span>, <span class="hljs-string">&#x27;上海中建万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;蟠文路333号&#x27;</span>, <span class="hljs-number">889</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;虹桥机场/国家会展中心&#x27;</span>, <span class="hljs-string">&#x27;31.185504&#x27;</span>, <span class="hljs-string">&#x27;121.287709&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/39Afm5Bxgd784eMeFB5DrcsPnhT_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1916002015</span>, <span class="hljs-string">&#x27;上海苏宁环球万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;丹巴路99号&#x27;</span>, <span class="hljs-number">689</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;长风公园地区&#x27;</span>, <span class="hljs-string">&#x27;31.22292&#x27;</span>, <span class="hljs-string">&#x27;121.379912&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/svpYHdmVDck91NqAhjtngcXth2G_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1928731731</span>, <span class="hljs-string">&#x27;上海康桥万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;康新公路4499号&#x27;</span>, <span class="hljs-number">811</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;迪士尼度假区&#x27;</span>, <span class="hljs-string">&#x27;31.119187&#x27;</span>, <span class="hljs-string">&#x27;121.618966&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3inpPxTnvRjMCEB39K9FuHaXohYw_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1931442052</span>, <span class="hljs-string">&#x27;深圳机场凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;宝安国际机场地面交通中心（GTC）18号出口&#x27;</span>, <span class="hljs-number">291</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;宝安机场商圈&#x27;</span>, <span class="hljs-string">&#x27;22.622498&#x27;</span>, <span class="hljs-string">&#x27;113.812341&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EC/Cii-TF3ZqVeIJcTPAAUq_Ou_CrcAAFr4gKufPUABSsU446_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1931602865</span>, <span class="hljs-string">&#x27;深圳联投东方万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;松岗东方大道46号&#x27;</span>, <span class="hljs-number">688</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;松岗商业中心区&#x27;</span>, <span class="hljs-string">&#x27;22.760746&#x27;</span>, <span class="hljs-string">&#x27;113.856961&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/EC/Cii-U13ZqVyIOjdpAARI9aeBh-IAAFr4gOQh7oABEkN297_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1937347815</span>, <span class="hljs-string">&#x27;北京望京凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;广顺南大街8号院2号楼&#x27;</span>, <span class="hljs-number">617</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;望京/酒仙桥/798地区&#x27;</span>, <span class="hljs-string">&#x27;39.991546&#x27;</span>, <span class="hljs-string">&#x27;116.476288&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2gLT4ZgJ8ZuS7sSmXzYoCXnV248p_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1942938880</span>, <span class="hljs-string">&#x27;北京乐多港万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;城南街道南口路29号&#x27;</span>, <span class="hljs-number">227</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;昌平城区/十三陵度假区&#x27;</span>, <span class="hljs-string">&#x27;40.23264&#x27;</span>, <span class="hljs-string">&#x27;116.188888&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3mBWaZeaqq54E7kX2n7g9b2CZX6q_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1942992995</span>, <span class="hljs-string">&#x27;上海嘉定凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;裕民南路1366号&#x27;</span>, <span class="hljs-number">758</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;嘉定新城&#x27;</span>, <span class="hljs-string">&#x27;31.352298&#x27;</span>, <span class="hljs-string">&#x27;121.263314&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/53/2D/Cii-U13edkqIfZhLAAJEW25WIF4AAGVxQIg38sAAkRz517_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1951709780</span>, <span class="hljs-string">&#x27;深圳同泰万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;福海街道宝安大道 6259号&#x27;</span>, <span class="hljs-number">617</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;深圳国际会展中心商圈&#x27;</span>, <span class="hljs-string">&#x27;22.678611&#x27;</span>, <span class="hljs-string">&#x27;113.805695&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3oUfktphxMAWq9hUxD9uqdjRdZGB_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1973839294</span>, <span class="hljs-string">&#x27;深圳湾万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;科技南路16号&#x27;</span>, <span class="hljs-number">508</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;科技园&#x27;</span>, <span class="hljs-string">&#x27;22.531101&#x27;</span>, <span class="hljs-string">&#x27;113.950615&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/8C9QscRsvTWCx92wt17GAegEMFn_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1975922994</span>, <span class="hljs-string">&#x27;如家酒店·neo(深圳南山海岸城南油地铁站店)&#x27;</span>, <span class="hljs-string">&#x27;南商路84-6号&#x27;</span>, <span class="hljs-number">238</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;如家&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;海岸城/后海&#x27;</span>, <span class="hljs-string">&#x27;22.513566&#x27;</span>, <span class="hljs-string">&#x27;113.9291&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/25/5E/Cii-TF3PGD-IQ0FcAAFIZC82AnkAAEVvAKdj4YAAUh8638_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1989806195</span>, <span class="hljs-string">&#x27;深圳博林天瑞喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;留仙大道4088号&#x27;</span>, <span class="hljs-number">1369</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;大学城/西丽动物园&#x27;</span>, <span class="hljs-string">&#x27;22.582918&#x27;</span>, <span class="hljs-string">&#x27;113.97219&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4Rx55fZoneUeKbE3TCRSPB6WQ6bw_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1996823660</span>, <span class="hljs-string">&#x27;上海紫竹万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;紫星路588号3幢&#x27;</span>, <span class="hljs-number">642</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;交大/闵行经济开发区&#x27;</span>, <span class="hljs-string">&#x27;31.02118&#x27;</span>, <span class="hljs-string">&#x27;121.465186&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/53/2F/Cii-TF3edraIPzK9AAH_p8vdHKoAAGV3AJgSVEAAf-_019_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1997830708</span>, <span class="hljs-string">&#x27;和颐至尚酒店(北京上地软件园店)&#x27;</span>, <span class="hljs-string">&#x27;清河小营西路48号汇苑仁和大厦一层&#x27;</span>, <span class="hljs-number">753</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;上地产业园/西三旗&#x27;</span>, <span class="hljs-string">&#x27;40.034623&#x27;</span>, <span class="hljs-string">&#x27;116.323925&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2sKjxS1hFYyBFVKVBqo2x2hSFvGj_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2003479905</span>, <span class="hljs-string">&#x27;上海榕港万怡酒店&#x27;</span>, <span class="hljs-string">&#x27;新松江路1277号&#x27;</span>, <span class="hljs-number">798</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;万怡&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;佘山/松江大学城&#x27;</span>, <span class="hljs-string">&#x27;31.038198&#x27;</span>, <span class="hljs-string">&#x27;121.210178&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2GM761BYH8k15qkNrJrja3cwfr2D_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2009548883</span>, <span class="hljs-string">&#x27;和颐至尚酒店(北京首都机场新国展店)&#x27;</span>, <span class="hljs-string">&#x27;府前二街6号&#x27;</span>, <span class="hljs-number">611</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;首都机场/新国展地区&#x27;</span>, <span class="hljs-string">&#x27;40.063953&#x27;</span>, <span class="hljs-string">&#x27;116.576829&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/43zCTomkMSkUfZByZxn77YH2XidJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2011785622</span>, <span class="hljs-string">&#x27;北京世园凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;阜康南路1号院1号楼A&#x27;</span>, <span class="hljs-number">558</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五星级&#x27;</span>, <span class="hljs-string">&#x27;延庆休闲度假区&#x27;</span>, <span class="hljs-string">&#x27;40.440732&#x27;</span>, <span class="hljs-string">&#x27;115.963259&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/uhGcQze3zZQxe4avSU8BysgYVvx_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2022598930</span>, <span class="hljs-string">&#x27;上海宝华喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;南奉公路3111弄228号&#x27;</span>, <span class="hljs-number">2899</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;奉贤开发区&#x27;</span>, <span class="hljs-string">&#x27;30.921659&#x27;</span>, <span class="hljs-string">&#x27;121.575572&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb2/t1/G6/M00/45/BD/Cii-TF3ZaBmIStrbAASnoOyg7FoAAFpYwEoz9oABKe4992_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2022881967</span>, <span class="hljs-string">&#x27;深圳盐田凯悦酒店&#x27;</span>, <span class="hljs-string">&#x27;海景二路1025号1-6层、30-50层&#x27;</span>, <span class="hljs-number">650</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;凯悦&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;盐田区政府/沙头角&#x27;</span>, <span class="hljs-string">&#x27;22.551323&#x27;</span>, <span class="hljs-string">&#x27;114.23781&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2RFMLSujkczEn1HoybD6dUpN9pzr_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2031683181</span>, <span class="hljs-string">&#x27;和颐至尚酒店(北京雍和宫和平里店)&#x27;</span>, <span class="hljs-string">&#x27;小黄庄1区15号&#x27;</span>, <span class="hljs-number">299</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;和颐&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;四钻&#x27;</span>, <span class="hljs-string">&#x27;马甸/安贞地区&#x27;</span>, <span class="hljs-string">&#x27;39.962361&#x27;</span>, <span class="hljs-string">&#x27;116.412931&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4Xqm5BN9pZTamwmYS3eLxL417YYt_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2045052822</span>, <span class="hljs-string">&#x27;深圳国际会展中心皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;展云路6号&#x27;</span>, <span class="hljs-number">675</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;深圳国际会展中心商圈&#x27;</span>, <span class="hljs-string">&#x27;22.686581&#x27;</span>, <span class="hljs-string">&#x27;113.777655&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4DGZygQpE4iSpcBDCoXJvjNr4oiR_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2048042240</span>, <span class="hljs-string">&#x27;北京大兴希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;高米店南里18号楼&#x27;</span>, <span class="hljs-number">1283</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;大兴北京新机场地区&#x27;</span>, <span class="hljs-string">&#x27;39.76875&#x27;</span>, <span class="hljs-string">&#x27;116.339199&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3B32F8zSU2CJCWzs1hoH2o4WcquR_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2048047291</span>, <span class="hljs-string">&#x27;北京新青海喜来登酒店&#x27;</span>, <span class="hljs-string">&#x27;丽泽金融商务区凤凰嘴北路与金中都西路交叉口西营街8号院1号楼&#x27;</span>, <span class="hljs-number">723</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;喜来登&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;北京西站/丽泽商务区&#x27;</span>, <span class="hljs-string">&#x27;39.864026&#x27;</span>, <span class="hljs-string">&#x27;116.322505&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/4DPQMu5sMM7XR1mvcjoqtWngc7TF_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2048050570</span>, <span class="hljs-string">&#x27;汉庭酒店（深圳坪山火车站店）&#x27;</span>, <span class="hljs-string">&#x27;新和路127-2号&#x27;</span>, <span class="hljs-number">436</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;坪山高铁站商圈&#x27;</span>, <span class="hljs-string">&#x27;22.700753&#x27;</span>, <span class="hljs-string">&#x27;114.339089&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2nXN2bWjfoqoTkPwHvLJQPYz17qD_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2048671293</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳观澜五和大道店)&#x27;</span>, <span class="hljs-string">&#x27;观湖街道五和大道327号&#x27;</span>, <span class="hljs-number">234</span>, <span class="hljs-number">43</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;观澜&#x27;</span>, <span class="hljs-string">&#x27;22.684459&#x27;</span>, <span class="hljs-string">&#x27;114.07708&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2JrQi83S9qgDEkXqWpe5iyi44Uh2_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2051661320</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳罗湖口岸万象城二店)&#x27;</span>, <span class="hljs-string">&#x27;桂园街道宝安南路1050号嘉宾花园C栋&#x27;</span>, <span class="hljs-number">667</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;三钻&#x27;</span>, <span class="hljs-string">&#x27;万象城/京基100&#x27;</span>, <span class="hljs-string">&#x27;22.540352&#x27;</span>, <span class="hljs-string">&#x27;114.112668&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/34FRP7HLPhvKZP1a6tXu4XrJeiaw_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2056105938</span>, <span class="hljs-string">&#x27;北京通州北投希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;新华东街289号2号楼&#x27;</span>, <span class="hljs-number">1068</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;果园环岛/通州区&#x27;</span>, <span class="hljs-string">&#x27;39.908805&#x27;</span>, <span class="hljs-string">&#x27;116.659748&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/NGKdpec3tZJNUUNWJ5pd67Cp5AY_w200_h200_c1_t0.png&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2056126831</span>, <span class="hljs-string">&#x27;上海虹桥金臣皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;申长路630弄1-3 号&#x27;</span>, <span class="hljs-number">2488</span>, <span class="hljs-number">48</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;虹桥机场/国家会展中心&#x27;</span>, <span class="hljs-string">&#x27;31.19036&#x27;</span>, <span class="hljs-string">&#x27;121.31535&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/PvFh4Vzc84xXhm5N41F6AqdAqyJ_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2056132395</span>, <span class="hljs-string">&#x27;深圳深铁皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;深南大道9819号&#x27;</span>, <span class="hljs-number">340</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;科技园&#x27;</span>, <span class="hljs-string">&#x27;22.538923&#x27;</span>, <span class="hljs-string">&#x27;113.944794&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/eBLtrED2uJs7yURWfjnWge9dT1P_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2056298828</span>, <span class="hljs-string">&#x27;上海中优城市万豪酒店&#x27;</span>, <span class="hljs-string">&#x27;沪南公路7688弄1号&#x27;</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">45</span>, <span class="hljs-string">&#x27;万豪&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;南汇/野生动物园&#x27;</span>, <span class="hljs-string">&#x27;31.030053&#x27;</span>, <span class="hljs-string">&#x27;121.662943&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2gBATEyysyQWmw3wZL863HGdqjaq_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2058250574</span>, <span class="hljs-string">&#x27;深圳湾万丽酒店&#x27;</span>, <span class="hljs-string">&#x27;粤海街道高新区社区科技南路18号&#x27;</span>, <span class="hljs-number">351</span>, <span class="hljs-number">47</span>, <span class="hljs-string">&#x27;万丽&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;科技园&#x27;</span>, <span class="hljs-string">&#x27;22.531674&#x27;</span>, <span class="hljs-string">&#x27;113.951882&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2YWUpZsvPVkRiKgdPg95LJxaFmB6_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2060510277</span>, <span class="hljs-string">&#x27;北京金隅八达岭皇冠假日酒店&#x27;</span>, <span class="hljs-string">&#x27;妫水北街1号1-14幢&#x27;</span>, <span class="hljs-number">1026</span>, <span class="hljs-number">44</span>, <span class="hljs-string">&#x27;皇冠假日&#x27;</span>, <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;延庆休闲度假区&#x27;</span>, <span class="hljs-string">&#x27;40.476483&#x27;</span>, <span class="hljs-string">&#x27;115.97481&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/3Dzq2KxgiQbmb1sbc5iK6xqpVuFr_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2060618247</span>, <span class="hljs-string">&#x27;汉庭酒店(深圳海岸城店)&#x27;</span>, <span class="hljs-string">&#x27;粤海街道后海社区后海第二统建楼商业裙楼第二层B&#x27;</span>, <span class="hljs-number">562</span>, <span class="hljs-number">49</span>, <span class="hljs-string">&#x27;汉庭&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;二钻&#x27;</span>, <span class="hljs-string">&#x27;海岸城/后海&#x27;</span>, <span class="hljs-string">&#x27;22.507276&#x27;</span>, <span class="hljs-string">&#x27;113.931251&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/TBoXdgEx5Yjc2HobeC3fPWWnSJi_w200_h200_c1_t0.jpg&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tb_hotel` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2062643512</span>, <span class="hljs-string">&#x27;深圳国际会展中心希尔顿酒店&#x27;</span>, <span class="hljs-string">&#x27;展丰路80号&#x27;</span>, <span class="hljs-number">285</span>, <span class="hljs-number">46</span>, <span class="hljs-string">&#x27;希尔顿&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>, <span class="hljs-string">&#x27;五钻&#x27;</span>, <span class="hljs-string">&#x27;深圳国际会展中心商圈&#x27;</span>, <span class="hljs-string">&#x27;22.705335&#x27;</span>, <span class="hljs-string">&#x27;113.77794&#x27;</span>, <span class="hljs-string">&#x27;https://m.tuniucdn.com/fb3/s1/2n9c/2SHUVXNrN5NsXsTUwcd1yaHKbrGq_w200_h200_c1_t0.jpg&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>datas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dates</tag>
      
      <tag>demo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决dockers容器中文乱码</title>
    <link href="/2022/03/24/%E8%A7%A3%E5%86%B3dockers%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2022/03/24/%E8%A7%A3%E5%86%B3dockers%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="1、实际场景"><a href="#1、实际场景" class="headerlink" title="1、实际场景"></a>1、实际场景</h1><p>​    ik分词器配置扩张词典时，配置的中文词典不生效。通过dockers容器查看配置的ext.dic文件时发现，中文内容显示乱码：</p><img src="/img/SerchEngines/ik分词器.png" alt="" style="zoom:50%;" /><p>查看docker容器编码格式：执行locale命令；可以看到当前编码格式为POSIX，而这种编码格式不支持中文:</p><img src="/img/SerchEngines/ik02.png" alt="" style="zoom:50%;" /><h2 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h2><p>使用 <code>locale -a</code> 查看容器所有语言环境：</p><img src="/img/SerchEngines/ik03.png" alt="" style="zoom:50%;" /><h2 id="2-1-临时修改"><a href="#2-1-临时修改" class="headerlink" title="2.1 临时修改"></a>2.1 临时修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">LANG=C.UTF-8  (有的是zh_CN.UTF-8，不过我在本地没发现这种编码)<br><br>source /etc/profile<br></code></pre></td></tr></table></figure><img src="/img/SerchEngines/ik04.png" alt="" style="zoom:50%;" /><h2 id="2-2-永久修改-修改Dockerfile"><a href="#2-2-永久修改-修改Dockerfile" class="headerlink" title="2.2 永久修改-修改Dockerfile"></a>2.2 永久修改-修改Dockerfile</h2><p>在Dockerfile中添加一行</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ENV</span> <span class="hljs-string">LANG C.UTF-8</span><br></code></pre></td></tr></table></figure><p>​    重新制作docker镜像，<code>docker run -ti [镜像]</code> 进入容器后执行locale发现编码格式已经被修改为C.UTF-8，之前出现的中文文件名乱码问题也没有了</p>]]></content>
    
    
    <categories>
      
      <category>FAQ</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>中文乱码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticserch安装</title>
    <link href="/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/"/>
    <url>/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1、部署单点ES"><a href="#1、部署单点ES" class="headerlink" title="1、部署单点ES"></a>1、部署单点ES</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1 创建网络"></a>1.1 创建网络</h2><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker network create es-net<br></code></pre></td></tr></table></figure><h2 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2 加载镜像"></a>1.2 加载镜像</h2><p>这里我们采用ES的7.12.1版本【es.tar】的镜像，这个镜像体积非常大，接近1G。不建议自己pull。可以先下载好</p><p>若是虚拟机，则将es.tar上传至虚拟机（若是windows系统，则命令窗口进入es.tar所在目录下），然后运行命令加载即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 导入数据</span><br>docker load -i es.tar<br></code></pre></td></tr></table></figure><img src="/img/SerchEngines/elasticserch06.png" alt="" style="zoom:50%;" /><p>同理，kibana的tar包也需要这样做。</p><h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3 运行"></a>1.3 运行</h2><p>运行docker命令，部署单点es:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>--name es \<br>    -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; \<br>    -e &quot;discovery.type=single-node&quot; \<br>    -v es-data:/usr/share/elasticsearch/data \<br>    -v es-plugins:/usr/share/elasticsearch/plugins \<br>    --privileged \<br>    --network es-net \<br>    -p 9200:9200 \<br>    -p 9300:9300 \<br>elasticsearch:7.12.1<br></code></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置，9200是暴露的HTTP协议端口，供用户访问的</li><li><code>-p 9300:9300</code>：是将来es容器各个节点之间互联的端口</li></ul><p>在浏览器中输入：<a href="http://localhost:9200/">http://localhost:9200</a> 即可看到elasticsearch的响应结果：</p><img src="/img/SerchEngines/elasticserch04.png" alt="" style="zoom:50%;" /><h1 id="2、部署kibana"><a href="#2、部署kibana" class="headerlink" title="2、部署kibana"></a>2、部署kibana</h1><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h2 id="2-1-加载镜像"><a href="#2-1-加载镜像" class="headerlink" title="2.1 加载镜像"></a>2.1 加载镜像</h2><p>同ES镜像处理</p><h2 id="2-2-部署"><a href="#2-2-部署" class="headerlink" title="2.2 部署"></a>2.2 部署</h2><p>运行docker命令，部署kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>--name kibana \<br>-e ELASTICSEARCH_HOSTS=http://es:9200 \<br>--network=es-net \<br>-p 5601:5601  \<br>kibana:7.12.1<br></code></pre></td></tr></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>kibana启动一般比较慢，需要多等待一会，可以通过命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -f kibana<br></code></pre></td></tr></table></figure><p>查看运行日志，当查看到下面的日志，说明成功：</p><p><img src="/img/SerchEngines/elasticserch07.png" alt="img"></p><p>此时，在浏览器输入地址访问：<a href="http://localhost:5601，即可看到结果">http://localhost:5601，即可看到结果</a></p><h2 id="2-3-DevTools"><a href="#2-3-DevTools" class="headerlink" title="2.3 DevTools"></a>2.3 DevTools</h2><p>kibana中提供了一个DevTools界面：</p><p><img src="/img/SerchEngines/elasticserch08.png" alt="img"></p><p>这个界面中可以<strong>编写DSL</strong>来<strong>操作elasticsearch</strong>。并且对DSL语句有自动补全功能。</p><h1 id="3、安装IK分词器"><a href="#3、安装IK分词器" class="headerlink" title="3、安装IK分词器"></a>3、安装IK分词器</h1><h2 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1 在线安装ik插件（较慢）"></a>3.1 在线安装ik插件（较慢）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 进入容器内部</span><br>docker exec -it elasticsearch /bin/bash<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 在线下载并安装</span><br>./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">退出</span><br>exit<br><span class="hljs-meta">#</span><span class="bash">重启容器</span><br>docker restart elasticsearch<br></code></pre></td></tr></table></figure><h2 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2 离线安装ik插件（推荐）"></a>3.2 离线安装ik插件（推荐）</h2><h3 id="3-2-1-查看数据卷目录"><a href="#3-2-1-查看数据卷目录" class="headerlink" title="3.2.1 查看数据卷目录"></a>3.2.1 查看数据卷目录</h3><p>安装插件需要知道elasticsearch的<strong>plugins目录</strong>位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume inspect es-plugins<br></code></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2022-05-06T10:06:34+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: null,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/es-plugins/_data&quot;,<br>        &quot;Name&quot;: &quot;es-plugins&quot;,<br>        &quot;Options&quot;: null,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><blockquote><p>本人使用windows版本dockercompose，且创建容器时，挂载本地目录作为数据卷。</p></blockquote><h3 id="3-2-2-解压缩分词器安装包"><a href="#3-2-2-解压缩分词器安装包" class="headerlink" title="3.2.2 解压缩分词器安装包"></a>3.2.2 解压缩分词器安装包</h3><p>将ik分词器压缩包解压缩，并重命名为ik</p><img src="/img/SerchEngines/elasticserch10.png" alt="" style="zoom:50%;" /><h3 id="3-2-3-上传到es容器的插件数据卷中"><a href="#3-2-3-上传到es容器的插件数据卷中" class="headerlink" title="3.2.3 上传到es容器的插件数据卷中"></a>3.2.3 上传到es容器的插件数据卷中</h3><p>也就是放到数据卷D:\AppData\docker\volumes\es-plugins目录下：</p><h3 id="3-2-4-重启容器"><a href="#3-2-4-重启容器" class="headerlink" title="3.2.4  重启容器"></a>3.2.4  重启容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 重启容器</span><br>docker restart es<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看es日志</span><br>docker logs -f es<br></code></pre></td></tr></table></figure><h3 id="3-2-5-测试"><a href="#3-2-5-测试" class="headerlink" title="3.2.5 测试"></a>3.2.5 测试</h3><p>IK分词器包含两种模式：</p><ul><li><code>ik_smart</code>：最少切分</li><li><code>ik_max_word</code>：最细切分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs DSL">#测试分词器<br>POST /_analyze<br>&#123;<br>  &quot;text&quot;:&quot;测试IK分词器的效果&quot;,<br>  &quot;analyzer&quot;: &quot;ik_max_word&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;测试&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;ik&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;ENGLISH&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;分词器&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;分词&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">3</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;器&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">4</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;的&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">5</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;效果&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">6</span><br>    &#125;<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-3-扩张词典"><a href="#3-3-扩张词典" class="headerlink" title="3.3 扩张词典"></a>3.3 扩张词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p><p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p><h3 id="3-3-1-打开IK分词器config目录"><a href="#3-3-1-打开IK分词器config目录" class="headerlink" title="3.3.1 打开IK分词器config目录"></a>3.3.1 打开IK分词器config目录</h3><p>../ik/config/IKAnalyzer.cfg.xml</p><h3 id="3-3-2-修改IKAnalyzer-cfg-xml文件"><a href="#3-3-2-修改IKAnalyzer-cfg-xml文件" class="headerlink" title="3.3.2 修改IKAnalyzer.cfg.xml文件"></a>3.3.2 修改IKAnalyzer.cfg.xml文件</h3><p>在IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">properties</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-新建ext-dic"><a href="#3-3-3-新建ext-dic" class="headerlink" title="3.3.3 新建ext.dic"></a>3.3.3 新建ext.dic</h3><p>可以参考config目录下复制一个配置文件进行修改</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">传智播客</span><br><span class="hljs-attr">奥力给</span><br></code></pre></td></tr></table></figure><h3 id="3-3-4-重启elasticserch"><a href="#3-3-4-重启elasticserch" class="headerlink" title="3.3.4 重启elasticserch"></a>3.3.4 重启elasticserch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart es<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></table></figure><p><img src="/img/SerchEngines/image-20201115230900504.png" alt="image-20201115230900504"></p><p>日志中已经成功加载ext.dic配置文件</p><h3 id="3-3-5-测试效果："><a href="#3-3-5-测试效果：" class="headerlink" title="3.3.5 测试效果："></a>3.3.5 测试效果：</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客Java就业超过90%,奥力给！&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="3-4-停用字典"><a href="#3-4-停用字典" class="headerlink" title="3.4 停用字典"></a>3.4 停用字典</h2><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p><h3 id="3-4-1-修改IKAnalyzer-cfg-xml文件"><a href="#3-4-1-修改IKAnalyzer-cfg-xml文件" class="headerlink" title="3.4.1 修改IKAnalyzer.cfg.xml文件"></a>3.4.1 修改IKAnalyzer.cfg.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">properties</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-4-2-在-stopword-dic-添加停用词"><a href="#3-4-2-在-stopword-dic-添加停用词" class="headerlink" title="3.4.2 在 stopword.dic 添加停用词"></a>3.4.2 在 stopword.dic 添加停用词</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">习大大</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-重启elasticserch"><a href="#3-4-3-重启elasticserch" class="headerlink" title="3.4.3 重启elasticserch"></a>3.4.3 重启elasticserch</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart es<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 查看 日志</span><br>docker logs -f elasticsearch<br></code></pre></td></tr></table></figure><h3 id="3-4-4-测试效果"><a href="#3-4-4-测试效果" class="headerlink" title="3.4.4 测试效果"></a>3.4.4 测试效果</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;text&quot;</span>:<span class="hljs-string">&quot;疯子在右测试IK分词器的效果，习大大为此点赞&quot;</span>,<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>搜索引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticserch</tag>
      
      <tag>分布式搜索引擎</tag>
      
      <tag>安装教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch搜索引擎</title>
    <link href="/2022/02/22/Elasticsearch%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <url>/2022/02/22/Elasticsearch%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="1、初识Elasticserch"><a href="#1、初识Elasticserch" class="headerlink" title="1、初识Elasticserch"></a>1、初识Elasticserch</h1><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><ul><li>是一款非常强大的<strong>开源搜索引擎</strong>，可以用来实现搜索、日志统计、分析、系统监控等功能</li><li>结合kibana、Logstash、Beats，也就是elastic stack（ELK）- 以elasticserch为核心的技术栈。</li><li>elasticsearch是elastic stack的<strong>核心</strong>，负责存储、搜索、分析数据，基于Luncene实现。</li></ul><img src="/img/SerchEngines/elasticserch01.png" alt="" style="zoom:50%;" /><h2 id="1-2-Lucene"><a href="#1-2-Lucene" class="headerlink" title="1.2 Lucene"></a>1.2 Lucene</h2><p>​    Lucene是一个Java语言的搜索引擎类库，提供了搜索引擎的核心API，是Apache公司的顶级项目。<a href="https://lucene.apache.org/">官网地址</a></p><p><strong>优势</strong></p><ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul><p><strong>劣势</strong></p><ul><li>只限于java开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul><h1 id="2、正向索引和倒排索引"><a href="#2、正向索引和倒排索引" class="headerlink" title="2、正向索引和倒排索引"></a>2、正向索引和倒排索引</h1><p>传统数据库（如MySQL）采用正向索引，例如某张表以id创建索引。</p><p>elasticsearch采用<strong>倒排索引</strong>：</p><ul><li><p><strong>文档</strong>（document）：每条数据就是一个文档</p></li><li><p><strong>词条</strong>（term）：文档按照语义分成的词语，得到的词语就是词条</p></li></ul><img src="/img/SerchEngines/elasticserch02.png" alt="" style="zoom:50%;" /><p><strong>正向索引</strong></p><p>​    基于文档id创建索引。查询词条时必须先找到文档，而后判断是否包含词条</p><p><strong>倒排索引</strong></p><p>​    对文档内容分词，对词条创建索引，并记录词条所在文档的信息。查询时先根据词条查询到文档id，而后获取到文档</p><h1 id="3、ES的基本概念"><a href="#3、ES的基本概念" class="headerlink" title="3、ES的基本概念"></a>3、ES的基本概念</h1><h2 id="3-1-文档"><a href="#3-1-文档" class="headerlink" title="3.1 文档"></a>3.1 文档</h2><p>elasticsearch是<strong>面向文档</strong>存储的，可以是数据库中的一条商品数据，一个订单信息。</p><p>文档数据会被<strong>序列化为json格式</strong>后存储在elasticsearch中。</p><h2 id="3-2-索引"><a href="#3-2-索引" class="headerlink" title="3.2 索引"></a>3.2 索引</h2><ul><li><p><strong>索引</strong>（index）：相同类型的文档的集合</p></li><li><p><strong>映射</strong>（mapping）：索引中文档的字段约束信息，类似表的结构约束。</p></li></ul><img src="/img/SerchEngines/elasticserch03.png" alt="" style="zoom:80%;" /><h2 id="3-3-概念对比"><a href="#3-3-概念对比" class="headerlink" title="3.3 概念对比"></a>3.3 概念对比</h2><table><thead><tr><th align="center">MySQL</th><th align="center">Elasticserch</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Table</td><td align="center">Index</td><td align="left">索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td align="center">Row</td><td align="center">Document</td><td align="left">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td align="center">Column</td><td align="center">Field</td><td align="left">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td align="center">Schema</td><td align="center">Mapping</td><td align="left">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td align="center">SQL</td><td align="center">DSL</td><td align="left">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><h2 id="3-4-架构"><a href="#3-4-架构" class="headerlink" title="3.4 架构"></a>3.4 架构</h2><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p><p>Elasticsearch：擅长海量数据的<strong>搜索、分析、计算</strong></p><h1 id="4、安装elasticserch、kibana"><a href="#4、安装elasticserch、kibana" class="headerlink" title="4、安装elasticserch、kibana"></a>4、安装elasticserch、kibana</h1><p>参考<a href="https://cherishll-git.github.io/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/">Elasticserch安装</a></p><h1 id="5、分词器"><a href="#5、分词器" class="headerlink" title="5、分词器"></a>5、分词器</h1><h2 id="5-1-默认分词器"><a href="#5-1-默认分词器" class="headerlink" title="5.1 默认分词器"></a>5.1 默认分词器</h2><p>es在创建倒排索引时需要对文档分词；在搜索时，需要对用户输入内容分词。但<strong>默认的分词规则</strong>对<strong>中文</strong>处理并<strong>不友好</strong>。</p><p>通过kibana的DevTools工具进行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs DSL">#测试分词器<br>POST /_analyze<br>&#123;<br>  &quot;text&quot;:&quot;测试IK分词器的效果&quot;,<br>  &quot;analyzer&quot;: &quot;standard&quot;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>语法说明：</p><ul><li>POST：请求方式</li><li>/_analyze：请求路径，这里省略了<code>http://192.168.150.101:9200</code>，有kibana帮我们补充</li><li>请求参数，json风格：<pre><code>analyzer：分词器类型，这里是默认的standard分词器  text：要分词的内容</code></pre></li></ul></blockquote><img src="/img/SerchEngines/elasticserch09.png" alt="" style="zoom:30%;" /><h2 id="5-2-IK分词器"><a href="#5-2-IK分词器" class="headerlink" title="5.2 IK分词器"></a>5.2 IK分词器</h2><p>处理中文分词，一般会使用IK分词器。查看<a href="https://github.com/medcl/elasticsearch-analysis-ik">官网</a></p><p>安装IK分词器，参考资料<a href="https://cherishll-git.github.io/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/">Elasticsearch安装</a></p><p>ik分词器拓展词库，参考资料<a href="https://cherishll-git.github.io/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/">Elasticsearch安装</a></p><p>ik分词器停用词库，参考资料<a href="https://cherishll-git.github.io/2022/02/23/Elasticserch%E5%AE%89%E8%A3%85/">Elasticsearch安装</a></p><p>ik分词器包含两种模式：</p><ul><li>ik_smart：最少切分，粗粒度</li><li>ik_max_word：最细切分，细粒度</li></ul><h1 id="6、索引库操作"><a href="#6、索引库操作" class="headerlink" title="6、索引库操作"></a>6、索引库操作</h1><h2 id="6-1-mapping属性"><a href="#6-1-mapping属性" class="headerlink" title="6.1 mapping属性"></a>6.1 mapping属性</h2><p>mapping是对索引库中文档的约束，常见的mapping属性包括：</p><ul><li><p>type：字段数据类型，常见的简单类型有：</p><ul><li><p>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址）</p></li><li><p>数值：long、integer、short、byte、double、float、</p></li><li><p>布尔：boolean</p></li><li><p>日期：date</p></li><li><p>对象：object</p></li></ul></li><li><p>index：是否创建索引，默认为true</p></li><li><p>analyzer：使用哪种分词器</p></li><li><p>properties：该字段的子字段</p></li></ul><h2 id="6-2-创建索引库"><a href="#6-2-创建索引库" class="headerlink" title="6.2 创建索引库"></a>6.2 创建索引库</h2><p>ES中<strong>通过Restful请求</strong>操作索引库、文档。请求内容用DSL语句来表示。创建索引库和mapping的DSL语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名称<br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;字段名&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;字段名2&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;字段名3&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;子字段&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-comment">// ...略</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>index属性默认为true，会创建索引</p></blockquote><p>示例：</p><img src="/img/SerchEngines/ik05.png" alt="" style="zoom:40%;" /><h2 id="6-3-查看、删除索引库"><a href="#6-3-查看、删除索引库" class="headerlink" title="6.3 查看、删除索引库"></a>6.3 查看、删除索引库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs DSL">#查看索引库<br>GET /索引库名   #示例：GET /member<br><br>#删除索引库<br>DELETE /索引库名 <br></code></pre></td></tr></table></figure><h2 id="6-4-修改索引库"><a href="#6-4-修改索引库" class="headerlink" title="6.4 修改索引库"></a>6.4 修改索引库</h2><p>索引库和mapping一旦创建无法修改，但是可以添加新字段，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs DSL">PUT /索引库名/_mapping<br>&#123;<br>  &quot;properties&quot;: &#123;<br>    &quot;新字段名&quot;:&#123;<br>      &quot;type&quot;: &quot;integer&quot;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7、文档操作"><a href="#7、文档操作" class="headerlink" title="7、文档操作"></a>7、文档操作</h1><h2 id="7-1-添加文档"><a href="#7-1-添加文档" class="headerlink" title="7.1 添加文档"></a>7.1 添加文档</h2><p>新增文档的DSL语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs DSL">POST /索引库名/_doc/文档id<br>&#123;<br>    &quot;字段1&quot;: &quot;值1&quot;,<br>    &quot;字段2&quot;: &quot;值2&quot;,<br>    &quot;字段3&quot;: &#123;<br>        &quot;子属性1&quot;: &quot;值3&quot;,<br>        &quot;子属性2&quot;: &quot;值4&quot;<br>    &#125;,<br>    // ...<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><img src="/img/SerchEngines/ik06.png" alt="" style="zoom:40%;" /><h2 id="7-2-查询、删除文档"><a href="#7-2-查询、删除文档" class="headerlink" title="7.2 查询、删除文档"></a>7.2 查询、删除文档</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs DSL">#查看文档<br>GET /索引库名/_doc/文档id   #示例：GET /member/_doc/1<br><br>#删除索引库<br>DELETE /索引库名/_doc/文档id<br></code></pre></td></tr></table></figure><h2 id="7-3-修改文档"><a href="#7-3-修改文档" class="headerlink" title="7.3 修改文档"></a>7.3 修改文档</h2><h3 id="7-3-1-全量修改"><a href="#7-3-1-全量修改" class="headerlink" title="7.3.1 全量修改"></a>7.3.1 全量修改</h3><p>全量修改会删除旧文档，添加新文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs DSL">PUT /索引库名/_doc/文档id<br>&#123;<br>    &quot;字段1&quot;: &quot;值1&quot;,<br>    &quot;字段2&quot;: &quot;值2&quot;,<br>    // ... 略<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-2-增量修改"><a href="#7-3-2-增量修改" class="headerlink" title="7.3.2 增量修改"></a>7.3.2 增量修改</h3><p>增量修改，修改指定字段值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs DSL">POST /索引库名/_update/文档id<br>&#123;<br>    &quot;doc&quot;: &#123;<br>         &quot;字段名&quot;: &quot;新的值&quot;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-4-动态映射"><a href="#7-4-动态映射" class="headerlink" title="7.4 动态映射"></a>7.4 动态映射</h2><p>如果新增文档的结构与mapping结构不一致，会报什么错误？</p><img src="/img/SerchEngines/ik07.png" alt="" style="zoom:60%;" /><p>当我们向ES中插入文档时，<strong>如果文档中字段没有对应的mapping，ES会帮助我们字段设置mapping</strong>，规则如下：</p><table><thead><tr><th align="center">JSON类型</th><th align="left">Elasticserch类型</th></tr></thead><tbody><tr><td align="center">字符串</td><td align="left">•日期格式字符串：mapping为date类型<br>•普通字符串：mapping为text类型，并添加keyword类型子字段Document</td></tr><tr><td align="center">布尔值</td><td align="left">boolean</td></tr><tr><td align="center">浮点数</td><td align="left">float</td></tr><tr><td align="center">整数</td><td align="left">long</td></tr><tr><td align="center">对象嵌套</td><td align="left">object，并添加properties</td></tr><tr><td align="center">数组</td><td align="left">由数组中的第一个非空类型决定</td></tr><tr><td align="center">空值</td><td align="left">忽略</td></tr></tbody></table><blockquote><p>• 插入文档时，es会检查文档中的字段是否有mapping，如果没有则按照默认mapping规则来创建索引。</p><p>• 如果默认mapping规则不符合你的需求，一定要自己设置字段mapping</p></blockquote><h1 id="8、RestClient操作索引库"><a href="#8、RestClient操作索引库" class="headerlink" title="8、RestClient操作索引库"></a>8、RestClient操作索引库</h1><h2 id="8-1-RestClient"><a href="#8-1-RestClient" class="headerlink" title="8.1 RestClient"></a>8.1 RestClient</h2><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。点击这里查看<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">官方文档</a></p><img src="/img/SerchEngines/restclient01.png" alt="" style="zoom:40%;" /><h2 id="8-2-JavaRestClient操作索引库"><a href="#8-2-JavaRestClient操作索引库" class="headerlink" title="8.2 JavaRestClient操作索引库"></a>8.2 JavaRestClient操作索引库</h2><p>利用JavaRestClient实现创建、删除索引库，判断索引库是否存在。需求：根据提供的酒店数据创建索引库，索引库名为hotel，mapping属性根据数据库结构定义。</p><h3 id="8-2-1-Demo准备"><a href="#8-2-1-Demo准备" class="headerlink" title="8.2.1 Demo准备"></a>8.2.1 Demo准备</h3><h4 id="8-2-1-1、创建hotel表，并导入数据"><a href="#8-2-1-1、创建hotel表，并导入数据" class="headerlink" title="8.2.1.1、创建hotel表，并导入数据"></a>8.2.1.1、创建hotel表，并导入数据</h4><p> 参考<a href="https://cherishll-git.github.io/2022/04/19/hotel%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%9D%BF/">hotel数据模板</a></p>]]></content>
    
    
    <categories>
      
      <category>搜索引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticserch</tag>
      
      <tag>分布式搜索引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gateway服务网关</title>
    <link href="/2022/01/12/Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <url>/2022/01/12/Gateway%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>API网关是一个服务器，是系统对外的<strong>唯一入口</strong>。API网关封装了系统内部架构，为每个客户端提供一个定制的API。API网关方式的核心要点是，<strong>所有的</strong>客户端和消费端都通过<strong>统一的网关</strong>接入微服务，在<strong>网关层</strong>处理<strong>所有的非业务功能</strong>。   </p><p>网关也是提供<strong>REST/HTTP</strong>的访问API。服务端通过<strong>API-GW</strong>注册和管理服务。</p><span id="more"></span><h2 id="1-2-为什么需要网关"><a href="#1-2-为什么需要网关" class="headerlink" title="1.2 为什么需要网关"></a>1.2 为什么需要网关</h2><p>不同的微服务一般会有不同的网络地址，客户端在访问这些微服务时必须记住几十甚至几百个地址，这对于客户端方来说太复杂也难以维护。</p><p>这就需要一个微服务网关，介于客户端与服务器之间的<strong>中间层</strong>，<strong>所有的外部请求</strong>都会先经过微服务网关。客户端只需要与网关交互，只知道一个网关地址即可。</p><p>网关功能：</p><ul><li><p>身份认证和权限校验</p></li><li><p>服务路由、负载均衡</p></li><li><p>请求限流</p></li></ul><p><img src="/img/SpringCloud/%5Cgateway01.png"></p><h2 id="1-3-网关的技术实现"><a href="#1-3-网关的技术实现" class="headerlink" title="1.3 网关的技术实现"></a>1.3 网关的技术实现</h2><p>在SpringCloud中网关的实现包括两种：</p><ul><li>geteway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h1 id="2、搭建网关服务"><a href="#2、搭建网关服务" class="headerlink" title="2、搭建网关服务"></a>2、搭建网关服务</h1><h2 id="2-1-创建网关module"><a href="#2-1-创建网关module" class="headerlink" title="2.1 创建网关module"></a>2.1 创建网关module</h2><h2 id="2-2-引入依赖"><a href="#2-2-引入依赖" class="headerlink" title="2.2 引入依赖"></a>2.2 引入依赖</h2><p>引入SpringCloudGeteway的依赖和nacos的服务发现依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--nacos服务发现依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-配置启动类"><a href="#2-3-配置启动类" class="headerlink" title="2.3 配置启动类"></a>2.3 配置启动类</h2><h2 id="2-4-编写路由配置以及nacos地址"><a href="#2-4-编写路由配置以及nacos地址" class="headerlink" title="2.4 编写路由配置以及nacos地址"></a>2.4 编写路由配置以及nacos地址</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <span class="hljs-comment"># 网关端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <span class="hljs-comment"># 服务名称</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>     <span class="hljs-comment">#配置路由  :  路由id、 路由到微服务的uri、 断言（判断条件）</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment"># 网关路由配置</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由id，自定义，只要唯一即可</span><br>          <span class="hljs-comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 这个是按照路径匹配，只要以/user/开头就符合要求。 将当前请求转发到 http://127.0.0.1:8081/user/**</span><br></code></pre></td></tr></table></figure><h2 id="2-5-Gateway路由流程"><a href="#2-5-Gateway路由流程" class="headerlink" title="2.5 Gateway路由流程"></a>2.5 Gateway路由流程</h2><p><img src="/img/SpringCloud/%5Cgateway02.png"></p><h2 id="2-6-总结"><a href="#2-6-总结" class="headerlink" title="2.6 总结"></a>2.6 总结</h2><h3 id="2-6-1-网关搭建步骤"><a href="#2-6-1-网关搭建步骤" class="headerlink" title="2.6.1 网关搭建步骤"></a>2.6.1 网关搭建步骤</h3><p>​    1、创建项目，引入nacos服务发现和gateway依赖</p><p>​    2、配置application.yml，包括服务基本信息、nacos地址、路由</p><h3 id="2-6-2-路由配置包括"><a href="#2-6-2-路由配置包括" class="headerlink" title="2.6.2 路由配置包括"></a>2.6.2 路由配置包括</h3><h4 id="2-6-2-1-路由id"><a href="#2-6-2-1-路由id" class="headerlink" title="2.6.2.1 路由id"></a>2.6.2.1 路由id</h4><p>​        路由的唯一标识</p><h4 id="2-6-2-2-路由目标（uri）"><a href="#2-6-2-2-路由目标（uri）" class="headerlink" title="2.6.2.2 路由目标（uri）"></a>2.6.2.2 路由目标（uri）</h4><p>​        路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p><h4 id="2-6-2-3-路由断言（predicates）"><a href="#2-6-2-3-路由断言（predicates）" class="headerlink" title="2.6.2.3 路由断言（predicates）"></a>2.6.2.3 路由断言（predicates）</h4><p>​        判断请求是否符合要求，符合则转发到路由目的地</p><h4 id="2-6-2-4-路由过滤器（filters）"><a href="#2-6-2-4-路由过滤器（filters）" class="headerlink" title="2.6.2.4 路由过滤器（filters）"></a>2.6.2.4 路由过滤器（filters）</h4><p>​        对请求或响应做处理</p><h1 id="3、断言工厂"><a href="#3、断言工厂" class="headerlink" title="3、断言工厂"></a>3、断言工厂</h1><h2 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h2><p><strong>路由断言工厂Route Predicate Factory</strong></p><ul><li><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p></li><li><p>例如Path=/user/**是按照路径匹配，这个规则是由org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory类来处理的</p></li><li><p>像这样的断言工厂在SpringCloudGateway还有十几个</p></li></ul><table><thead><tr><th>名称</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>查看<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">官方文档</a></p><h2 id="3-2-总结"><a href="#3-2-总结" class="headerlink" title="3.2 总结"></a>3.2 总结</h2><p><strong>PredicateFactory(断言工厂)的作用：</strong></p><p>​    读取用户定义的断言条件，对请求做出判断</p><p>**Path=/user/<strong>的含义：</strong></p><p>​    路径是以/user开头的就认为是符合的</p><h1 id="4、过滤器"><a href="#4、过滤器" class="headerlink" title="4、过滤器"></a>4、过滤器</h1><h2 id="4-1-过滤器基础"><a href="#4-1-过滤器基础" class="headerlink" title="4.1 过滤器基础"></a>4.1 过滤器基础</h2><h3 id="4-1-1-过滤器的生命周期"><a href="#4-1-1-过滤器的生命周期" class="headerlink" title="4.1.1  过滤器的生命周期"></a>4.1.1  过滤器的生命周期</h3><p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre” 和 “post”。  </p><p>​    <strong>PRE</strong>： 这种过滤器在请求被路由<strong>之前</strong>调用。我们可利用这种过滤器实现身份验证、在集群中选择 请求的微服务、记录调试信息等。 </p><p>​    <strong>POST</strong>：这种过滤器在路由到微服务<strong>以后</strong>执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</p><h3 id="4-1-2-过滤器类型"><a href="#4-1-2-过滤器类型" class="headerlink" title="4.1.2  过滤器类型"></a>4.1.2  过滤器类型</h3><p>从<strong>作用范围</strong>可分为另外两种<strong>GatewayFilter</strong> 与 <strong>GlobalFilter</strong>。    </p><ul><li><p>GatewayFilter：应用到<strong>单个</strong>路由或者<strong>一个分组</strong>的路由上。 </p></li><li><p>GlobalFilter：应用到<strong>所有</strong>的路由上。 </p></li></ul><h2 id="4-2网关过滤器GatewayFilter"><a href="#4-2网关过滤器GatewayFilter" class="headerlink" title="4.2网关过滤器GatewayFilter"></a>4.2网关过滤器GatewayFilter</h2><h3 id="4-2-1-简介"><a href="#4-2-1-简介" class="headerlink" title="4.2.1 简介"></a>4.2.1 简介</h3><p>GatewayFilter是网关中提供的一种过滤器，可以<strong>对</strong>进入网关的<strong>请求</strong>和微服务返回的<strong>响应做处理</strong></p><p><img src="/img/SpringCloud/%5Cgateway03.png"></p><h3 id="4-2-2-过滤器工厂"><a href="#4-2-2-过滤器工厂" class="headerlink" title="4.2.2 过滤器工厂"></a>4.2.2 过滤器工厂</h3><p>Spring提供了31种不同的路由<strong>过滤器工厂</strong>，例如：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><p>我们可以参考<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">官方文档</a></p><h4 id="4-2-2-1-案例-给请求添加请求头"><a href="#4-2-2-1-案例-给请求添加请求头" class="headerlink" title="4.2.2.1 案例(给请求添加请求头)"></a>4.2.2.1 案例(给请求添加请求头)</h4><p>给所有进入userservice的请求添加一个请求头：Truth=springcloud isfreaking awesome!</p><p><strong>实现方式：</strong>在gateway中修改application.yml文件，给userservice的路由添加过滤器filters:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>          <span class="hljs-attr">predicates:</span> <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <br>          <span class="hljs-attr">filters:</span> <span class="hljs-comment">#过滤器</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,SpringCloud</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">aowsome!</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br></code></pre></td></tr></table></figure><h4 id="4-2-2-2-默认过滤器"><a href="#4-2-2-2-默认过滤器" class="headerlink" title="4.2.2.2 默认过滤器"></a>4.2.2.2 默认过滤器</h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10010</span> <br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <br>          <span class="hljs-attr">predicates:</span> <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br>      <span class="hljs-attr">default-filters:</span> <span class="hljs-comment">#默认过滤器</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,SpringCloud</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">aowsome!</span><br></code></pre></td></tr></table></figure><h3 id="4-2-3-总结"><a href="#4-2-3-总结" class="headerlink" title="4.2.3 总结"></a>4.2.3 总结</h3><p><strong>网关过滤器的作用是什么？</strong></p><ol><li>对路由的请求或响应做加工处理，比如添加请求头</li><li>配置在路由下的过滤器只对当前路由的请求生效</li></ol><p><strong>defaultFilters的作用是什么？</strong></p><p>​    对所有路由都生效的过滤器</p><h2 id="4-3-全局过滤器GlobalFilter"><a href="#4-3-全局过滤器GlobalFilter" class="headerlink" title="4.3 全局过滤器GlobalFilter"></a>4.3 全局过滤器GlobalFilter</h2><p>全局过滤器的作用也是<strong>处理一切</strong>进入网关的<strong>请求</strong>和微服务<strong>响应</strong>，与GatewayFilter的作用一样。</p><p>区别在于<strong>GatewayFilter通过配置定义，处理逻辑是固定</strong>的。而<strong>GlobalFilter的逻辑</strong>需要<strong>自己写</strong>代码实现。</p><h3 id="4-3-1-定义方式"><a href="#4-3-1-定义方式" class="headerlink" title="4.3.1 定义方式"></a>4.3.1 定义方式</h3><p><strong>实现GlobalFilter接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GlobalFilter</span> </span>&#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *  处理当前请求，有必要的话通过&#123;<span class="hljs-doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function">Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-2-案例-拦截并判断用户身份"><a href="#4-3-2-案例-拦截并判断用户身份" class="headerlink" title="4.3.2 案例(拦截并判断用户身份)"></a>4.3.2 案例(拦截并判断用户身份)</h3><p><strong>需求</strong>：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li>参数中是否有authorization，</li><li>authorization参数值是否为admin</li></ul><p>如果同事满<strong>足则放行</strong>，否则拦截。</p><h4 id="4-3-2-1-代码实现"><a href="#4-3-2-1-代码实现" class="headerlink" title="4.3.2.1 代码实现"></a>4.3.2.1 代码实现</h4><p>在gateway中新建GlobalFilter接口的实现类AuthorizeFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//@Order(-1)//设置过滤器的顺序 或者通过实现Ordered接口。值越小优先级越高</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        <span class="hljs-comment">//1.获取请求参数</span><br>        ServerHttpRequest request = exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; parms = request.getQueryParams();<br>        <span class="hljs-comment">//2.获取参数中的authorization参数</span><br>        String auth = parms.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">//3.判断参数值是否等于admin。</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>.equals(auth))&#123;<span class="hljs-comment">//4.是，放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//5.不满足，拦截</span><br>        <span class="hljs-comment">//5.1 设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.valueOf(<span class="hljs-number">401</span>));<br>        <span class="hljs-comment">//5.2 拦截请求</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-3-总结"><a href="#4-3-3-总结" class="headerlink" title="4.3.3 总结"></a>4.3.3 总结</h3><p>​    <strong>全局过滤器的作用是什么？</strong></p><p>​    对所有路由都生效的过滤器，并且可以自定义处理逻辑</p><p>​    <strong>实现全局过滤器的步骤？</strong></p><ul><li><p>实现GlobalFilter接口</p></li><li><p>添加@Order注解或实现Ordered接口</p></li><li><p>编写处理逻辑</p></li></ul><h2 id="4-4-过滤器执行顺序"><a href="#4-4-过滤器执行顺序" class="headerlink" title="4.4 过滤器执行顺序"></a>4.4 过滤器执行顺序</h2><p>请求进入网关会碰到三类过滤器：<strong>当前路由的过滤器</strong>、<strong>DefaultFilter</strong>、<strong>GlobalFilter</strong></p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器</p><p><img src="/img/SpringCloud/%5Cgateway04.png"></p><ul><li><p>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高</strong>，执行顺序越靠前。</p></li><li><p>GlobalFilter通过<strong>实现Ordered接口</strong>，或者<strong>添加@Order注解</strong>来指定order值，由我们自己指定</p></li><li><p>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</p></li><li><p>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</p></li></ul><p>可以参考下面几个类的源码来查看：</p><p>**org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()**方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><strong>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle</strong>()方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h1 id="5、跨域问题"><a href="#5、跨域问题" class="headerlink" title="5、跨域问题"></a>5、跨域问题</h1><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</li><li>域名相同，端口不同：localhost:8080和localhost8081</li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p>解决方案：CORS</p><p>网关处理跨域采用的同样是CORS方案，并且只需要简单配置即可实现：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># ...</span><br>      <span class="hljs-attr">globalcors:</span> <span class="hljs-comment"># 全局的跨域处理</span><br>        <span class="hljs-attr">add-to-simple-url-handler-mapping:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 解决options请求被拦截问题</span><br>        <span class="hljs-attr">corsConfigurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-comment"># 允许哪些网站的跨域请求 </span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://localhost:8090&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;http://www.leyou.com&quot;</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 允许的跨域ajax的请求方式</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;GET&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;POST&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;DELETE&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;PUT&quot;</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;OPTIONS&quot;</span><br>            <span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment"># 允许在请求中携带的头信息</span><br>            <span class="hljs-attr">allowCredentials:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否允许携带cookie</span><br>            <span class="hljs-attr">maxAge:</span> <span class="hljs-number">360000</span> <span class="hljs-comment"># 这次跨域检测的有效期</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Gateway</tag>
      
      <tag>网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign远程调用</title>
    <link href="/2022/01/11/Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/"/>
    <url>/2022/01/11/Feign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Feign是一个<strong>声明式</strong>的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p>其作用就是帮助我们优雅的实现http请求的发送。<strong>Feign集成了Ribbon</strong></p><span id="more"></span><h1 id="1、Feign替代RestTemplate"><a href="#1、Feign替代RestTemplate" class="headerlink" title="1、Feign替代RestTemplate"></a>1、Feign替代RestTemplate</h1><h2 id="1-1-RestTemplate方式调用存在的问题"><a href="#1-1-RestTemplate方式调用存在的问题" class="headerlink" title="1.1 RestTemplate方式调用存在的问题"></a>1.1 RestTemplate方式调用存在的问题</h2><p>先来看下使用RestTemplate发起远程调用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String url = <span class="hljs-string">&quot;http://userservice/user/&quot;</span> + order.getUserId();<br>User user = restTemplate.getForObject(url, User.class);<br></code></pre></td></tr></table></figure><p>存在一下几个问题：</p><ul><li>代码可读性差，编程体验不统一</li><li>参数复杂URL难以维护</li></ul><h2 id="1-2-定义和使用Feign客户端"><a href="#1-2-定义和使用Feign客户端" class="headerlink" title="1.2 定义和使用Feign客户端"></a>1.2 定义和使用Feign客户端</h2><h3 id="1-2-1-引入依赖"><a href="#1-2-1-引入依赖" class="headerlink" title="1.2.1 引入依赖"></a>1.2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Feign客户端依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-2-添加-EnableFeignClients注解开启Feign"><a href="#1-2-2-添加-EnableFeignClients注解开启Feign" class="headerlink" title="1.2.2 添加@EnableFeignClients注解开启Feign"></a>1.2.2 添加<code>@EnableFeignClients</code>注解开启Feign</h3><p>在orderservice的启动类添加注解开启Feign</p><h3 id="1-2-3-编写Feign客户端"><a href="#1-2-3-编写Feign客户端" class="headerlink" title="1.2.3 编写Feign客户端"></a>1.2.3 编写Feign客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.order.clients;<br><span class="hljs-comment">//...</span><br><span class="hljs-meta">@FeignClient(&quot;userservice&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserClient</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-3-用Feign客户端代替RestTemplate"><a href="#1-2-3-用Feign客户端代替RestTemplate" class="headerlink" title="1.2.3 用Feign客户端代替RestTemplate"></a>1.2.3 用Feign客户端代替RestTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserClient userClient;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Order <span class="hljs-title">queryOrderById</span><span class="hljs-params">(Long orderId)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.查询订单</span><br>        Order order = orderMapper.findById(orderId);<br>        <span class="hljs-comment">// 2.查询用户,利用Feign远程调用</span><br>        User user = userClient.findById(order.getUserId());<br>        <span class="hljs-comment">// 3.封装user信息</span><br>        order.setUser(user);<br>        <span class="hljs-comment">// 4.返回</span><br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、自定义配置"><a href="#2、自定义配置" class="headerlink" title="2、自定义配置"></a>2、自定义配置</h1><p>Feign运行自定义配置来覆盖默认配置，可以修改的配置如下：</p><table><thead><tr><th align="center">类型</th><th align="center">作用</th><th>说明</th></tr></thead><tbody><tr><td align="center">feign.Logger.Level</td><td align="center">修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td align="center">feign.codec.Decoder</td><td align="center">响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td align="center">feign.codec.Encoder</td><td align="center">请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td align="center">feign. Contract</td><td align="center">支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td align="center">feign. Retryer</td><td align="center">失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般我们需要配置的就是日志级别。</p><h2 id="2-1-配置Feign日志"><a href="#2-1-配置Feign日志" class="headerlink" title="2.1 配置Feign日志"></a>2.1 配置Feign日志</h2><h3 id="2-1-1-配置文件方式"><a href="#2-1-1-配置文件方式" class="headerlink" title="2.1.1 配置文件方式"></a>2.1.1 配置文件方式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span> <br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">FULL</span> <span class="hljs-comment">#  日志级别 </span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-java代码方式"><a href="#2-1-2-java代码方式" class="headerlink" title="2.1.2 java代码方式"></a>2.1.2 java代码方式</h3><h4 id="2-1-2-1-申明一个bean"><a href="#2-1-2-1-申明一个bean" class="headerlink" title="2.1.2.1 申明一个bean"></a>2.1.2.1 申明一个bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignClientConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Logger.<span class="hljs-function">Level <span class="hljs-title">feignLogLevel</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Logger.Level.BASIC; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-2-配置"><a href="#2-1-2-2-配置" class="headerlink" title="2.1.2.2 配置"></a>2.1.2.2 配置</h4><p><strong>全局配置</strong></p><p>如果是全局配置，则把它放到@EnableFeignClients这个注解中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)</span> <br></code></pre></td></tr></table></figure><p><strong>局部配置</strong></p><p>如果是局部配置，则把它放到@FeignClient这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;, configuration = FeignClientConfiguration.class)</span> <br></code></pre></td></tr></table></figure><h1 id="3、Feign使用优化"><a href="#3、Feign使用优化" class="headerlink" title="3、Feign使用优化"></a>3、Feign使用优化</h1><h2 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a>3.1 分析</h2><p><strong>Feign底层的客户端实现：</strong></p><ul><li><p>URLConnection：默认实现，不支持连接池</p></li><li><p>Apache HttpClient：支持连接池</p></li><li><p>OKHttp：支持连接池</p></li></ul><p> 因此，<strong>优化Feign的性能主要包括</strong>：</p><p>1、使用连接池代替默认的URLConnection【<strong>使用HttpClient或OKHttp代替URLConnection</strong>】</p><p>2、日志级别，最好使用<strong>Basic</strong>或者<strong>None</strong></p><h2 id="3-2-Feign的性能优化-连接池配置"><a href="#3-2-Feign的性能优化-连接池配置" class="headerlink" title="3.2 Feign的性能优化-连接池配置"></a>3.2 Feign的性能优化-连接池配置</h2><p>Feign添加HttpClient的支持：</p><h3 id="3-2-1-引入依赖"><a href="#3-2-1-引入依赖" class="headerlink" title="3.2.1 引入依赖"></a>3.2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--httpClient的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2-2-配置连接池"><a href="#3-2-2-配置连接池" class="headerlink" title="3.2.2 配置连接池"></a>3.2.2 配置连接池</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span> <span class="hljs-comment"># default全局的配置</span><br>        <span class="hljs-attr">loggerLevel:</span> <span class="hljs-string">BASIC</span> <span class="hljs-comment"># 日志级别，BASIC就是基本的请求和响应信息 </span><br>  <span class="hljs-attr">httpclient:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启feign对HttpClient的支持</span><br>    <span class="hljs-attr">max-connections:</span> <span class="hljs-number">200</span> <span class="hljs-comment"># 最大的连接数</span><br>    <span class="hljs-attr">max-connections-per-route:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 每个路径的最大连接数</span><br></code></pre></td></tr></table></figure><h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h2><p>Feign的优化：</p><ol><li><p>日志级别尽量用basic</p></li><li><p>使用HttpClient或OKHttp代替URLConnection</p></li><li><ol><li>引入feign-httpClient依赖</li><li>配置文件开启httpClient功能，设置连接池参数</li></ol></li></ol><h1 id="4、Feign的最佳实践"><a href="#4、Feign的最佳实践" class="headerlink" title="4、Feign的最佳实践"></a>4、Feign的最佳实践</h1><h2 id="4-1-方式一（继承）"><a href="#4-1-方式一（继承）" class="headerlink" title="4.1 方式一（继承）"></a>4.1 方式一（继承）</h2><p>给消费者的FeignClient和提供者的controller定义统一的父接口作为标准。</p><p><img src="/img/SpringCloud/feign01.png"></p><p>遵循了面向契约编程的思想，企业中使用较多</p><p><strong>存在问题：</strong></p><ul><li><strong>服务紧耦合</strong></li><li><strong>父接口参数列表中的映射关系不会被继承</strong></li></ul><h2 id="4-2-方式二（抽取）"><a href="#4-2-方式二（抽取）" class="headerlink" title="4.2 方式二（抽取）"></a>4.2 方式二（抽取）</h2><p>将FeignClient抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用</p><p><strong>抽取前：</strong></p><img src="/img/SpringCloud/feign03.png" alt="" style="zoom:40%;" /><p><strong>抽取后：</strong></p><p><img src="/img/SpringCloud/feign04.png"></p><p><img src="/img/SpringCloud/feign02.png"></p><h2 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a>4.3 总结</h2><p><strong>Feign的最佳实践：</strong></p><ol><li>让controller和FeignClient继承同一接口</li><li>将FeignClient、POJO、Feign的默认配置都定义到一个项目中，供所有消费者使用</li></ol><h1 id="5、抽取FeignClient"><a href="#5、抽取FeignClient" class="headerlink" title="5、抽取FeignClient"></a>5、抽取FeignClient</h1><h2 id="5-1-实现"><a href="#5-1-实现" class="headerlink" title="5.1 实现"></a>5.1 实现</h2><p>实现最佳实践方式二的步骤如下：</p><ol><li><p>首先创建一个module，命名为feign-api，然后引入feign的starter依赖</p></li><li><p>将order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p></li><li><p>在order-service中引入feign-api的依赖</p></li><li><p>修改order-service中的所有与上述三个组件有关的import部分，改成导入feign-api中的包</p></li><li><p>重启测试</p></li></ol><h2 id="5-2-扫描FeignClient问题"><a href="#5-2-扫描FeignClient问题" class="headerlink" title="5.2 扫描FeignClient问题"></a>5.2 扫描FeignClient问题</h2><p>不同包的FeignClient的导入，由于定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种方式解决：</p><h3 id="5-2-1-指定FeignClient所在包"><a href="#5-2-1-指定FeignClient所在包" class="headerlink" title="5.2.1 指定FeignClient所在包"></a>5.2.1 指定FeignClient所在包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.lyq.feign.clients&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="5-2-2-指定FeignClient字节码"><a href="#5-2-2-指定FeignClient字节码" class="headerlink" title="5.2.2 指定FeignClient字节码"></a>5.2.2 指定FeignClient字节码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span><br></code></pre></td></tr></table></figure><blockquote><p>点击<a href="https://github.com/cherishll-git/Cloud-Code/tree/master/SpringCloudFeign">这里</a>查看实例代码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos配置管理</title>
    <link href="/2022/01/10/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2022/01/10/Nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1、统一配置管理"><a href="#1、统一配置管理" class="headerlink" title="1、统一配置管理"></a>1、统一配置管理</h1><p><strong>配置更改热更新</strong></p><img src="/img/SpringCloud/nacos09.png" style="zoom:50%;" /><h2 id="1-1-添加配置信息"><a href="#1-1-添加配置信息" class="headerlink" title="1.1 添加配置信息"></a>1.1 添加配置信息</h2><p>有热更新需求的配置，通过nacos进行配置，而不是所有的配置都放在nacos中配置。</p><img src="/img/SpringCloud/nacos10.png" style="zoom:50%;" /><img src="/img/SpringCloud/nacos11.png" style="zoom:75%;" /><h2 id="1-2-配置获取的步骤"><a href="#1-2-配置获取的步骤" class="headerlink" title="1.2 配置获取的步骤"></a>1.2 配置获取的步骤</h2><h3 id="1-2-1-无nacos配置时"><a href="#1-2-1-无nacos配置时" class="headerlink" title="1.2.1 无nacos配置时"></a>1.2.1 无nacos配置时</h3><p><img src="/img/SpringCloud/nacos12.png" alt="img"></p><h3 id="1-2-2-有nacos配置时"><a href="#1-2-2-有nacos配置时" class="headerlink" title="1.2.2 有nacos配置时"></a>1.2.2 有nacos配置时</h3><p>读取nacos配置新信息就需要一些信息：</p><ol><li>去哪读（nacos地址）</li><li>读取谁</li></ol><p>bootstrap.yml的优先级高于application.yml，项目启动会优先读取bootstrap.yml。所以将nacos地址、配置文件等相关信息配置在bootstrap.yml中</p><p><img src="/img/SpringCloud/nacos13.png" alt="img"></p><h2 id="1-3-获取配置实现"><a href="#1-3-获取配置实现" class="headerlink" title="1.3 获取配置实现"></a>1.3 获取配置实现</h2><h3 id="1-3-1-引入nacos的配置管理客户端依赖"><a href="#1-3-1-引入nacos的配置管理客户端依赖" class="headerlink" title="1.3.1 引入nacos的配置管理客户端依赖"></a>1.3.1 引入nacos的配置管理客户端依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos配置管理客户端依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2-添加bootstrap-yml文件"><a href="#1-3-2-添加bootstrap-yml文件" class="headerlink" title="1.3.2 添加bootstrap.yml文件"></a>1.3.2 添加bootstrap.yml文件</h3><p>在user-service中的resource目录下，添加一个bootstrap.yml文件，该文件是<strong>引导文件</strong>，优先级高于application.yml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#开发环境，这里时dev</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#Nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><h3 id="1-3-3-测试"><a href="#1-3-3-测试" class="headerlink" title="1.3.3 测试"></a>1.3.3 测试</h3><p>在user-service中将pattern.dateformat这个属性注入到UserController中做测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dataformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateformat;<br><br>    <span class="hljs-meta">@GetMapping(&quot;now&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">now</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat, Locale.CHINA));<br>    &#125;<br><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：<code>@Value</code>注解使用spring的，而不是loombook的</p><p>   nacos建立配置后需要重启nacos，否则<code>@Value</code>注解不生效</p><h2 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h2><p>将配置交给Nacos管理的步骤</p><p>① 在Nacos中添加配置文件</p><p>② 在微服务中引入nacos的<strong>config依赖</strong></p><p>③ 在微服务中添加<strong>bootstrap.yml</strong>，配置nacos地址、当前环境、服务名称、文件后缀名。这些决定了程序启动时去nacos读取哪个文件</p><h1 id="2、配置热更新"><a href="#2、配置热更新" class="headerlink" title="2、配置热更新"></a>2、配置热更新</h1><p>Nacos中的配置文件变更后，微服务无需重启就可以感知。不过需要通过下面两种配置实现：</p><h2 id="2-1-使用-RefreshScope注解"><a href="#2-1-使用-RefreshScope注解" class="headerlink" title="2.1 使用@RefreshScope注解"></a>2.1 使用<code>@RefreshScope</code>注解</h2><p>在<code>@Value</code>注入的变量所在类上添加注解<code>@RefreshScope</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">// 该注解实现nacos配置自动刷新</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;pattern.dataformat&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateformat;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-使用-ConfigurationProperties注解"><a href="#2-2-使用-ConfigurationProperties注解" class="headerlink" title="2.2 使用@ConfigurationProperties注解"></a>2.2 使用<code>@ConfigurationProperties</code>注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PatternProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String dateformat;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h2><p>• 不是所有的配置都适合放到配置中心，维护起来比较麻烦</p><p>• 建议将一些关键参数，需要运行时调整的参数放到nacos配置中心，一般都是自定义配置</p><h1 id="3、配置共享"><a href="#3、配置共享" class="headerlink" title="3、配置共享"></a>3、配置共享</h1><h2 id="3-1-多环境配置共享"><a href="#3-1-多环境配置共享" class="headerlink" title="3.1 多环境配置共享"></a>3.1 多环境配置共享</h2><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>[spring.application.name]-[spring.profiles.active].yaml，例如：userservice-dev.yaml  <strong>环境配置</strong></li><li>[spring.application.name].yaml，例如：userservice.yaml <strong>默认配置，多环境共享</strong></li></ul><p>无论profile如何变化，[spring.application.name].yaml这个文件<strong>一定会加载</strong>，因此多环境共享配置可以写入这个文件。</p><p><img src="/img/SpringCloud/nacos14.png" alt="img"></p><h2 id="3-2-多种配置的优先级"><a href="#3-2-多种配置的优先级" class="headerlink" title="3.2 多种配置的优先级"></a>3.2 多种配置的优先级</h2><p>[服务名]-[环境].yaml&gt;[服务名].yaml &gt; 本地配置</p><img src="/img/SpringCloud/nacos15.png" style="zoom:50%;" /><h1 id="4、搭建Nacos集群"><a href="#4、搭建Nacos集群" class="headerlink" title="4、搭建Nacos集群"></a>4、搭建Nacos集群</h1><ol><li>搭建MySQL集群并初始化数据库表</li><li>下载解压nacos</li><li>修改集群配置(节点信息)、数据库配置</li><li>分别启动多个nacos节点</li><li>nginx反向代理</li></ol><p>  参考<a href="https://cherishll-git.github.io/2022/01/10/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">Nacos集群搭建</a></p><blockquote><p>点击<a href="https://github.com/cherishll-git/Cloud-Code/tree/master/SpringCloudNacos">这里</a>查看实例代码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos集群搭建</title>
    <link href="/2022/01/10/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/01/10/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="1-集群结构图"><a href="#1-集群结构图" class="headerlink" title="1.集群结构图"></a>1.集群结构图</h1><p>官方给出的Nacos集群图：</p><p><img src="/img/SpringCloud/nacos16.png"></p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里<strong>负载均衡器可以使用nginx</strong>。</p><p>我们计划的集群结构：</p><img src="/img/SpringCloud/nacos17.png" alt="" style="zoom:50%;" /><p>三个nacos节点的地址：</p><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1</td><td>8847</td></tr></tbody></table><h1 id="2-搭建集群"><a href="#2-搭建集群" class="headerlink" title="2.搭建集群"></a>2.搭建集群</h1><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构(官网提供好了)</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h2 id="2-1-初始化数据库"><a href="#2-1-初始化数据库" class="headerlink" title="2.1.初始化数据库"></a>2.1.初始化数据库</h2><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考<strong>传智教育</strong>的后续高手课程。</p><p>这里我们以单点的数据库为例来讲解。</p><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL(nacos/conf/nacos-mysql.sql)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  `c_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_use` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `effect` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_schema` text,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_aggr   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_aggr` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `datum_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;datum_id&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;内容&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;增加租户字段&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_beta   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_beta` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `beta_ips` <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;betaIps&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_beta&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_info_tag   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_info_tag` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tag_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_id&#x27;</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;content&#x27;</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;md5&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  `src_user` text COMMENT <span class="hljs-string">&#x27;source user&#x27;</span>,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;source ip&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_info_tag&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = config_tags_relation   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `config_tags_relation` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `tag_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>  `tag_type` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tag_type&#x27;</span>,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;data_id&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;group_id&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;config_tag_relation&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = group_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `group_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;集群、各Group容量信息表&#x27;</span>;<br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = his_config_info   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `his_config_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">64</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `nid` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `data_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `group_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `app_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;app_name&#x27;</span>,<br>  `content` longtext <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `md5` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br>  `src_user` text,<br>  `src_ip` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `op_type` <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;租户字段&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`nid`),<br>  KEY `idx_gmt_create` (`gmt_create`),<br>  KEY `idx_gmt_modified` (`gmt_modified`),<br>  KEY `idx_did` (`data_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;多租户改造&#x27;</span>;<br><br><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-comment">/*   数据库全名 = nacos_config   */</span><br><span class="hljs-comment">/*   表名称 = tenant_capacity   */</span><br><span class="hljs-comment">/******************************************/</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_capacity` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;Tenant ID&#x27;</span>,<br>  `quota` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;配额，0表示使用默认值&#x27;</span>,<br>  `usage` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用量&#x27;</span>,<br>  `max_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_aggr_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;聚合子配置最大个数&#x27;</span>,<br>  `max_aggr_size` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,<br>  `max_history_count` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> COMMENT <span class="hljs-string">&#x27;最大变更历史数量&#x27;</span>,<br>  `gmt_create` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;租户容量信息表&#x27;</span>;<br><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tenant_info` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `kp` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;kp&#x27;</span>,<br>  `tenant_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_id&#x27;</span>,<br>  `tenant_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span> COMMENT <span class="hljs-string">&#x27;tenant_name&#x27;</span>,<br>  `tenant_desc` <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;tenant_desc&#x27;</span>,<br>  `create_source` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;create_source&#x27;</span>,<br>  `gmt_create` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `gmt_modified` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;修改时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),<br>  KEY `idx_tenant_id` (`tenant_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;tenant_info&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`enabled` <span class="hljs-type">boolean</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `roles` (<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>`role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="hljs-keyword">ASC</span>, `role` <span class="hljs-keyword">ASC</span>) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `permissions` (<br>    `role` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `resource` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    `action` <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    <span class="hljs-keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="hljs-keyword">USING</span> BTREE<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (username, password, enabled) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="hljs-literal">TRUE</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> roles (username, role) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;nacos&#x27;</span>, <span class="hljs-string">&#x27;ROLE_ADMIN&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-2-下载nacos"><a href="#2-2-下载nacos" class="headerlink" title="2.2.下载nacos"></a>2.2.下载nacos</h2><p>nacos在GitHub上有下载地址：<a href="https://github.com/alibaba/nacos/tags%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p><p>本例中采用1.4.2版本：</p><p><img src="/img/SpringCloud/nacos18.png"></p><h2 id="2-3-配置Nacos"><a href="#2-3-配置Nacos" class="headerlink" title="2.3.配置Nacos"></a>2.3.配置Nacos</h2><p>将这个包解压到任意非中文目录下，如图：</p><img src="/img/SpringCloud/nacos01.png" style="zoom:50%;" /><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p>然后添加内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1:8845</span><br><span class="hljs-number">127.0.0.1:8846</span><br><span class="hljs-number">127.0.0.1:8847</span><br></code></pre></td></tr></table></figure><p>然后修改conf/application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><br><span class="hljs-meta">db.num</span>=<span class="hljs-string">1</span><br><br><span class="hljs-meta">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-meta">db.user.0</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">db.password.0</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h2 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4.启动"></a>2.4.启动</h2><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><img src="/img/SpringCloud/nacos19.png"></p><p>然后分别修改三个文件夹中的application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8845</span><br></code></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8846</span><br></code></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8847</span><br></code></pre></td></tr></table></figure><p>然后分别启动三个nacos节点：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span><br></code></pre></td></tr></table></figure><h2 id="2-5-nginx反向代理"><a href="#2-5-nginx反向代理" class="headerlink" title="2.5.nginx反向代理"></a>2.5.nginx反向代理</h2><p>此处使用nginx-1.18.0版本，解压到任意非中文目录下：</p><img src="/img/SpringCloud/nacos20.png" alt="1" style="zoom:50%;" />     <p>修改conf/nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> nacos-cluster &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8845</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8846</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8847</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br><br>    <span class="hljs-attribute">location</span> /nacos &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://nacos-cluster;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:80</span> <span class="hljs-comment"># Nacos地址</span><br></code></pre></td></tr></table></figure><h2 id="2-6-优化"><a href="#2-6-优化" class="headerlink" title="2.6.优化"></a>2.6.优化</h2><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Nacos</tag>
      
      <tag>集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos注册中心</title>
    <link href="/2022/01/06/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <url>/2022/01/06/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Nacos注册中心"><a href="#1、Nacos注册中心" class="headerlink" title="1、Nacos注册中心"></a>1、Nacos注册中心</h1><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高</p><span id="more"></span><h2 id="1-1-Nacos服务搭建"><a href="#1-1-Nacos服务搭建" class="headerlink" title="1.1 Nacos服务搭建"></a>1.1 Nacos服务搭建</h2><blockquote><p>安装参考<a href="https://cherishll-git.github.io/2021/12/16/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/">Nacos安装指南</a></p></blockquote><h3 id="1-1-1-下载安装包"><a href="#1-1-1-下载安装包" class="headerlink" title="1.1.1 下载安装包"></a>1.1.1 下载安装包</h3><h3 id="1-1-2-解压"><a href="#1-1-2-解压" class="headerlink" title="1.1.2 解压"></a>1.1.2 解压</h3><h3 id="1-1-3-在bin目录下运行指令"><a href="#1-1-3-在bin目录下运行指令" class="headerlink" title="1.1.3 在bin目录下运行指令"></a>1.1.3 在bin目录下运行指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">startup.cmd -m standalone<br></code></pre></td></tr></table></figure><h2 id="1-2-Nacos服务注册或发现"><a href="#1-2-Nacos服务注册或发现" class="headerlink" title="1.2 Nacos服务注册或发现"></a>1.2 Nacos服务注册或发现</h2><h3 id="1-2-1-引入nacos-discovery依赖"><a href="#1-2-1-引入nacos-discovery依赖" class="headerlink" title="1.2.1 引入nacos.discovery依赖"></a>1.2.1 引入nacos.discovery依赖</h3><h4 id="父工程pom-xml"><a href="#父工程pom-xml" class="headerlink" title="父工程pom.xml"></a>父工程pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="子工程pom-xml"><a href="#子工程pom-xml" class="headerlink" title="子工程pom.xml"></a>子工程pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos客户端依赖包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-2-2-配置nacos地址"><a href="#1-2-2-配置nacos地址" class="headerlink" title="1.2.2 配置nacos地址"></a>1.2.2 配置nacos地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#nacos服务端地址</span><br></code></pre></td></tr></table></figure><h2 id="1-3-Nacos服务分级存储模型"><a href="#1-3-Nacos服务分级存储模型" class="headerlink" title="1.3 Nacos服务分级存储模型"></a>1.3 Nacos服务分级存储模型</h2><p><img src="/img/SpringCloud/nacos07.png" alt="img"></p><h3 id="1-3-1-服务跨集群调用问题"><a href="#1-3-1-服务跨集群调用问题" class="headerlink" title="1.3.1 服务跨集群调用问题"></a>1.3.1 服务跨集群调用问题</h3><p>服务调用尽可能选择本地集群的服务，跨集群调用延迟较高</p><p>本地集群不可访问时，再去访问其它集群</p><h3 id="1-3-2-服务集群属性"><a href="#1-3-2-服务集群属性" class="headerlink" title="1.3.2 服务集群属性"></a>1.3.2 服务集群属性</h3><p>修改yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span> <br><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos 服务端地址</span><br>      <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">HZ</span> <span class="hljs-comment"># 配置集群名称，也就是机房位置，例如：HZ，杭州</span><br></code></pre></td></tr></table></figure><h3 id="1-3-3-总结"><a href="#1-3-3-总结" class="headerlink" title="1.3.3 总结"></a>1.3.3 总结</h3><h4 id="Nacos服务分级存储模型："><a href="#Nacos服务分级存储模型：" class="headerlink" title="Nacos服务分级存储模型："></a>Nacos服务分级存储模型：</h4><p>① 一级是服务，例如userservice</p><p>② 二级是集群，例如杭州或上海</p><p>③ 三级是实例，例如杭州机房的某台部署了userservice的服务器</p><h4 id="如何设置实例的集群属性："><a href="#如何设置实例的集群属性：" class="headerlink" title="如何设置实例的集群属性："></a>如何设置实例的集群属性：</h4><p>修改<strong>application.yml</strong>文件，添加<code>spring.cloud.nacos.discovery.cluster-name</code>属性即可</p><h2 id="1-4-Nacos负载均衡策略"><a href="#1-4-Nacos负载均衡策略" class="headerlink" title="1.4 Nacos负载均衡策略"></a>1.4 Nacos负载均衡策略</h2><h3 id="1-4-1-根据集群负载均衡"><a href="#1-4-1-根据集群负载均衡" class="headerlink" title="1.4.1 根据集群负载均衡"></a>1.4.1 根据集群负载均衡</h3><p>这个规则优先会寻找与自己同集群的服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">user-service:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="hljs-comment">#负载均衡规则 RandomRule-随机 NacosRule-优先选择同集群服务实例列表</span><br></code></pre></td></tr></table></figure><p>NacosRule负载均衡策略:</p><p>① 优先选择同集群服务实例列表</p><p>② 本地集群找不到提供者，才去其它集群寻找，并且会报警告</p><p>③ 确定了可用实例列表后，再采用随机负载均衡挑选实例</p><h3 id="1-4-2-根据权重负载均衡"><a href="#1-4-2-根据权重负载均衡" class="headerlink" title="1.4.2 根据权重负载均衡"></a>1.4.2 根据权重负载均衡</h3><h4 id="Nacos控制台可以设置实例的权重值"><a href="#Nacos控制台可以设置实例的权重值" class="headerlink" title="Nacos控制台可以设置实例的权重值"></a>Nacos控制台可以设置实例的权重值</h4><p>实际部署中会出现这样的场景：</p><ul><li>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求</li></ul><p>Nacos提供了<strong>权重配置</strong>来<strong>控制访问频率</strong>，权重越大则访问频率越高</p><p>Nacos控制台可以设置实例的权重值，0~1之间</p><p>同集群内的多个实例，权重越高被访问的频率越高</p><p>权重设置为0则完全不会被访问</p><h3 id="1-4-3-环境隔离-namespace"><a href="#1-4-3-环境隔离-namespace" class="headerlink" title="1.4.3 环境隔离-namespace"></a>1.4.3 环境隔离-namespace</h3><p>Nacos中服务存储和数据存储的<strong>最外层</strong>都是一个名为<code>namespace</code>的东西，用来做最外层隔离</p><h4 id="1-4-3-1-Nacos创建namespace"><a href="#1-4-3-1-Nacos创建namespace" class="headerlink" title="1.4.3.1 Nacos创建namespace"></a>1.4.3.1 Nacos创建namespace</h4><h4 id="1-4-3-2-修改应用yml"><a href="#1-4-3-2-修改应用yml" class="headerlink" title="1.4.3.2 修改应用yml"></a>1.4.3.2 修改应用yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/heima?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span> <br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">SH</span> <span class="hljs-comment"># 上海</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="hljs-comment"># 命名空间，填ID</span><br></code></pre></td></tr></table></figure><p>① 每个namespace都有唯一id</p><p>② 服务设置namespace时要写id而不是名称</p><p>③ 不同namespace下的服务互相不可见</p><h2 id="1-5-Nacos注册中心原理"><a href="#1-5-Nacos注册中心原理" class="headerlink" title="1.5 Nacos注册中心原理"></a>1.5 Nacos注册中心原理</h2><h3 id="1-5-1-nacos注册中心细节分析"><a href="#1-5-1-nacos注册中心细节分析" class="headerlink" title="1.5.1 nacos注册中心细节分析"></a>1.5.1 nacos注册中心细节分析</h3><p><img src="/img/SpringCloud/nacos08.png" alt="img"></p><h3 id="1-5-2-临时实例和非临时实例"><a href="#1-5-2-临时实例和非临时实例" class="headerlink" title="1.5.2 临时实例和非临时实例"></a>1.5.2 临时实例和非临时实例</h3><p>服务注册到Nacos时，可以选择注册为临时或非临时实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置为非临时实例</span><br></code></pre></td></tr></table></figure><p>临时实例宕机时，会从nacos的服务列表中剔除，而非临时实例则不会</p><h1 id="2、Nacos与Eureka的比较"><a href="#2、Nacos与Eureka的比较" class="headerlink" title="2、Nacos与Eureka的比较"></a>2、Nacos与Eureka的比较</h1><h2 id="2-1-相同点"><a href="#2-1-相同点" class="headerlink" title="2.1 相同点"></a>2.1 相同点</h2><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul><h2 id="2-2-不同点"><a href="#2-2-不同点" class="headerlink" title="2.2 不同点"></a>2.2 不同点</h2><ul><li><p>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</p></li><li><p>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</p></li><li><p>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</p></li><li><p>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</p></li></ul><blockquote><p>A：可用性        保持服务可用：多节点</p><p>C：一致性        多节点数据一致</p><p>P：分区容忍性        是否可以将数据存在多个地方</p><p>不可能同时满足CAP</p></blockquote><blockquote><p>点击<a href="https://github.com/cherishll-git/Cloud-Code/tree/master/SpringCloudNacos">这里</a>查看实例代码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>注册中心</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ribbon客户端负载均衡</title>
    <link href="/2022/01/04/Ribbon%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2022/01/04/Ribbon%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Ribbon负载均衡"><a href="#1、Ribbon负载均衡" class="headerlink" title="1、Ribbon负载均衡"></a>1、Ribbon负载均衡</h1><p>​    Netflixfa 发布的一个<strong>负载均衡器</strong>，有助于控制 HTTP 和 TCP客户端行为。   在 SpringCloud 中， Eureka一般配合Ribbon进行使用，Ribbon提供了客户端负载均衡的功能。</p><pre><code> Ribbon自动的从注册中心中获取服务提供者的 列表信息，并基于内置的负载均衡算法，请求服务</code></pre><span id="more"></span>  <h2 id="1-1-过程"><a href="#1-1-过程" class="headerlink" title="1.1 过程"></a>1.1 过程</h2><p><img src="/img/SpringCloud/ribbon01.png"></p><h2 id="1-2-源码分析"><a href="#1-2-源码分析" class="headerlink" title="1.2 源码分析"></a>1.2 源码分析</h2><p><img src="/img/SpringCloud/ribbon02.png"></p><h2 id="1-3-负载均衡策略"><a href="#1-3-负载均衡策略" class="headerlink" title="1.3 负载均衡策略"></a>1.3 负载均衡策略</h2><p>Ribbon的负载均衡规则是一个叫做<strong>IRule的接口</strong>来定义的，每一个子接口都是一种规则：</p><p><img src="/img/SpringCloud/ribbon03.png"></p><table><thead><tr><th>内置负载均衡规则类</th><th>规则描述</th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。（2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个<strong>权重</strong>值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td>ZoneAvoidanceRule</td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><h2 id="1-4-修改负载均衡规则"><a href="#1-4-修改负载均衡规则" class="headerlink" title="1.4 修改负载均衡规则"></a>1.4 修改负载均衡规则</h2><h3 id="1-4-1-代码方式-全局的"><a href="#1-4-1-代码方式-全局的" class="headerlink" title="1.4.1 代码方式(全局的)"></a>1.4.1 代码方式(全局的)</h3><p>在order-service中的OrderApplication类中，定义一个新的IRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">randomRule</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-2-配置文件方式（针对微服务）"><a href="#1-4-2-配置文件方式（针对微服务）" class="headerlink" title="1.4.2 配置文件方式（针对微服务）"></a>1.4.2 配置文件方式（针对微服务）</h3><p>在order-service的application.yml文件中，添加新的配置也可以修改规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br><span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule#</span> <span class="hljs-string">负载均衡规则</span><br></code></pre></td></tr></table></figure><h2 id="1-5-饥饿加载"><a href="#1-5-饥饿加载" class="headerlink" title="1.5 饥饿加载"></a>1.5 饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时</p><h3 id="开启饥饿加载"><a href="#开启饥饿加载" class="headerlink" title="开启饥饿加载"></a>开启饥饿加载</h3><h3 id="指定饥饿加载的微服务名称"><a href="#指定饥饿加载的微服务名称" class="headerlink" title="指定饥饿加载的微服务名称"></a>指定饥饿加载的微服务名称</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br><span class="hljs-attr">eager-load:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启饥饿加载</span><br>  <span class="hljs-attr">clients:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment">#对指定的userservide这个服务饥饿加载</span><br></code></pre></td></tr></table></figure><h1 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h1><p><strong>Ribbon负载均衡规则</strong></p><ul><li><p>规则接口是IRule</p></li><li><p>默认实现是ZoneAvoidanceRule，根据zone选择服务列表，然后轮询</p></li></ul><p><strong>负载均衡自定义方式</strong></p><ul><li><p>代码方式：配置灵活，但修改时需要重新打包发布</p></li><li><p>配置方式：直观，方便，无需重新打包发布，但是无法做全局配置</p></li></ul><p><strong>饥饿加载</strong></p><ul><li><p>开启饥饿加载</p></li><li><p>指定饥饿加载的微服务名称</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Ribbon</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka注册中心</title>
    <link href="/2022/01/03/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <url>/2022/01/03/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Eureka注册中心"><a href="#1、Eureka注册中心" class="headerlink" title="1、Eureka注册中心"></a>1、Eureka注册中心</h1><p>主管服务注册与发现，也就是微服务的名称注册到Eureka，就可以通过Eureka找到微服务，而不需要修改服务调用的配置文件。</p><span id="more"></span><h2 id="1-1-服务调用产生的问题"><a href="#1-1-服务调用产生的问题" class="headerlink" title="1.1 服务调用产生的问题"></a>1.1 服务调用产生的问题</h2><ul><li><p>服务消费者该如何获取服务提供者的地址信息？</p></li><li><p>如果有多个服务提供者，消费者该如何选择？</p></li><li><p>消费者如何得知服务提供者的健康状态？</p></li></ul><h2 id="1-2-Eureka作用"><a href="#1-2-Eureka作用" class="headerlink" title="1.2 Eureka作用"></a>1.2 Eureka作用</h2><img src="/img/SpringCloud/eureka01.png" alt="" style="zoom:50%;" /><ul><li><p>消费者该如何获取服务提供者具体信息？</p></li><li><ul><li>服务提供者启动时向eureka注册自己的信息</li><li>eureka保存这些信息</li></ul></li><li><ul><li>消费者根据服务名称向eureka拉取提供者信息</li></ul></li><li><p>如果有多个服务提供者，消费者该如何选择？</p></li><li><ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li><p>消费者如何感知服务提供者健康状态？</p></li><li><ul><li>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li></ul></li><li><ul><li>消费者就可以拉取到最新的信息</li></ul></li></ul><h3 id="1-2-1-总结"><a href="#1-2-1-总结" class="headerlink" title="1.2.1 总结"></a>1.2.1 总结</h3><p>在Eureka架构中，微服务角色有两类：</p><ul><li><p>EurekaServer：服务端，注册中心</p></li><li><ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li><p>EurekaClient：客户端</p></li><li><ul><li>Provider：服务提供者，例如案例中的 user-service</li></ul></li><li><ul><li><ul><li>注册自己的信息到EurekaServer</li><li>每隔30秒向EurekaServer发送心跳</li></ul></li></ul></li><li><ul><li>consumer：服务消费者，例如案例中的 order-service</li></ul></li><li><ul><li><ul><li>根据服务名称从EurekaServer拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul><h2 id="1-3-搭建EurekaServer"><a href="#1-3-搭建EurekaServer" class="headerlink" title="1.3 搭建EurekaServer"></a>1.3 搭建EurekaServer</h2><h3 id="1-3-1-引入eureka-server依赖"><a href="#1-3-1-引入eureka-server依赖" class="headerlink" title="1.3.1 引入eureka-server依赖"></a>1.3.1 引入eureka-server依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2-添加-EnableEurekaServer注解"><a href="#1-3-2-添加-EnableEurekaServer注解" class="headerlink" title="1.3.2 添加@EnableEurekaServer注解"></a>1.3.2 添加@EnableEurekaServer注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaServerApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3-在application-yml中配置eureka地址"><a href="#1-3-3-在application-yml中配置eureka地址" class="headerlink" title="1.3.3 在application.yml中配置eureka地址"></a>1.3.3 在application.yml中配置eureka地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span>   <span class="hljs-comment">#端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span> <span class="hljs-comment">#服务名称</span><br><span class="hljs-comment">#配置eureka server</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#是否将自己注册到服务注册中心</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#是否从eureka中获取注册信息</span><br>    <span class="hljs-attr">service-url:</span> <span class="hljs-comment">#配置暴露给eureka Client 的请求地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><h2 id="1-4-服务注册"><a href="#1-4-服务注册" class="headerlink" title="1.4 服务注册"></a>1.4 服务注册</h2><h3 id="1-4-1-引入eureka-client依赖"><a href="#1-4-1-引入eureka-client依赖" class="headerlink" title="1.4.1 引入eureka-client依赖"></a>1.4.1 引入eureka-client依赖</h3><p>无论是消费者还是提供者，引入eureka-client依赖、知道eureka地址后，都可以完成服务注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--eurekaClient依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-2-在application-yml中配置eureka地址"><a href="#1-4-2-在application-yml中配置eureka地址" class="headerlink" title="1.4.2 在application.yml中配置eureka地址"></a>1.4.2 在application.yml中配置eureka地址</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 配置eureka注册地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:9000/eureka</span><br></code></pre></td></tr></table></figure><h2 id="1-5-服务发现"><a href="#1-5-服务发现" class="headerlink" title="1.5 服务发现"></a>1.5 服务发现</h2><h3 id="1-5-1-引入eureka-client依赖"><a href="#1-5-1-引入eureka-client依赖" class="headerlink" title="1.5.1 引入eureka-client依赖"></a>1.5.1 引入eureka-client依赖</h3><h3 id="1-5-2-在application-yml中配置eureka地址"><a href="#1-5-2-在application-yml中配置eureka地址" class="headerlink" title="1.5.2 在application.yml中配置eureka地址"></a>1.5.2 在application.yml中配置eureka地址</h3><h3 id="1-5-3-给RestTemplate添加-LoadBalanced-负载均衡-注解"><a href="#1-5-3-给RestTemplate添加-LoadBalanced-负载均衡-注解" class="headerlink" title="1.5.3 给RestTemplate添加@LoadBalanced(负载均衡)注解"></a>1.5.3 给RestTemplate添加@LoadBalanced(负载均衡)注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">*启动类中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-4-用服务提供者的服务名称远程调用"><a href="#1-5-4-用服务提供者的服务名称远程调用" class="headerlink" title="1.5.4 用服务提供者的服务名称远程调用"></a>1.5.4 用服务提供者的服务名称远程调用</h3><blockquote><p>点击<a href="https://github.com/cherishll-git/Cloud-Code/tree/master/SpringCloudEureka">这里</a>查看源码。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Eureka</tag>
      
      <tag>注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识SpringCloud与微服务</title>
    <link href="/2022/01/02/%E5%88%9D%E8%AF%86SpringCloud%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2022/01/02/%E5%88%9D%E8%AF%86SpringCloud%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>​    微服务架构在某种程度上实在SOA架构上的进一步发展</p><p>​    微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成<strong>一组</strong>小的服务，每个服务运行独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。</p><p>​    服务之间采用<strong>轻量级</strong>的通信机制互相沟通（通常是基于 HTTP 的 RESTful API ) 。每个服务都围绕着具体业务进行构建，并且能够被<strong>独立地部署</strong>到生产环境、类生产环境等。</p><span id="more"></span><h1 id="1、架构的了解"><a href="#1、架构的了解" class="headerlink" title="1、架构的了解"></a>1、架构的了解</h1><h2 id="1-1-特点"><a href="#1-1-特点" class="headerlink" title="1.1 特点"></a>1.1 特点</h2><p>​    优点：开发简单，适用于小型应用</p><p>​    缺点：不易扩展和维护，代码耦合</p><img src="/img/SpringCloud/cloud01.png" alt="" style="zoom:25%;" /><h2 id="1-2-分布式架构特点"><a href="#1-2-分布式架构特点" class="headerlink" title="1.2 分布式架构特点"></a>1.2 分布式架构特点</h2><p>​    松耦合、扩展性好，但是架构复杂，难度大。适合大型互联网项目。</p><p>​    微服务：一种良好架构设计的分布式方案</p><p>​    有点：拆分粒度小、服务更独立、耦合度更低</p><p>​    缺点：架构非常复杂，运维、监控、部署难度提高</p><img src="/img/SpringCloud/cloud02.png" alt="" style="zoom:35%;" /><h2 id="1-3-微服务架构"><a href="#1-3-微服务架构" class="headerlink" title="1.3 微服务架构"></a>1.3 微服务架构</h2><p>​    单一职责：微服务<strong>拆分粒度</strong>更小，每一个服务都对应唯一的业务能力，做到<strong>单一职责</strong>，避免重复业务开发</p><p>​    面向服务：微服务对外<strong>暴露</strong>业务接口</p><p>​    自治：团队独立、技术独立、数据独立、部署独立</p><p>​    隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</p><p>​    <strong>优点</strong>：拆分粒度更小、服务更独立、耦合度更低</p><p>​    <strong>缺点</strong>：架构非常复杂，运维、监控、部署难度提高</p><img src="/img/SpringCloud/cloud03.png" alt="" style="zoom:50%;" /><h1 id="2、微服务技术对比"><a href="#2、微服务技术对比" class="headerlink" title="2、微服务技术对比"></a>2、微服务技术对比</h1><p>在国内最知名的就是SpringCloud和阿里巴巴的Dubbo</p><table><thead><tr><th></th><th>Dubbo</th><th>SpringCloud</th><th>SpringCloudAlibaba</th></tr></thead><tbody><tr><td>注册中心</td><td>zookeeper、Redis</td><td>Eureka、Consul</td><td>Nacos、Eureka</td></tr><tr><td>服务远程调用</td><td>Dubbo协议</td><td>Feign（HTTP协议）</td><td>Dubbo、Feign</td></tr><tr><td>配置中心</td><td>无</td><td>SpringCloudConfig</td><td>Spring Cloud Config、Nacos</td></tr><tr><td>服务网关</td><td>无</td><td>SpringCloudGateway、zuul</td><td>SpringCloudGateway、Zuul</td></tr><tr><td>服务监控和保护</td><td>dubbo-admin，功能弱</td><td>Hystrix</td><td>Sentinel</td></tr></tbody></table><h2 id="2-1-SpringCloud"><a href="#2-1-SpringCloud" class="headerlink" title="2.1 SpringCloud"></a>2.1 SpringCloud</h2><p>SpringCloud是目前国内使用<strong>最广泛</strong>的微服务框架。<a href="https://spring.io/projects/spring-cloud">官网地址</a></p><p>SpringCloud集成了各种微服务功能组件，并<strong>基于SpringBoot</strong>实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</p><p><img src="/img/SpringCloud/cloud04.png"></p><h3 id="2-1-1-SpringCloud与SpringBoot版本兼容关系："><a href="#2-1-1-SpringCloud与SpringBoot版本兼容关系：" class="headerlink" title="2.1.1 SpringCloud与SpringBoot版本兼容关系："></a>2.1.1 SpringCloud与SpringBoot版本兼容关系：</h3><table><thead><tr><th>Release Train</th><th>Boot Version</th></tr></thead><tbody><tr><td>2020.0.x aka llford</td><td>2.4.x</td></tr><tr><td>Hoxton</td><td>2.2.x,2.3.x(Starting with SR5)</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table><h1 id="3、服务拆分与服务远程调用"><a href="#3、服务拆分与服务远程调用" class="headerlink" title="3、服务拆分与服务远程调用"></a>3、服务拆分与服务远程调用</h1><h2 id="3-1-服务拆分"><a href="#3-1-服务拆分" class="headerlink" title="3.1 服务拆分"></a>3.1 服务拆分</h2><p>​    <strong>单一职责：</strong>微服务需要根据业务模块拆分，做到单一职责,不要重复开发相同业务</p><p>​    <strong>面向服务</strong>：微服务可以将业务暴露为接口，供其它微服务使用</p><p>​    <strong>数据独立</strong>：不同微服务都应该有自己独立的数据库</p><h2 id="3-2-服务远程调用"><a href="#3-2-服务远程调用" class="headerlink" title="3.2 服务远程调用"></a>3.2 服务远程调用</h2><h3 id="3-2-1-基于RestTemplate发起Http请求"><a href="#3-2-1-基于RestTemplate发起Http请求" class="headerlink" title="3.2.1 基于RestTemplate发起Http请求"></a>3.2.1 基于RestTemplate发起Http请求</h3><p>http请求做远程调用是与语言无关的调用，只要知道对方的<strong>ip、端口、接口路径、请求参数</strong>即可。</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBootAOP记录操作日志</title>
    <link href="/2021/12/31/SpringBootAOP%E8%AE%B0%E5%BD%95%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    <url>/2021/12/31/SpringBootAOP%E8%AE%B0%E5%BD%95%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><p>AOP（Aspect Oriented Programming）称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，比如日志，事务，权限等待</p><span id="more"></span><h2 id="1-1-相关概念"><a href="#1-1-相关概念" class="headerlink" title="1.1 相关概念"></a>1.1 相关概念</h2><p><strong>横切关注点</strong>：对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p><p> <strong>Aspect(切面)</strong>: 通常是一个类，里面可以定义<strong>切入点</strong>和<strong>通知</strong></p><p> <strong>JointPoint(连接点)</strong>: 程序执行过程中明确的点，一般是方法的调用。被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p><p><strong>Advice(通知)</strong>:AOP在特定的切入点上执行的增强处理，有before(前置),after(后置),afterReturning(最终),afterThrowing(异常),around(环绕)</p><p><strong>Pointcut(切入点)</strong>: 就是带有通知的连接点，在程序中主要体现为书写切入点表达式</p><p>**weave(织入)**：将切面应用到目标对象并导致代理对象创建的过程</p><p><strong>introduction(引入)<strong>：在不修改代码的前提下，引入可以在</strong>运行期</strong>为类动态地添加一些方法或字段</p><p>**AOP代理(AOP Proxy)**：AOP框架创建的对象，代理就是目标对象的加强。Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理，前者基于接口，后者基于子类</p><p><strong>目标对象(Target Object)</strong>: 包含连接点的对象。也被称作被通知或被代理对象。</p><h2 id="1-2-AOP使用场景"><a href="#1-2-AOP使用场景" class="headerlink" title="1.2 AOP使用场景"></a>1.2 AOP使用场景</h2><blockquote><p><em>Authentication 权限</em><br> <em>Caching 缓存</em><br> <em>Context passing 内容传递</em><br> <em>Error handling 错误处理</em><br> <em>Lazy loading　懒加载</em><br> <em>Debugging　　调试</em><br> <em>logging, tracing, profiling and monitoring　记录跟踪　优化　校准</em><br> <em>Performance optimization　性能优化</em><br> <em>Persistence　　持久化</em><br> <em>Resource pooling　资源池</em><br> <em>Synchronization　同步</em><br> <em>Transactions 事务</em></p></blockquote><h1 id="2、AOP实现记录操作日志"><a href="#2、AOP实现记录操作日志" class="headerlink" title="2、AOP实现记录操作日志"></a>2、AOP实现记录操作日志</h1><h2 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h2><p>在Spring框架中，使用AOP配合自定义注解可以方便的实现用户操作的监控。首先搭建一个基本的Spring Boot Web环境<a href="https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html">开启Spring Boot</a>，然后引入必要依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- aop依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- oracle驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- druid数据源驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Mybatis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-自定义注解"><a href="#2-2-自定义注解" class="headerlink" title="2.2 自定义注解"></a>2.2 自定义注解</h2><p>定义一个方法级别的<code>@Log</code>注解，用于标注需要监控的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Log &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-创建表和实体"><a href="#2-3-创建表和实体" class="headerlink" title="2.3 创建表和实体"></a>2.3 创建表和实体</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sys_log(<br>id <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> AUTO_INCREMENT,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br>operation <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br><span class="hljs-type">time</span> <span class="hljs-type">int</span>(<span class="hljs-number">11</span>),<br><span class="hljs-keyword">method</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>),<br>params <span class="hljs-type">varchar</span>(<span class="hljs-number">500</span>),<br>ip <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>),<br>create_time datetime,<br><span class="hljs-keyword">primary</span> key(id) <span class="hljs-keyword">using</span> btree<br>)ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> Compact;<br>public class SysLog implements Serializable &#123;<br>    private <span class="hljs-type">int</span> id;<br>    private String username;<br>    private String operation;<br>    private <span class="hljs-type">int</span> <span class="hljs-type">time</span>;<br>    private String <span class="hljs-keyword">method</span>;<br>    private String params;<br>    private String ip;<br>    private <span class="hljs-type">Date</span> createTime;<br>    <br>    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>此处省略setter和getter方法<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-保存日志的方法"><a href="#2-4-保存日志的方法" class="headerlink" title="2.4 保存日志的方法"></a>2.4 保存日志的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysLogDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSysLog</span><span class="hljs-params">(SysLog sysLog)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SysLogMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lyq.dao.SysLogDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;saveSysLog&quot;</span>&gt;</span><br>        insert into sys_log (username,operation,time,method,params,ip,create_time)<br>        values (#&#123;username&#125;,#&#123;operation&#125;,#&#123;time&#125;,#&#123;method&#125;,#&#123;params&#125;,#&#123;ip&#125;,#&#123;createTime&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-切面和切点"><a href="#2-5-切面和切点" class="headerlink" title="2.5 切面和切点"></a>2.5 切面和切点</h2><p>定义一个LogAspect类，使用<code>@Aspect</code>标注让其成为一个切面，切点为使用<code>@Log</code>注解标注的方法，使用<code>@Around</code>环绕通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SysLogDao sysLogDao;<br>    <br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(com.lyq.annotation.Log)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pointCut</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pointCut()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint point)</span> </span>&#123;<br>        Object result = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">long</span> beginTime = System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 执行方法</span><br>            result = point.proceed();<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 执行时长(毫秒)</span><br>        <span class="hljs-keyword">long</span> time = System.currentTimeMillis() - beginTime;<br>        <span class="hljs-comment">// 保存日志</span><br>        saveLog(point, time);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveLog</span><span class="hljs-params">(ProceedingJoinPoint joinPoint, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        MethodSignature signature = (MethodSignature) joinPoint.getSignature();<br>        Method method = signature.getMethod();<br>        SysLog sysLog = <span class="hljs-keyword">new</span> SysLog();<br>        Log logAnnotation = method.getAnnotation(Log.class);<br>        <span class="hljs-keyword">if</span> (logAnnotation != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 注解上的描述</span><br>            sysLog.setOperation(logAnnotation.value());<br>        &#125;<br>        <span class="hljs-comment">// 请求的方法名</span><br>        String className = joinPoint.getTarget().getClass().getName();<br>        String methodName = signature.getName();<br>        sysLog.setMethod(className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()&quot;</span>);<br>        <span class="hljs-comment">// 请求的方法参数值</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-comment">// 请求的方法参数名称</span><br>        LocalVariableTableParameterNameDiscoverer u = <span class="hljs-keyword">new</span> LocalVariableTableParameterNameDiscoverer();<br>        String[] paramNames = u.getParameterNames(method);<br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-keyword">null</span> &amp;&amp; paramNames != <span class="hljs-keyword">null</span>) &#123;<br>            String params = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                params += <span class="hljs-string">&quot;  &quot;</span> + paramNames[i] + <span class="hljs-string">&quot;: &quot;</span> + args[i];<br>            &#125;<br>            sysLog.setParams(params);<br>        &#125;<br>        <span class="hljs-comment">// 获取request</span><br>        HttpServletRequest request = HttpContextUtils.getHttpServletRequest();<br>        <span class="hljs-comment">// 设置IP地址</span><br>        sysLog.setIp(IPUtils.getIpAddr(request));<br>        <span class="hljs-comment">// 模拟一个用户名</span><br>        sysLog.setUsername(<span class="hljs-string">&quot;testUser&quot;</span>);<br>        sysLog.setTime((<span class="hljs-keyword">int</span>) time);<br>        sysLog.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>        <span class="hljs-comment">// 保存系统日志</span><br>        sysLogDao.saveSysLog(sysLog);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/SpringBootAOP-Log">这里</a>查看项目源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot结合Mybatis+Druid多数据源</title>
    <link href="/2021/12/31/SpringBoot%E7%BB%93%E5%90%88Mybatis-Druid%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <url>/2021/12/31/SpringBoot%E7%BB%93%E5%90%88Mybatis-Druid%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h2 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h2><p>在Spring中配置MyBatis SqlSessionFactory的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis 的SqlSessionFactory --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所以实际上在Spring Boot中配置MyBatis多数据源的<strong>关键</strong>在于<strong>创建SqlSessionFactory</strong>的时候为其<strong>分配不同</strong>的<strong>数据源。</strong></p><h2 id="2、整合过程"><a href="#2、整合过程" class="headerlink" title="2、整合过程"></a>2、整合过程</h2><h3 id="2-1-引入相关依赖-pom-xml"><a href="#2-1-引入相关依赖-pom-xml" class="headerlink" title="2.1 引入相关依赖(pom.xml)"></a>2.1 引入相关依赖(pom.xml)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- oracle驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.oracle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ojdbc6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- druid数据源驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-多数据源配置"><a href="#2-2-多数据源配置" class="headerlink" title="2.2 多数据源配置"></a>2.2 多数据源配置</h3><h4 id="2-2-1-配置application-yml文件"><a href="#2-2-1-配置application-yml文件" class="headerlink" title="2.2.1 配置application.yml文件"></a>2.2.1 配置application.yml文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/web</span> <span class="hljs-comment">#访问路径以/web开始 如：localhost:8080/web/xxx </span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-comment">#数据库访问配置,使用druid数据源</span><br>      <span class="hljs-comment">#数据源1 mysql</span><br>      <span class="hljs-attr">mysql:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span> <span class="hljs-comment">#数据库访问配置，使用druid数据源</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span> <br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test_dev</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-comment">#数据源2 oracle</span><br>      <span class="hljs-attr">oracle:</span><br>        <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>        <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">oracle.jdbc.driver.OracleDriver</span><br>        <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:oracle:thin:@localhost:1521:ORCL</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">scott</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">ABab12</span><br><br>      <span class="hljs-comment"># 连接池配置</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span> <span class="hljs-comment"># 最小连接池数量</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span> <span class="hljs-comment"># 最大连接池数量</span><br>      <span class="hljs-comment"># 连接等待超时时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">30000</span> <br>      <span class="hljs-comment"># 配置检测可以关闭的空闲连接间隔时间</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 配置连接在池中的最小生存时间</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-comment"># 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-string">from</span> <span class="hljs-string">dual</span><br>      <span class="hljs-comment"># 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-open-prepared-statements:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, &#x27;wall&#x27;用于防火墙</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat,wall</span><br>      <span class="hljs-comment"># Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔</span><br>      <span class="hljs-attr">aop-patterns:</span> <span class="hljs-string">com.lyq.servie.*</span><br><br><br>      <span class="hljs-comment"># WebStatFilter配置</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 添加过滤规则</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-comment"># 忽略过滤的格式</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span><br><br>      <span class="hljs-comment"># StatViewServlet配置</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-comment"># 访问路径为/druid时，跳转到StatViewServlet</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-comment"># 是否能够重置数据</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-comment"># 需要账号密码才能访问控制台</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">druid</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-string">druid123</span><br>        <span class="hljs-comment"># IP白名单</span><br>        <span class="hljs-comment"># allow: 127.0.0.1</span><br>        <span class="hljs-comment">#　IP黑名单（共同存在时，deny优先于allow）</span><br>        <span class="hljs-comment"># deny: 192.168.1.218</span><br><br>      <span class="hljs-comment"># 配置StatFilter</span><br>      <span class="hljs-attr">filter:</span><br>        <span class="hljs-attr">stat:</span><br>          <span class="hljs-attr">log-slow-sql:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-创建数据源配置类"><a href="#2-2-2-创建数据源配置类" class="headerlink" title="2.2.2 创建数据源配置类"></a>2.2.2 创建数据源配置类</h4><p>MysqlDataSourceConfig.java 与 OrclDataSourceConfig.java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = MysqlDataSourceConfig.PACKAGE, sqlSessionFactoryRef = &quot;mysqlSqlSessionFactory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlDataSourceConfig</span> </span>&#123;<br>    <span class="hljs-comment">// mysqldao扫描路径</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PACKAGE = <span class="hljs-string">&quot;com.lyq.mysqldao&quot;</span>;<br>    <span class="hljs-comment">// mybatis mapper扫描路径</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MAPPER_LOCATION = <span class="hljs-string">&quot;classpath:mapper/mysql/*.xml&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Primary</span> 标志这个Bean，如果存在多个同类Bean候选时，该bean被优先考虑。</span><br><span class="hljs-comment">     *          多数据源的时候，必须要有一个主数据源，采用<span class="hljs-doctag">@Primary</span>标志该Bean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;mysqlDataSource&quot;)</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource.druid.mysql&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">mysqlDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> DruidDataSourceBuilder.create().build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;mysqlTransactionManager&quot;)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title">mysqlTransactionManager</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceTransactionManager(mysqlDataSource());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;mysqlSqlSessionFactory&quot;)</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">mysqlSqlSessionFactory</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@Qualifier(&quot;mysqlDataSource&quot;)</span> DataSource dataSource)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        sessionFactory.setDataSource(dataSource);<br>        <span class="hljs-comment">//如果不使用xml的方式配置mapper，则可以省去下面这行mapper location的配置。</span><br>        sessionFactory.setMapperLocations(<br>                <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver()<br>                        .getResources(MysqlDataSourceConfig.MAPPER_LOCATION));<br>        <span class="hljs-keyword">return</span> sessionFactory.getObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码配置了一个名为mysqlDataSource的数据源，对应application.yml中<em><strong>spring.datasource.druid.mysql*<strong>前缀配置的数据库。然后</strong>创建</strong>了一个名为</em>*mysqlSqlSessionFactory<strong>的Bean，并且注入了mysqldatasource。与此同时，还分别定了两个扫描路径PACKAGE和MAPPER_LOCATION，</strong>前者<strong>为Mysql数据库对应的</strong>mapper接口地址<strong>，</strong>后者<strong>为对应的</strong>mapper xml文件路径**。</p><p><em>@Primary</em>标志这个Bean如果在多个同类Bean候选时，该Bean优先被考虑。多数据源配置的时候，必须要有一个主数据源，用*@Primary*标志该Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(basePackages = OrclDataSourceConfig.PACKAGE,</span><br><span class="hljs-meta">sqlSessionFactoryRef = &quot;orclSqlSessionFactory&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrclDataSourceConfig</span> </span>&#123;<br><br><span class="hljs-comment">// oracledao扫描路径</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PACKAGE = <span class="hljs-string">&quot;com.lyq.orcldao&quot;</span>; <br><span class="hljs-comment">// mybatis mapper扫描路径</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MAPPER_LOCATION = <span class="hljs-string">&quot;classpath:mapper/orcl/*.xml&quot;</span>;<br><br><span class="hljs-meta">@Bean(name = &quot;orcldatasource&quot;)</span><br><span class="hljs-meta">@ConfigurationProperties(&quot;spring.datasource.druid.oracle&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">orclDataSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> DruidDataSourceBuilder.create().build();<br>    &#125;<br><br><span class="hljs-meta">@Bean(name = &quot;orclTransactionManager&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSourceTransactionManager <span class="hljs-title">oracleTransactionManager</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceTransactionManager(orclDataSource());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(name = &quot;orclSqlSessionFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">oracleSqlSessionFactory</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-meta">@Qualifier(&quot;orcldatasource&quot;)</span> DataSource dataSource)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">final</span> SqlSessionFactoryBean sessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBean();<br>        sessionFactory.setDataSource(dataSource);<br>        <span class="hljs-comment">//如果不使用xml的方式配置mapper，则可以省去下面这行mapper location的配置。</span><br>        sessionFactory.setMapperLocations(<br>                <span class="hljs-keyword">new</span> PathMatchingResourcePatternResolver()<br>                .getResources(OrclDataSourceConfig.MAPPER_LOCATION));<br>        <span class="hljs-keyword">return</span> sessionFactory.getObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-配置Dao层接口"><a href="#2-3-配置Dao层接口" class="headerlink" title="2.3 配置Dao层接口"></a>2.3 配置Dao层接口</h3><p>分别在com.springboot.mysqldao路径和com.springboot.oracledao路径下创建两个mapper接口：</p><p>MysqlStudentMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MysqlStudentMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByIds</span><span class="hljs-params">(String sno)</span></span>;<br>    <span class="hljs-function">Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(String sno)</span></span>;<br>    List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();<br>&#125;<br></code></pre></td></tr></table></figure><p>​    OrclStudentMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrclStudentMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByIds</span><span class="hljs-params">(String sno)</span></span>;<br>    <span class="hljs-function">Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(String sno)</span></span>;<br>    List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-创建Mapper接口对应的实现"><a href="#2-4-创建Mapper接口对应的实现" class="headerlink" title="2.4 创建Mapper接口对应的实现"></a>2.4 创建Mapper接口对应的实现</h3><p>在src/main/resource/mapper/mysql/路径下创建MysqlStudentMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lyq.mysqldao.MysqlStudentMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span>&gt;</span><br>        select * from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在src/main/resource/mapper/oracle/路径下创建OrclStudentMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lyq.orcldao.OrclStudentMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span>&gt;</span><br>        select * from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-控制层及业务层"><a href="#2-5-控制层及业务层" class="headerlink" title="2.5 控制层及业务层"></a>2.5 控制层及业务层</h3><p>不再赘述</p><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><p>新建一些测试数据，运行SpringBoot应用，发起对应请求</p><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/SpringBootMutiDataSource">这里</a>查看示例代码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Druid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Druid</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动装配</title>
    <link href="/2021/12/29/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <url>/2021/12/29/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    自动装配可简单理解为Spring自动读取配置类信息，并解析配置类中的Bean信息，然后将相关Bean初始化到IOC容器中。</p><span id="more"></span><h1 id="1、源码剖析"><a href="#1、源码剖析" class="headerlink" title="1、源码剖析"></a>1、源码剖析</h1><h2 id="1-1-查看springboot依赖"><a href="#1-1-查看springboot依赖" class="headerlink" title="1.1 查看springboot依赖"></a>1.1 查看springboot依赖</h2><p>以创建的SpringBoot项目为例。我们创建了maven项目，导入了<strong>springboot的依赖</strong>，只要是springboot项目，都有这个依赖</p><img src="/img/SpringBoot/autoconfig01.png" alt="autoconfig01" style="zoom:50%;" /><p>进入这个依赖：</p><img src="/img/SpringBoot/autoconfig02.png" alt="autoconfig01" style="zoom:50%;" /><p>这个里面还有一个父类的依赖，我们继续的进去：</p><img src="/img/SpringBoot/autoconfig03.png" alt="autoconfig01" style="zoom:50%;" /><p>就可以看到有各种各样的jar包，意思是只要导入一个springboot的版本依赖，他就会给你导入很多的jar包，我们使用哪个，拿出来就可以了，并且不需要写版本，因为父类已经给你控制了。</p><blockquote><p>spring-boot-dependencies: 核心依赖在父工程中</p></blockquote><p><strong>启动器</strong>：</p><p>​    说白了就是SpringBoot的启动场景，如spring-boot-starter-web，它会帮我们自动导入web环境所有依赖</p><p>​    springboot将所有的启动场景都变为一个个启动器</p><p>​    我们需要使用什么功能，只需要找到对应的启动器即可</p><h2 id="1-2-SpringBoot主程序"><a href="#1-2-SpringBoot主程序" class="headerlink" title="1.2 SpringBoot主程序"></a>1.2 SpringBoot主程序</h2><img src="/img/SpringBoot/autoconfig04.png" alt="autoconfig01" style="zoom:50%;" /><img src="/img/SpringBoot/autoconfig05.png" alt="autoconfig01" style="zoom:50%;" /><h3 id="1-2-1-SpringBootConfiguration注解"><a href="#1-2-1-SpringBootConfiguration注解" class="headerlink" title="1.2.1 SpringBootConfiguration注解"></a>1.2.1 SpringBootConfiguration注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该注解被<code>@Configuration</code>注解修饰。只要一个类被这个注解修饰了，那么这个类就是一个配置类。</p><p>而<code>@Configuration</code>注解又<strong>派生自</strong><code>@Component</code>注解，@Component注解表示被修饰的类是spring的一个组件</p><h3 id="1-2-2-EnableAutoConfiguration注解"><a href="#1-2-2-EnableAutoConfiguration注解" class="headerlink" title="1.2.2 EnableAutoConfiguration注解"></a>1.2.2 EnableAutoConfiguration注解</h3><p>名字的意思是 <strong>自动配置</strong>，我们走进去看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span> <span class="hljs-comment">//自动配置包，扫描并注册我们自己写的java类到spring容器</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><span class="hljs-comment">//向spring容器中注入AutoConfigurationImportSelector对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br><span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-1-AutoConfigurationPackage-注解"><a href="#1-2-2-1-AutoConfigurationPackage-注解" class="headerlink" title="1.2.2.1 AutoConfigurationPackage 注解"></a>1.2.2.1 AutoConfigurationPackage 注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>  查看AutoConfigurationPackages.Registrar.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Registrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span>, <span class="hljs-title">DeterminableImports</span> </span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>register(registry, <span class="hljs-keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]));<br>&#125;<br><span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>register(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));</code>这个代码中，其实就是完成了我们自己写的类的扫描。</p><p><code>new PackageImports(metadata).getPackageNames().toArray(new String[0])</code>获取到的是指定扫描包的路径，如果未明确指定，默认为主启动类所在的包名。</p><h4 id="1-2-2-2-分析AutoConfigurationImportSelector"><a href="#1-2-2-2-分析AutoConfigurationImportSelector" class="headerlink" title="1.2.2.2 分析AutoConfigurationImportSelector"></a>1.2.2.2 分析AutoConfigurationImportSelector</h4><p>这个类所做的，是将springboot提供好的自动配置装载进spring容器。</p><p>进入AutoConfigurationImportSelector查看源码。找到这个获取所有配置的方法：</p><img src="/img/SpringBoot/autoconfig06.png" alt="autoconfig01" style="zoom:50%;" /><img src="/img/SpringBoot/autoconfig07.png" alt="autoconfig01" style="zoom:50%;" /><p>这个返回的东西，是在哪里见过，在这里：</p><img src="/img/SpringBoot/autoconfig08.png" alt="autoconfig01" style="zoom:70%;" /><p>所以，springboot启动类的作用是：导入启动类下所有资源。</p><h3 id="1-2-3-spring-factories"><a href="#1-2-3-spring-factories" class="headerlink" title="1.2.3 spring.factories"></a>1.2.3 spring.factories</h3><img src="/img/SpringBoot/autoconfig09.png" alt="autoconfig01" style="zoom:70%;" /><p>​    就是从这个红框里面的文件夹下面导入东西，如果这个文件夹不在，那么就报出这个消息，这个消息的意思是没有这个文件夹，或者这个文件夹下面没东西。那么我们看看这个文件夹下面有什么呢？</p><p><img src="/img/SpringBoot/autoconfig10.png" alt="spring.factories"></p><p>一个路径，就是一个配置类，我们可以随便进入一个路径,例如我们进入<code>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-4-配置类是否生效"><a href="#1-2-4-配置类是否生效" class="headerlink" title="1.2.4 配置类是否生效"></a>1.2.4 配置类是否生效</h3><p>spring.factories 里面有很多的配置类的路径，对应的配置类有的却没有生效。那是由于缺少相关依赖，导致条件不足。</p><p>例如：进入<code>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</code></p><img src="/img/SpringBoot/autoconfig11.png" alt="autoconfig01" style="zoom:70%;" /><p>看见爆红，意思是这个依赖是没有加入，也就是start启动没有加入，只有在pom里面导入对应的依赖，才会加入，这个注解就是对依赖进行判断，只有pom里面导入了，判断成功之后才会加入</p><h1 id="2、模拟SpringBoot自动装配"><a href="#2、模拟SpringBoot自动装配" class="headerlink" title="2、模拟SpringBoot自动装配"></a>2、模拟SpringBoot自动装配</h1><p>新建一个Spring Boot工程，Spring Boot版本为2.3.9.RELEASE，<code>artifactId</code>为autoconfig，并引入<code>spring-boot-starter-web</code>依赖。项目结构如下所示:</p><img src="/img/SpringBoot/autoconfig12.png" alt="autoconfig01" style="zoom:50%;" /><h2 id="2-1-模式注解"><a href="#2-1-模式注解" class="headerlink" title="2.1 模式注解"></a>2.1 模式注解</h2><p>Stereotype Annotation俗称为模式注解，Spring中常见的模式注解有<code>@Service</code>，<code>@Repository</code>，<code>@Controller</code>等，它们都“派生”自<code>@Component</code>注解。我们都知道，凡是被<code>@Component</code>标注的类都会被Spring扫描并纳入到IOC容器中，那么由<code>@Component</code>派生的注解所标注的类也会被扫描到IOC容器中。下面我们主要通过自定义模式注解来了解<code>@Component</code>的“派生性”和“层次性”。</p><h3 id="2-1-1-Component-派生性"><a href="#2-1-1-Component-派生性" class="headerlink" title="2.1.1 @Component 派生性"></a>2.1.1 @Component 派生性</h3><p>在<code>com.lyq</code>下新建<code>annotation</code>包，然后创建一个<code>FirstLevelService</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@FirstLevelService</span>为<span class="hljs-doctag">@Component</span>派生出来的模式注解:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Component</span></span><br><span class="hljs-comment"> *    |__ <span class="hljs-doctag">@Service</span></span><br><span class="hljs-comment"> *            |___ <span class="hljs-doctag">@FirstLevelService</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FirstLevelService &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>com.lyq</code>下新建<code>service</code>包，然后创建一个<code>TestService</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FirstLevelService</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestService</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>com.lyq</code>下新建<code>bootstrap</code>包，然后创建一个<code>ServiceBootStrap</code>类，用于测试注册<code>TestService</code>并从IOC容器中获取它:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&quot;com.lyq.service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServcieBootStrap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//拿到spring容器</span><br>        ConfigurableApplicationContext context = <span class="hljs-keyword">new</span> SpringApplicationBuilder(ServcieBootStrap.class).web(WebApplicationType.NONE).run(args);<br>        TestService testService = context.getBean(<span class="hljs-string">&quot;testService&quot;</span>, TestService.class);<br>        System.out.println(<span class="hljs-string">&quot;FisrtService Bean:&quot;</span> + testService);<br>        context.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行该类的main方法，控制台输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">TestService</span> Bean:com.lyq.service.TestService@<span class="hljs-number">6</span>e<span class="hljs-number">6</span>f<span class="hljs-number">2380</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-Component-层次性"><a href="#2-1-2-Component-层次性" class="headerlink" title="2.1.2 @Component 层次性"></a>2.1.2 @Component 层次性</h3><p>我们在<code>com.lyq.annotation</code>路径下再创建一个<code>SecondLevelService</code>注解定义，该注解由上面的<code>@FirstLevelService</code>标注:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 层次性：</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Component</span></span><br><span class="hljs-comment"> *    |__ <span class="hljs-doctag">@Service</span></span><br><span class="hljs-comment"> *            |___ <span class="hljs-doctag">@FirstLevelService</span></span><br><span class="hljs-comment"> *                      |___ <span class="hljs-doctag">@SecondLevelService</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@FirstLevelService</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SecondLevelService &#123;<br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将<code>TestService</code>上的注解换成<code>@SecondLevelService</code>，然后再次运行<code>ServiceBootStrap</code>的main方法，输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TestService Bean:com.lyq.service.TestService@1530c739<br></code></pre></td></tr></table></figure><p>可见结果也是成功的。</p><blockquote><p>这里有一点需要注意的是：<code>@Component</code>注解只包含一个value属性定义，所以其“派生”的注解也只能包含一个value属性定义。</p></blockquote><h2 id="2-2-Enable模块驱动"><a href="#2-2-Enable模块驱动" class="headerlink" title="2.2 @Enable模块驱动"></a>2.2 @Enable模块驱动</h2><p><code>@Enable</code>模块驱动在Spring Framework 3.1后开始支持。这里的模块通俗的来说就是一些为了实现某个功能的组件的集合。通过<code>@Enable</code>模块驱动，我们可以开启相应的模块功能。</p><p><code>@Enable</code>模块驱动可以分为“注解驱动”和“接口编程”两种实现方式，下面逐一进行演示：</p><h3 id="2-2-1-注解驱动"><a href="#2-2-1-注解驱动" class="headerlink" title="2.2.1 注解驱动"></a>2.2.1 注解驱动</h3><h4 id="2-2-1-1-案例"><a href="#2-2-1-1-案例" class="headerlink" title="2.2.1.1 案例"></a>2.2.1.1 案例</h4><p>Spring中，基于注解驱动的示例可以查看<code>@EnableWebMvc</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>该注解通过<code>@Import</code>导入一个配置类`DelegatingWebMvcConfiguration</p><blockquote><p>基于注解驱动的<code>@Enable</code>模块驱动其实就是<strong>通过<code>@Import</code>来导入一个配置类</strong>，以此实现相应模块的组件注册，当这些组件注册到IOC容器中，这个模块对应的功能也就可以使用了。</p></blockquote><h4 id="2-2-1-2-实现"><a href="#2-2-1-2-实现" class="headerlink" title="2.2.1.2 实现"></a>2.2.1.2 实现</h4><p>我们来定义一个基于注解驱动的<code>@Enable</code>模块驱动。</p><p>在<code>com.lyq</code>下新建<code>configuration</code>包，然后创建一个<code>HelloWorldConfiguration</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello word!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>com.lyq.annotation</code>下创建一个<code>EnableHelloWorld</code>注解定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(HelloWorldConfiguration.class)</span><span class="hljs-comment">//导入刚刚创建的配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableHelloWorld &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>着在<code>com.lyq.bootstrap</code>下创建一个<code>TestEnableBootstap</code>启动类来测试<code>@EnableHelloWorld</code>注解是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableHelloWorld</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestEnableBootStrap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//拿到spring容器</span><br>        ConfigurableApplicationContext context = <span class="hljs-keyword">new</span> SpringApplicationBuilder(TestEnableBootStrap.class).web(WebApplicationType.NONE).run(args);<br>        String hello = context.getBean(<span class="hljs-string">&quot;hello&quot;</span>, String.class);<br>        System.out.println(<span class="hljs-string">&quot;hello Bean:&quot;</span> + hello);<br>        context.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行该类的main方法，控制台输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hello Bean:Hello word!<br></code></pre></td></tr></table></figure><h3 id="2-2-2-接口编程"><a href="#2-2-2-接口编程" class="headerlink" title="2.2.2 接口编程"></a>2.2.2 接口编程</h3><h4 id="2-2-2-1-案例"><a href="#2-2-2-1-案例" class="headerlink" title="2.2.2.1 案例"></a>2.2.2.1 案例</h4><p>除了使用上面这个方式外，我们还可以通过接口编程的方式来实现<code>@Enable</code>模块驱动。Spring中，基于接口编程方式的有<code>@EnableCaching</code>注解，查看其源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Import(&#123;CachingConfigurationSelector.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableCaching &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">proxyTargetClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">false</span></span>;<br><br>    <span class="hljs-function">AdviceMode <span class="hljs-title">mode</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> AdviceMode.PROXY</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">order</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 2147483647</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>EnableCaching</code>注解通过<code>@Import</code>导入了<code>CachingConfigurationSelector</code>类，该类间接<strong>实现</strong>了**<code>ImportSelector</code>接口**，在 <a href="https://mrbird.cc/Spring-Bean-Regist.html">深入学习Spring组件注册</a> 中，我们曾介绍了可以通过<code>ImportSelector</code>来实现组件注册。</p><blockquote><p>所以通过接口编程实现<code>@Enable</code>模块驱动的本质是：通过**<code>@Import</code>来导入接口<code>ImportSelector</code>实现类**，该实现类里可以定义需要注册到IOC容器中的组件，以此实现相应模块对应组件的注册。</p></blockquote><h4 id="2-2-2-2-实现"><a href="#2-2-2-2-实现" class="headerlink" title="2.2.2.2 实现"></a>2.2.2.2 实现</h4><p>在<code>com.lyq</code>下新建<code>selector</code>包，然后在该路径下新建一个<code>HelloWorldImportSelector</code>实现<code>ImportSelector</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportSelector</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[]&#123;HelloWorldConfiguration.class.getName()&#125;;<br>    &#125;<br><span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着我们修改<code>EnableHelloWorld</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//@Import(HelloWorldConfiguration.class)//注解驱动，导入一个配置类</span><br><span class="hljs-meta">@Import(HelloWorldImportSelector.class)</span><span class="hljs-comment">//接口编程，导入接口ImportSelector实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableHelloWorld &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行<code>TestEnableBootstap</code>的main方法，你会发现输出是一样的。</p><h2 id="2-3-自动装配"><a href="#2-3-自动装配" class="headerlink" title="2.3 自动装配"></a>2.3 自动装配</h2><h3 id="2-3-1-分析"><a href="#2-3-1-分析" class="headerlink" title="2.3.1 分析"></a>2.3.1 分析</h3><p>Spring Boot中的自动装配技术底层主要用到了下面这些技术:</p><ol><li>Spring 模式注解装配</li><li>Spring @Enable 模块装配</li><li>Spring 条件装配装（<a href="https://mrbird.cc/Spring-Bean-Regist.html">深入学习Spring组件注册</a>中有介绍）</li><li>Spring 工厂加载机制</li></ol><p>Spring 工厂加载机制的实现类为<code>SpringFactoriesLoader</code>，查看其源码：</p><img src="/img/SpringBoot/autoconfig13.png" alt="autoconfig01" style="zoom:50%;" /><p>该类的方法会读取META-INF目录下的spring.factories配置文件，我们查看spring-boot-autoconfigure-2.3.9.RELEASE.jar下的该文件。</p><p>当启动类被<code>@EnableAutoConfiguration</code>标注后，Spring会去扫描spring.factories中配置的所有类，看是否可以纳入到IOC容器中进行管理。</p><p>比如我们查看<code>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</code>的源码：</p><img src="/img/SpringBoot/autoconfig14.png" alt="autoconfig01" style="zoom:50%;" /><h3 id="2-3-2-实现"><a href="#2-3-2-实现" class="headerlink" title="2.3.2 实现"></a>2.3.2 实现</h3><p>新建一个配置类<code>HelloWorldAutoConfiguration</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableHelloWorld</span><br><span class="hljs-meta">@ConditionalOnProperty(name=&quot;hello_world&quot;,havingValue = &quot;true&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldAutoConfiguration</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在resources目录下新建META-INF目录，并创建spring.factories文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Auto Configure</span><br><span class="hljs-meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br><span class="hljs-string">com.lyq.configuration.HelloWorldAutoConfiguration</span><br></code></pre></td></tr></table></figure><p>接着在配置文件application.properties中添加<code>helloworld=true</code>配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hello_world</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>最后创建<code>EnableAutoConfigurationBootstrap</code>，测试下<code>HelloWorldAutoConfiguration</code>是否生效:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableAutoConfigurationBootstrap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ConfigurableApplicationContext context = <span class="hljs-keyword">new</span> SpringApplicationBuilder(EnableAutoConfigurationBootstrap.class)<br>                .web(WebApplicationType.NONE)<br>                .run(args);<br>        String hello = context.getBean(<span class="hljs-string">&quot;hello&quot;</span>, String.class);<br>        System.out.println(<span class="hljs-string">&quot;hello Bean: &quot;</span> + hello);<br>        context.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行该main方法，控制台输出如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hello Bean: Hello <span class="hljs-built_in">word</span>!<br></code></pre></td></tr></table></figure><h3 id="2-3-3-回顾"><a href="#2-3-3-回顾" class="headerlink" title="2.3.3 回顾"></a>2.3.3 回顾</h3><ol><li><p>Spring 的<strong>工厂加载机制</strong>会自动读取META-INF目录下spring.factories文件内容；</p></li><li><p>我们在spring.factories定义了：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=\<br>com<span class="hljs-selector-class">.lyq</span><span class="hljs-selector-class">.configuration</span>.HelloWorldAutoConfiguration<br></code></pre></td></tr></table></figure><p>我们在测试类上使用了<code>@EnableAutoConfiguration</code>注解标注，那么<code>HelloWorldAutoConfiguration</code>就会被Spring扫描，看是否符合要求，如果符合则纳入到IOC容器中；</p></li><li><p><code>HelloWorldAutoConfiguration</code>上的<code>@ConditionalOnProperty</code>的注解作用为：当配置文件中配置了<code>hello_world=true</code>（我们确实添加了这个配置，所以符合要求）则这个类符合扫描规则；<code>@EnableHelloWorld</code>注解是我们前面例子中自定义的模块驱动注解，其引入了hello这个Bean，所以IOC容器中便会存在hello这个Bean了；</p></li><li><p>通过上面的步骤，我们就可以通过上下文获取到hello这个Bean了。</p></li></ol><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/SpringBootAutoconfig">这里</a>查看源码。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中使用缓存</title>
    <link href="/2021/12/23/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2021/12/23/SpringBoot%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>​    在程序中可以使用缓存的技术来节省对数据库的开销。Spring Boot对缓存提供了很好的支持，我们几乎不用做过多的配置即可使用各种缓存实现。这里主要介绍Ehcache和Redis缓存实现。</p><span id="more"></span><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><h2 id="1-1-搭建一个SpringBoot项目"><a href="#1-1-搭建一个SpringBoot项目" class="headerlink" title="1.1 搭建一个SpringBoot项目"></a>1.1 搭建一个SpringBoot项目</h2><p>项目结构如下图所示：</p><img src="D:\git-data\CherishLLBlog\source\img\SpringBoot\springbootcache01.png" style="zoom:50%;" /><p>然后yml中配置日志输出级别以观察SQL的执行情况：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">lyq:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><blockquote><p>其中com.lyq.mapper为MyBatis的Mapper接口路径</p></blockquote><h2 id="1-2-编写测试方法"><a href="#1-2-编写测试方法" class="headerlink" title="1.2 编写测试方法"></a>1.2 编写测试方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = CacheApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Student student1 = <span class="hljs-keyword">this</span>.studentService.queryStuBySno(<span class="hljs-string">&quot;210&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;学号为[&quot;</span> + student1.getStuno() + <span class="hljs-string">&quot;]的学生姓名为：&quot;</span> + student1.getStuname());<br><br>        Student student2 = <span class="hljs-keyword">this</span>.studentService.queryStuBySno(<span class="hljs-string">&quot;210&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;学号为[&quot;</span> + student2.getStuno() + <span class="hljs-string">&quot;]的学生姓名为：&quot;</span> + student2.getStuname());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试运行<code>test()</code>方法，结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2021-12-23 15:52:32.532 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span>  <span class="hljs-attr">Preparing:</span> <span class="hljs-string">select</span> <span class="hljs-string">*</span> <span class="hljs-string">from</span> <span class="hljs-string">student</span> <span class="hljs-string">where</span> <span class="hljs-string">stuno</span> <span class="hljs-string">=</span> <span class="hljs-string">?</span><br><span class="hljs-number">2021-12-23 15:52:32.853 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span> <span class="hljs-attr">Parameters:</span> <span class="hljs-number">210</span><span class="hljs-string">(String)</span><br><span class="hljs-number">2021-12-23 15:52:32.894 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">&lt;==</span>      <span class="hljs-attr">Total:</span> <span class="hljs-number">1</span><br><span class="hljs-string">学号210的学生姓名为：zhangsan</span><br><span class="hljs-number">2021-12-23 15:52:32.896 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span>  <span class="hljs-attr">Preparing:</span> <span class="hljs-string">select</span> <span class="hljs-string">*</span> <span class="hljs-string">from</span> <span class="hljs-string">student</span> <span class="hljs-string">where</span> <span class="hljs-string">stuno</span> <span class="hljs-string">=</span> <span class="hljs-string">?</span><br><span class="hljs-number">2021-12-23 15:52:32.897 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span> <span class="hljs-attr">Parameters:</span> <span class="hljs-number">210</span><span class="hljs-string">(String)</span><br><span class="hljs-number">2021-12-23 15:52:32.900 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">23860</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">&lt;==</span>      <span class="hljs-attr">Total:</span> <span class="hljs-number">1</span><br><span class="hljs-string">学号210的学生姓名为：zhangsan</span><br></code></pre></td></tr></table></figure><p>可发现第二个查询虽然和第一个查询完全一样，但其还是对数据库进行了查询。接下来引入缓存来改善这个结果</p><h1 id="2、使用缓存"><a href="#2、使用缓存" class="headerlink" title="2、使用缓存"></a>2、使用缓存</h1><h2 id="2-1-缓存注解使用"><a href="#2-1-缓存注解使用" class="headerlink" title="2.1 缓存注解使用"></a>2.1 缓存注解使用</h2><h3 id="2-1-1-引入依赖"><a href="#2-1-1-引入依赖" class="headerlink" title="2.1.1 引入依赖"></a>2.1.1 引入依赖</h3><p>要开启Spring Boot的缓存功能，需要在pom中引入<code>spring-boot-starter-cache</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-开启缓存"><a href="#2-1-2-开启缓存" class="headerlink" title="2.1.2 开启缓存"></a>2.1.2 开启缓存</h3><p>在Spring Boot入口类中加入<code>@EnableCaching</code>注解开启缓存功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CacheApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-3-加入缓存注解"><a href="#2-1-3-加入缓存注解" class="headerlink" title="2.1.3 加入缓存注解"></a>2.1.3 加入缓存注解</h3><p>在StudentService接口中加入缓存注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheConfig(cacheNames = &quot;student&quot;)</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-meta">@CachePut(key = &quot;#p0.sno&quot;)</span><br>    <span class="hljs-function">Student <span class="hljs-title">updateStu</span><span class="hljs-params">(Student student)</span></span>;<br><br>    <span class="hljs-meta">@CacheEvict(key = &quot;#p0&quot;, allEntries = true)</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteStuBySno</span><span class="hljs-params">(String stuno)</span></span>;<br><br>    <span class="hljs-meta">@Cacheable(key = &quot;#p0&quot;)</span><br>    <span class="hljs-function">Student <span class="hljs-title">queryStuBySno</span><span class="hljs-params">(String stuno)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在StudentService接口中加入了<code>@CacheConfig</code>注解，queryStuBySno方法使用了注解<code>@Cacheable(key=&quot;#p0&quot;)</code>，即将id作为redis中的key值。当我们更新数据的时候，应该使用<code>@CachePut(key=&quot;#p0.sno&quot;)</code>进行缓存数据的更新，否则将查询到脏数据，因为该注解保存的是方法的返回值，所以这里应该返回Student。</p><p>其实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;studentService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">updateStu</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        studentMapper.updateStu(student);<br>        <span class="hljs-keyword">return</span> studentMapper.queryStuBySno(student.getStuno());<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStuBySno</span><span class="hljs-params">(String stuno)</span> </span>&#123;<br>        studentMapper.deleteStuBySno(stuno);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">queryStuBySno</span><span class="hljs-params">(String stuno)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentMapper.queryStuBySno(stuno);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再次执行测试类方法，执行结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2021-12-23 17:08:46.579 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">1468</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span>  <span class="hljs-attr">Preparing:</span> <span class="hljs-string">select</span> <span class="hljs-string">*</span> <span class="hljs-string">from</span> <span class="hljs-string">student</span> <span class="hljs-string">where</span> <span class="hljs-string">stuno</span> <span class="hljs-string">=</span> <span class="hljs-string">?</span><br><span class="hljs-number">2021-12-23 17:08:46.849 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">1468</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span> <span class="hljs-attr">Parameters:</span> <span class="hljs-number">210</span><span class="hljs-string">(String)</span><br><span class="hljs-number">2021-12-23 17:08:46.880 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">1468</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">&lt;==</span>      <span class="hljs-attr">Total:</span> <span class="hljs-number">1</span><br><span class="hljs-string">学号为[210]的学生姓名为：zhangsan</span><br><span class="hljs-string">学号为[210]的学生姓名为：zhangsan</span><br></code></pre></td></tr></table></figure><h2 id="2-2-缓存注解"><a href="#2-2-缓存注解" class="headerlink" title="2.2 缓存注解"></a>2.2 缓存注解</h2><p>在Spring Boot中可使用的缓存注解有：</p><h3 id="2-2-1-CacheConfig"><a href="#2-2-1-CacheConfig" class="headerlink" title="2.2.1 @CacheConfig"></a>2.2.1 <code>@CacheConfig</code></h3><p>主要用于配置该类中会用到的一些共用的缓存配置。在上面<code>@CacheConfig(cacheNames = &quot;student&quot;)</code>：配置了该数据访问对象中返回的内容将存储于名为student的缓存对象中，我们也可以不使用该注解，直接通过<code>@Cacheable</code>自己配置缓存集的名字来定义；</p><h3 id="2-2-2-Cacheable"><a href="#2-2-2-Cacheable" class="headerlink" title="2.2.2 @Cacheable"></a>2.2.2 <code>@Cacheable</code></h3><p>配置了queryStuBySno函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：</p><ul><li><code>value</code>、<code>cacheNames</code>：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了<code>@CacheConfig</code>，因此在Spring 3中原本必须有的value属性，也成为非必需项了；</li><li><code>key</code>：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：<code>@Cacheable(key = &quot;#p0&quot;)</code>：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache">参考</a>；</li><li><code>condition</code>：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：<code>@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)</code>，表示只有当第一个参数的长度小于3的时候才会被缓存；</li><li><code>unless</code>：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断；</li><li><code>keyGenerator</code>：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现<code>org.springframework.cache.interceptor.KeyGenerator</code>接口，并使用该参数来指定；</li><li><code>cacheManager</code>：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用；</li><li><code>cacheResolver</code>：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定；</li></ul><h3 id="2-2-3-CachePut"><a href="#2-2-3-CachePut" class="headerlink" title="2.2.3 @CachePut"></a>2.2.3 <code>@CachePut</code></h3><p>配置于函数上，能够根据参数定义条件来进行缓存，其缓存的是方法的返回值，它与<code>@Cacheable</code>不同的是，它每次都会真实调用函数，所以主要用于数据新增和修改操作上。它的参数与<code>@Cacheable</code>类似，具体功能可参考上面对<code>@Cacheable</code>参数的解析；</p><h3 id="2-2-4-CacheEvict"><a href="#2-2-4-CacheEvict" class="headerlink" title="2.2.4 @CacheEvict"></a>2.2.4 <code>@CacheEvict</code></h3><p>配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同<code>@Cacheable</code>一样的参数之外，它还有下面两个参数：</p><ul><li><code>allEntries</code>：非必需，默认为false。当为true时，会移除所有数据；</li><li><code>beforeInvocation</code>：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</li></ul><h2 id="2-3-缓存实现"><a href="#2-3-缓存实现" class="headerlink" title="2.3 缓存实现"></a>2.3 缓存实现</h2><p>要使用Spring Boot的缓存功能，还需要提供一个缓存的具体实现。Spring Boot根据下面的顺序去侦测缓存实现：</p><ul><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple</li></ul><p>除了按顺序侦测外，我们也可以通过配置属性<code>spring.cache.type</code>来强制指定。</p><p>接下来主要介绍基于Redis和Ehcache的缓存实现。</p><h3 id="2-3-1-Redis"><a href="#2-3-1-Redis" class="headerlink" title="2.3.1 Redis"></a>2.3.1 Redis</h3><h4 id="2-3-1-1-Redis准备工作"><a href="#2-3-1-1-Redis准备工作" class="headerlink" title="2.3.1.1 Redis准备工作"></a>2.3.1.1 Redis准备工作</h4><p><a href="https://github.com/MicrosoftArchive/redis/releases">下载Redis</a>，Redis 支持 32 位和 64 位。这个需要系统平台的实际情况选择，这里我基于docker应用容器框架，拉取redis最新镜像，并启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull redis #拉取镜像<br>docker run -p 6379:6379 -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes #启动redis容器<br><br>docker exec -it redis01 bash  #进入redis容器<br>redis-cli#执行redis-cli客户端命令<br></code></pre></td></tr></table></figure><img src="D:\git-data\CherishLLBlog\source\img\SpringBoot\springbootcache02.png" style="zoom:50%;" /><h4 id="2-3-1-2-引入依赖"><a href="#2-3-1-2-引入依赖" class="headerlink" title="2.3.1.2 引入依赖"></a>2.3.1.2 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-boot redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-1-3-配置redis"><a href="#2-3-1-3-配置redis" class="headerlink" title="2.3.1.3 配置redis"></a>2.3.1.3 配置redis</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>   <br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-comment"># Redis数据库索引（默认为0）</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># Redis服务器地址</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-comment"># Redis服务器连接端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">pool:</span><br>      <span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>      <span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">-1</span><br>      <span class="hljs-comment"># 连接池中的最大空闲连接</span><br>      <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>      <span class="hljs-comment"># 连接池中的最小空闲连接</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 连接超时时间（毫秒）</span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>更多关于Spring Boot Redis可<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html#">参考配置</a></p><h4 id="2-3-1-4-redis配置类"><a href="#2-3-1-4-redis配置类" class="headerlink" title="2.3.1.4 redis配置类"></a>2.3.1.4 redis配置类</h4><p>通常我们都使用Json序列化后存入Redis，而SpringBoot1.x和SpringBoot2.x版本在自定义<code>CacheManager</code>有很大的区别，需要自行研读源码。</p><p>在此简单说明，但不做源码详细分析。</p><p>在SpringBoot1.x中，<code>RedisCacheManager</code>是可以使用<code>RedisTemplate</code>作为参数注入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisTemplate redisTemplate)</span> </span>&#123;<br>RedisCacheManager cacheManager = <span class="hljs-keyword">new</span> RedisCacheManager(redisTemplate);<br>    <span class="hljs-keyword">return</span> cacheManager;<br>&#125; <br></code></pre></td></tr></table></figure><p>但在SpringBoot2.x中，有很大的不同，<code>RedisCacheManager</code>构造器如下，已经无法再使用<code>RedisTemplate</code>进行构造</p><p><img src="D:\git-data\CherishLLBlog\source\img\SpringBoot\springbootcache03.png"></p><p>官方文档中：</p><p><img src="D:\git-data\CherishLLBlog\source\img\SpringBoot\springbootcache04.png"></p><p>说明现在配置<code>RedisCacheManager</code>需要一个<code>RedisCacheConfiguration</code>来作为配置对象，通过<code>RedisCacheConfiguration</code>这个对象来指定对应的序列化策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br>    <span class="hljs-comment">// 自定义缓存key生成策略</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> KeyGenerator <span class="hljs-title">keyGenerator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> KeyGenerator() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">generate</span><span class="hljs-params">(Object target, java.lang.reflect.Method method, Object... params)</span> </span>&#123;<br>                StringBuffer sb = <span class="hljs-keyword">new</span> StringBuffer();<br>                sb.append(target.getClass().getName());<br>                sb.append(method.getName());<br>                <span class="hljs-keyword">for</span> (Object obj : params) &#123;<br>                    sb.append(obj.toString());<br>                &#125;<br>                <span class="hljs-keyword">return</span> sb.toString();<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 缓存管理器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        <span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><br>        <span class="hljs-comment">// 配置序列化（解决乱码的问题）</span><br>        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofDays(<span class="hljs-number">1</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br><br>        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000025216273">参考Redis的json序列化配置</a></p><h4 id="2-3-1-5-测试"><a href="#2-3-1-5-测试" class="headerlink" title="2.3.1.5 测试"></a>2.3.1.5 测试</h4><p>再次执行测试类方法，执行结果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2021-12-24 14:48:38.169 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">10052</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span>  <span class="hljs-attr">Preparing:</span> <span class="hljs-string">select</span> <span class="hljs-string">*</span> <span class="hljs-string">from</span> <span class="hljs-string">student</span> <span class="hljs-string">where</span> <span class="hljs-string">stuno</span> <span class="hljs-string">=</span> <span class="hljs-string">?</span><br><span class="hljs-number">2021-12-24 14:48:38.660 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">10052</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">==&gt;</span> <span class="hljs-attr">Parameters:</span> <span class="hljs-number">210</span><span class="hljs-string">(String)</span><br><span class="hljs-number">2021-12-24 14:48:38.701 </span><span class="hljs-string">DEBUG</span> <span class="hljs-number">10052</span> <span class="hljs-string">---</span> [           <span class="hljs-string">main</span>] <span class="hljs-attr">c.l.mapper.StudentMapper.queryStuBySno   :</span> <span class="hljs-string">&lt;==</span>      <span class="hljs-attr">Total:</span> <span class="hljs-number">1</span><br><span class="hljs-string">学号为[210]的学生姓名为：zhangsan</span><br><span class="hljs-string">学号为[210]的学生姓名为：zhangsan</span><br></code></pre></td></tr></table></figure><p><img src="D:\git-data\CherishLLBlog\source\img\SpringBoot\springbootcache05.png"></p><h3 id="2-3-2-Ehcache"><a href="#2-3-2-Ehcache" class="headerlink" title="2.3.2 Ehcache"></a>2.3.2 Ehcache</h3><h4 id="2-3-2-1-引入依赖"><a href="#2-3-2-1-引入依赖" class="headerlink" title="2.3.2.1 引入依赖"></a>2.3.2.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-2-新建ehcache-xml"><a href="#2-3-2-2-新建ehcache-xml" class="headerlink" title="2.3.2.2 新建ehcache.xml"></a>2.3.2.2 新建ehcache.xml</h4><p>在src/main/resources目录下新建ehcache.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;ehcache.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;student&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxEntriesLocalHeap</span>=<span class="hljs-string">&quot;2000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;3600&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">statistics</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="ehcache说明"><a href="#ehcache说明" class="headerlink" title="ehcache说明"></a>ehcache说明</h5><p>关于Ehcahe的一些说明：</p><ul><li><code>name</code>：缓存名称。</li><li><code>maxElementsInMemory</code>：缓存最大数目</li><li><code>maxElementsOnDisk</code>：硬盘最大缓存个数。</li><li><code>eternal</code>：对象是否永久有效，一但设置了，timeout将不起作用。</li><li><code>overflowToDisk</code>：是否保存到磁盘。</li><li><code>timeToIdleSeconds</code>:设置对象在失效前的允许闲置时间（单位：秒）。仅当<code>eternal=false</code>对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</li><li><code>timeToLiveSeconds</code>：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当<code>eternal=false</code>对象不是永久有效时使用，默认是0，也就是对象存活时间无穷大。</li><li><code>diskPersistent</code>：是否缓存虚拟机重启期数据，默认值为false。</li><li><code>diskSpoolBufferSizeMB</code>：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</li><li><code>diskExpiryThreadIntervalSeconds</code>：磁盘失效线程运行时间间隔，默认是120秒。</li><li><code>memoryStoreEvictionPolicy</code>：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li><li><code>clearOnFlush</code>：内存数量最大时是否清除。</li><li><code>memoryStoreEvictionPolicy：Ehcache</code>的三种清空策略：<strong>FIFO</strong>，first in first out，这个是大家最熟的，先进先出。<strong>LFU</strong>， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。<strong>LRU</strong>，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</li></ul><h4 id="2-3-2-3-配置application-yml"><a href="#2-3-2-3-配置application-yml" class="headerlink" title="2.3.2.3 配置application.yml"></a>2.3.2.3 配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">ehcache:</span><br>      <span class="hljs-attr">config:</span> <span class="hljs-string">&#x27;classpath:ehcache.xml&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-4-测试"><a href="#2-3-2-4-测试" class="headerlink" title="2.3.2.4 测试"></a>2.3.2.4 测试</h4><p>对于Ehcache来说，更新方法加不加<code>@CachePut</code>注解，结果都一样。</p><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/SpringBootCache">这里</a>查看源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos安装指南</title>
    <link href="/2021/12/16/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"/>
    <url>/2021/12/16/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Nacos安装指南"><a href="#Nacos安装指南" class="headerlink" title="Nacos安装指南"></a>Nacos安装指南</h1><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高</p><span id="more"></span><h1 id="1-Windows安装"><a href="#1-Windows安装" class="headerlink" title="1.Windows安装"></a>1.Windows安装</h1><p>开发阶段采用单机安装即可。</p><h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1.下载安装包"></a>1.1.下载安装包</h2><p>在Nacos的GitHub页面，提供有下载链接，可以下载编译好的Nacos服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>GitHub的Release下载页：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>将这个包解压到任意非中文目录下，如图：</p><img src="/img/SpringCloud/nacos01.png" alt="" style="zoom:60%;" /><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h2 id="1-3-端口配置"><a href="#1-3-端口配置" class="headerlink" title="1.3.端口配置"></a>1.3.端口配置</h2><p>Nacos的默认端口是8848，如果你电脑上的其它进程占用了8848端口，请先尝试关闭该进程。</p><p><strong>如果无法关闭占用8848端口的进程</strong>，也可以进入nacos的conf目录，修改配置文件中的端口：</p><p>application.properties文件，修改其中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">xxxx</span><br></code></pre></td></tr></table></figure><h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4.启动"></a>1.4.启动</h2><p>启动非常简单，进入bin目录，结构如下：</p><img src="/img/SpringCloud/nacos02.png" alt="" style="zoom:60%;" /><p>然后执行命令即可：</p><ul><li><p>windows命令：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">startup.<span class="hljs-built_in">cmd</span> -m standalone<br></code></pre></td></tr></table></figure></li></ul><p>执行后的效果如图：</p><img src="/img/SpringCloud/nacos03.png" alt="" style="zoom:60%;" /><h2 id="1-5-访问"><a href="#1-5-访问" class="headerlink" title="1.5.访问"></a>1.5.访问</h2><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF">http://127.0.0.1:8848/nacos即可</a>:</p><img src="/img/SpringCloud/nacos04.png" alt="" style="zoom:40%;" /><p>默认的账号和密码都是nacos，进入后：</p><img src="/img/SpringCloud/nacos05.png" alt="" style="zoom:50%;" /><h1 id="2-Linux安装"><a href="#2-Linux安装" class="headerlink" title="2.Linux安装"></a>2.Linux安装</h1><p>Linux或者Mac安装方式与Windows类似。</p><h2 id="2-1-安装JDK"><a href="#2-1-安装JDK" class="headerlink" title="2.1.安装JDK"></a>2.1.安装JDK</h2><p>Nacos依赖于JDK运行，索引Linux上也需要安装JDK才行。</p><p>上传jdk安装包：</p><p>上传到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf jdk-8u144-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>然后重命名为java</p><p>配置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/java<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br></code></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="2-2-上传安装包"><a href="#2-2-上传安装包" class="headerlink" title="2.2.上传安装包"></a>2.2.上传安装包</h2><p>上传nacos-server-1.4.1.tar.gz：</p><p>上传到Linux服务器的某个目录，例如<code>/usr/local/src</code>目录下：</p><h2 id="2-3-解压"><a href="#2-3-解压" class="headerlink" title="2.3.解压"></a>2.3.解压</h2><p>命令解压缩安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xvf nacos-server-1.4.1.tar.gz<br></code></pre></td></tr></table></figure><p>然后删除安装包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rm -rf nacos-server-1.4.1.tar.gz<br></code></pre></td></tr></table></figure><p>目录内部：</p><img src="/img/SpringCloud/nacos06.png" alt="" style="zoom:50%;" /><h2 id="2-4-端口配置"><a href="#2-4-端口配置" class="headerlink" title="2.4.端口配置"></a>2.4.端口配置</h2><p>与windows中类似</p><h2 id="2-5-启动"><a href="#2-5-启动" class="headerlink" title="2.5.启动"></a>2.5.启动</h2><p>在nacos/bin目录中，输入命令启动Nacos：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sh startup.sh -m standalone<br></code></pre></td></tr></table></figure><h1 id="3-Nacos的依赖"><a href="#3-Nacos的依赖" class="headerlink" title="3.Nacos的依赖"></a>3.Nacos的依赖</h1><p>父工程：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- nacos客户端依赖包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>注册中心</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义starterr</title>
    <link href="/2021/12/15/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starter/"/>
    <url>/2021/12/15/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89starter/</url>
    
    <content type="html"><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><p>SpringBoot 最强大的功能就是把我们常用的场景抽取成了一个个starter（场景启动器），我们通过引入springboot 为我提供的这些场景启动器，我们再进行少量的配置就能使用相应的功能。即使是这样，springboot也不能囊括我们所有的使用场景，往往我们需要自定义starter，来简化我们对springboot的使用。</p><span id="more"></span><p>我们将这些可独立于业务代码之外的功配置模块封装成一个个starter，复用的时候只需要将其在pom中引用依赖即可，SpringBoot为我们完成自动装配。</p><h1 id="2、自定义starter的命名规则"><a href="#2、自定义starter的命名规则" class="headerlink" title="2、自定义starter的命名规则"></a>2、自定义starter的命名规则</h1><p>SpringBoot提供的starter以<code>spring-boot-starter-xxx</code>的方式命名的。官方建议自定义的starter使用<code>xxx-spring-boot-starter</code>命名规则。以区分SpringBoot生态提供的starter。</p><h2 id="2-1-官方命名空间"><a href="#2-1-官方命名空间" class="headerlink" title="2.1 官方命名空间"></a>2.1 官方命名空间</h2><ul><li>前缀：spring-boot-starter-xxx</li><li>模式：spring-boot-starter-模块名</li><li>举例：spring-boot-starter-web、spring-boot-starter-jdbc</li></ul><h2 id="2-2-自定义命名空间"><a href="#2-2-自定义命名空间" class="headerlink" title="2.2 自定义命名空间"></a>2.2 <strong>自定义命名空间</strong></h2><ul><li>后缀：xxx-spring-boot-starter</li><li>模式：模块-spring-boot-starter</li><li>举例：mybatis-spring-boot-starter</li></ul><h1 id="3、自定义starter实现"><a href="#3、自定义starter实现" class="headerlink" title="3、自定义starter实现"></a>3、自定义starter实现</h1><h2 id="3-1-新建工程"><a href="#3-1-新建工程" class="headerlink" title="3.1 新建工程"></a>3.1 新建工程</h2><p>命名为demo-spring-boot-start</p><p>项目结构如下：</p><img src="/img/SpringBoot/starter01.png" alt="" style="zoom:50%;" /><h2 id="3-2-pom依赖"><a href="#3-2-pom依赖" class="headerlink" title="3.2 pom依赖"></a>3.2 pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lyq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot starter<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring默认使用yml中的配置，但有时候要用传统的xml或properties配置，就需要使用spring-boot-configuration-processor了--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--引入spring-boot-starter，所有starter的基本配合--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-定义配置信息映射的实体类"><a href="#3-3-定义配置信息映射的实体类" class="headerlink" title="3.3 定义配置信息映射的实体类"></a>3.3 定义配置信息映射的实体类</h2><p><code>@ConfigurationProperties(prefix = &quot;demo&quot;)</code> 它可以<strong>把相同前缀的配置信息通过配置项名称映射成实体类</strong>，比如我们这里指定 <code>prefix = &quot;demo&quot;</code> 这样，我们就能将以demo为前缀的配置项拿到了。</p><blockquote><p>ps：其实这个注解很强大，它<strong>不但能映射成String或基本类型的变量。还可以映射为List，Map等数据结构</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.starter.properties;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoProperties</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String sayWhat;<br>    <span class="hljs-keyword">private</span> String toWho;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSayWhat</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sayWhat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSayWhat</span><span class="hljs-params">(String sayWhat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sayWhat = sayWhat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getToWho</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> toWho;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setToWho</span><span class="hljs-params">(String toWho)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.toWho = toWho;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-定义一个service"><a href="#3-4-定义一个service" class="headerlink" title="3.4 定义一个service"></a>3.4 定义一个service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.starter.service;<br><br><span class="hljs-keyword">import</span> com.lyq.starter.properties.DemoProperties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoService</span> </span>&#123;<br>    DemoProperties demoProperties;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DemoProperties <span class="hljs-title">getDemoProperties</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> demoProperties;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDemoProperties</span><span class="hljs-params">(DemoProperties demoProperties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.demoProperties = demoProperties;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">say</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;对&quot;</span> + demoProperties.getToWho() + <span class="hljs-string">&quot;说:“&quot;</span> + demoProperties.getSayWhat() + <span class="hljs-string">&quot;”&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-定义配置类"><a href="#3-5-定义配置类" class="headerlink" title="3.5 定义配置类"></a>3.5 定义配置类</h2><p>这里，我们将<code>DemoService</code>类定义为一个<strong>Bean</strong>，交给Ioc容器。</p><ul><li><p><code>@Configuration</code>声明一个类作为配置类，代替xml文件。ps:通常 <code>@Configuration</code> 和 <code>@Bean</code> 是一起使用的</p></li><li><p><code>@EnableConfigurationProperties</code> 注解。该注解是用来开启对3步骤中 <code>@ConfigurationProperties</code> 注解配置Bean的支持。</p><p>当然了，也可以在 <code>@ConfigurationProperties</code> 注解的类上添加 <code>@Configuration</code> 或者 <code>@Component</code> 注解</p></li><li><p><code>@ConditionalOnProperty</code> 注解控制 <code>@Configuration</code> 是否生效。简单来说也就是我们可以通过在yml配置文件中控制 <code>@Configuration</code> 注解的配置类是否生效。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.starter.config;<br><br><span class="hljs-keyword">import</span> com.lyq.starter.properties.DemoProperties;<br><span class="hljs-keyword">import</span> com.lyq.starter.service.DemoService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableConfigurationProperties(DemoProperties.class)</span><br><span class="hljs-meta">@ConditionalOnProperty(</span><br><span class="hljs-meta">        prefix = &quot;demo&quot;,</span><br><span class="hljs-meta">        name = &quot;isopen&quot;,</span><br><span class="hljs-meta">        havingValue = &quot;true&quot;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoAutoconfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DemoProperties demoProperties;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DemoService <span class="hljs-title">demoService</span><span class="hljs-params">()</span></span>&#123;<br>        DemoService demoService = <span class="hljs-keyword">new</span> DemoService();<br>        demoService.setDemoProperties(demoProperties);<br>        <span class="hljs-keyword">return</span> demoService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-重点：创建spring-factories"><a href="#3-6-重点：创建spring-factories" class="headerlink" title="3.6 重点：创建spring.factories"></a>3.6 重点：创建spring.factories</h2><p>在resource目录下，新建META-INF文件夹，然后创建spring.factories文件。</p><p>目录结构如下：</p><img src="/img/SpringBoot/starter02.png" alt="" style="zoom:50%;" /><p>在该文件中加入如下配置，该配置指定上步骤中定义的配置类为自动装配的配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#指定自动装配的配置类</span><br><span class="hljs-meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="hljs-string">\</span><br><span class="hljs-string">  com.lyq.starter.config.DemoAutoconfiguration</span><br></code></pre></td></tr></table></figure><h2 id="3-7-生成starter"><a href="#3-7-生成starter" class="headerlink" title="3.7 生成starter"></a>3.7 生成starter</h2><p>在demo-spring-boot-starter工程中，使用terminal终端执行<code>mvn clean</code>、<code>mvn install</code></p><img src="/img/SpringBoot/starter03.png" alt="" style="zoom:50%;" /><p><strong>或者</strong>直接点击运行maven插件：</p><img src="/img/SpringBoot/starter04.png" alt="" style="zoom:50%;" /><p>至此，一个自定义的starter新鲜出炉。（本人配置了mvn本地仓库，看下本地仓库中starter）：</p><img src="/img/SpringBoot/starter05.png" alt="" style="zoom:50%;" /><h2 id="3-8-测试"><a href="#3-8-测试" class="headerlink" title="3.8 测试"></a>3.8 测试</h2><h3 id="3-8-1-新建测试工程"><a href="#3-8-1-新建测试工程" class="headerlink" title="3.8.1 新建测试工程"></a>3.8.1 新建测试工程</h3><h3 id="3-8-2-引入自定义start依赖"><a href="#3-8-2-引入自定义start依赖" class="headerlink" title="3.8.2 引入自定义start依赖"></a>3.8.2 引入自定义start依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lyq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-8-3-配置application-yml"><a href="#3-8-3-配置application-yml" class="headerlink" title="3.8.3 配置application.yml"></a>3.8.3 配置application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">demo:</span><br>  <span class="hljs-attr">isopen:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">to-who:</span> <span class="hljs-string">李四</span><br>  <span class="hljs-attr">say-what:</span> <span class="hljs-string">自定义的starter测试成功</span><br></code></pre></td></tr></table></figure><h3 id="3-8-4-编写测试类"><a href="#3-8-4-编写测试类" class="headerlink" title="3.8.4 编写测试类"></a>3.8.4 编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.controller;<br><br><span class="hljs-keyword">import</span> com.lyq.starter.service.DemoService;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StarterTestController</span> </span>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;demoService&quot;)</span><br>    <span class="hljs-keyword">private</span> DemoService demoService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/say&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayWhat</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> demoService.say(<span class="hljs-string">&quot;张三&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-8-5-验证结果"><a href="#3-8-5-验证结果" class="headerlink" title="3.8.5 验证结果"></a>3.8.5 验证结果</h3><img src="/img/SpringBoot/starter06.png" alt="" style="zoom:50%;" /><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/demo-spring-boot-starter">这里</a>查看源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SPI机制</title>
    <link href="/2021/12/09/SPI%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/12/09/SPI%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​    <strong>SPI</strong> ，全称为 <strong>Service Provider Interface</strong>，是一种<strong>服务发现机制</strong>。它通过在ClassPath路径下的META-INF/services文件夹查找文件，自动加载文件里所定义的类。是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。</p><span id="more"></span><p>Java SPI 实际上是<strong>“基于接口的编程＋策略模式＋配置文件”</strong>组合实现的<strong>动态加载机制</strong>。</p><h1 id="1、SPI具体约定"><a href="#1、SPI具体约定" class="headerlink" title="1、SPI具体约定"></a>1、SPI具体约定</h1><ul><li><p>当服务的提供者，提供了服务接口的一种实现之后，在jar包的<code>META-INF/services/</code>目录里目录下创建一个接口的<strong>全限定名</strong>的文件，该文件的内容是是实现类的全限定名；</p></li><li><p>当外部程序装配这个模块的时候，就能通过该jar包META-INF/services/里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。</p></li></ul><p>基于这样一个约定就能很好的找到服务接口的实现类，而不需要再代码里制定。jdk提供服务实现查找的一个工具类：<code>java.util.ServiceLoader</code></p><h1 id="2、JDK实现"><a href="#2、JDK实现" class="headerlink" title="2、JDK实现"></a>2、JDK实现</h1><h2 id="2-1-项目结构"><a href="#2-1-项目结构" class="headerlink" title="2.1 项目结构"></a>2.1 项目结构</h2><img src="/img/blogImg/spiProjectStruct.png" alt="" style="zoom:50%;" /><h2 id="2-2-SPI-Demo的代码："><a href="#2-2-SPI-Demo的代码：" class="headerlink" title="2.2 SPI Demo的代码："></a>2.2 SPI Demo的代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lyq.service;<br><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PayMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getPayMethod</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//两个实现类</span><br><span class="hljs-keyword">package</span> com.lyq.service.impl;<br><br><span class="hljs-keyword">import</span> com.lyq.service.PayMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AliPayMethod</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PayMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPayMethod</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;ali pay&quot;</span>);&#125;<br>&#125;<br><br>==============类分割线==================<br><br><span class="hljs-keyword">package</span> com.lyq.service.impl;<br><br><span class="hljs-keyword">import</span> com.lyq.service.PayMethod;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatPayMethod</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PayMethod</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getPayMethod</span><span class="hljs-params">()</span> </span>&#123;System.out.println(<span class="hljs-string">&quot;wechat pay&quot;</span>);&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后要在ClassPath路径下配置添加一个文件。文件名字是接口的<strong>全限定类名（com.lyq.service.PayMethod）</strong>，内容是<strong>实现类的全限定类名</strong>，多个实现类用<strong>换行符</strong>分隔。</p><p>com.lyq.service.PayMethod：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.lyq</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AliPayMethod</span><br>com<span class="hljs-selector-class">.lyq</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.impl</span>.WeChatPayMethod<br></code></pre></td></tr></table></figure><h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SPIDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 直接实例化耦合度较高</span><br><span class="hljs-comment">         */</span><br>        PayMethod aliPayMethod = <span class="hljs-keyword">new</span> AliPayMethod();<br>        aliPayMethod.getPayMethod();<br>        PayMethod weChatPayMethod = <span class="hljs-keyword">new</span> WeChatPayMethod();<br>        weChatPayMethod.getPayMethod();<br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 解耦灵活配置法</span><br><span class="hljs-comment">         */</span><br>        testSPI();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSPI</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//把我们的接口类型保存到ServiceLoader中 service变量</span><br>        <span class="hljs-comment">//创建了lazyIterator对象 （把我们的接口保存     保存我们的classLoader）</span><br>        ServiceLoader&lt;PayMethod&gt; load = ServiceLoader.load(PayMethod.class);<br><br>        <span class="hljs-comment">//或者Service.providers()方法获取我们的Iterator对象</span><br>        <span class="hljs-comment">//Iterator&lt;PayMethod&gt; iterator  = Service.providers(PayMethod.class);</span><br><br>        Iterator&lt;PayMethod&gt; iterator = load.iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            PayMethod next = iterator.next();<br>            next.getPayMethod();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过spi机制也可以像我们new对象一样获取实例！</strong>执行结果如下：</p><blockquote><p>ali pay<br>wechat pay</p><p>==========================</p><p>ali pay<br>wechat pay</p></blockquote><h2 id="2-4-分析"><a href="#2-4-分析" class="headerlink" title="2.4 分析"></a>2.4 分析</h2><p><strong>为什么不直接new而是用spi实现呢？</strong></p><p>​        与我们java设计相关，系统设计的各个抽象，往往有很多不同的实现方案，在面向的对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则；实际用时AliPayMethod支付，如果觉得AliPay支付方式不实用，需要替换一种实现，比如将我们的AliPay支付换成WeChatPay支付，就需要修改代码。</p><p>为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。</p><p>Java SPI就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。所以SPI的核心思想就是解耦。</p><h1 id="3、适用场景"><a href="#3、适用场景" class="headerlink" title="3、适用场景"></a>3、适用场景</h1><p>概括地说，适用于：调用者根据实际使用需要，启用、扩展、或者替换框架的实现策略</p><p>比较常见的例子：</p><ul><li>数据库驱动加载接口实现类的加载</li><li>JDBC加载不同类型数据库的驱动</li><li>日志门面接口实现类加载</li><li>SLF4J加载不同提供商的日志实现类</li></ul><p><strong>Spring</strong><br>Spring中大量使用了SPI, 比如：对servlet3.0规范对ServletContainerInitializer的实现、自动类型转换Type Conversion SPI(Converter SPI、Formatter SPI)等<br><strong>Dubbo</strong><br>Dubbo中也大量使用SPI的方式实现框架的扩展, 不过它对Java提供的原生SPI做了封装，允许用户扩展实现Filter接口</p><h1 id="4、源码分析"><a href="#4、源码分析" class="headerlink" title="4、源码分析"></a>4、源码分析</h1><h2 id="4-1-ServiceLoader-load-为例"><a href="#4-1-ServiceLoader-load-为例" class="headerlink" title="4.1 ServiceLoader.load()为例"></a>4.1 ServiceLoader.load()为例</h2><h3 id="4-1-1-成员变量"><a href="#4-1-1-成员变量" class="headerlink" title="4.1.1 成员变量"></a>4.1.1 成员变量</h3><p>首先看看ServiceLoader类的签名类的<strong>成员变量</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceLoader</span>&lt;<span class="hljs-title">S</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">S</span>&gt;</span>&#123;<br><br><span class="hljs-comment">//指定的配置文件的路径</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PREFIX = <span class="hljs-string">&quot;META-INF/services/&quot;</span>;<br><br>    <span class="hljs-comment">// 代表被加载的类或者接口</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;S&gt; service;<br><br>    <span class="hljs-comment">// 用于定位，加载和实例化providers的类加载器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader loader;<br><br>    <span class="hljs-comment">// 创建ServiceLoader时采用的访问控制上下文</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AccessControlContext acc;<br><br>     <span class="hljs-comment">// 缓存providers，按实例化的顺序排列</span><br>    <span class="hljs-keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br><br>    <span class="hljs-comment">// 懒查找迭代器 (内部类，真正加载服务类)</span><br>    <span class="hljs-keyword">private</span> LazyIterator lookupIterator;<br>   ......<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-2-Load"><a href="#4-1-2-Load" class="headerlink" title="4.1.2 Load"></a>4.1.2 Load</h3><p><code>ServiceLoader.load</code>方法内创建一个新的ServiceLoader，并实例化该类中的成员变量，主要包括四大步骤：</p><p>​    1、loader（ClassLoader类型，类加载器）</p><p>​    2、acc（AccessControlContext类型，访问控制器）</p><p>​    3、providers(LinkedHashMap&lt;String,S&gt;类型，用于缓存加载成功的类)</p><p>​    4、lookupIterator(实现迭代器功能)</p><p>重要源码提炼如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S&gt; <span class="hljs-function">ServiceLoader&lt;S&gt; <span class="hljs-title">load</span><span class="hljs-params">(Class&lt;S&gt; service)</span> </span>&#123;<br>ClassLoader cl = Thread.currentThread().getContextClassLoader();<br><span class="hljs-keyword">return</span> ServiceLoader.load(service, cl);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;S&gt; <span class="hljs-function">ServiceLoader&lt;S&gt; <span class="hljs-title">load</span><span class="hljs-params">(Class&lt;S&gt; service,ClassLoader loader)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServiceLoader&lt;&gt;(service, loader);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ServiceLoader</span><span class="hljs-params">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;<br>    <span class="hljs-comment">////要加载的接口</span><br>service = Objects.requireNonNull(svc, <span class="hljs-string">&quot;Service interface cannot be null&quot;</span>);<br>    <span class="hljs-comment">//类加载器</span><br>loader = (cl == <span class="hljs-keyword">null</span>) ? ClassLoader.getSystemClassLoader() : cl;<br>    <span class="hljs-comment">//访问控制器</span><br>    acc = (System.getSecurityManager() != <span class="hljs-keyword">null</span>) ? AccessController.getContext() : <span class="hljs-keyword">null</span>;<br>    <span class="hljs-comment">//先清空</span><br>    providers.clear();<br>    <span class="hljs-comment">//实例化内部类</span><br>    lookupIterator = <span class="hljs-keyword">new</span> LazyIterator(service, loader);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-3-查找实现类"><a href="#4-1-3-查找实现类" class="headerlink" title="4.1.3 查找实现类"></a>4.1.3 查找实现类</h3><p>查找实现类和创建实现类的过程，都在<code>LazyIterator</code>完成。当我们调用<code>iterator.hasNext</code>和<code>iterator.next</code>方法的时候，<strong>实际上</strong>调用的都是<strong>LazyIterator的相应方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Iterator&lt;S&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Iterator&lt;S&gt;() &#123;<br>        Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders = providers.entrySet().iterator();<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (knownProviders.hasNext())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">return</span> lookupIterator.hasNext();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> S <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            f (knownProviders.hasNext())<br>                    <span class="hljs-keyword">return</span> knownProviders.next().getValue();<br>            <span class="hljs-keyword">return</span> lookupIterator.next();<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点关注</strong><code>lookupIterator.hasNext()</code>方法，它最终会调用到<code>hasNextService</code>。读取<code>META-INF/services/</code>下的配置文件，获得所有能被实例化的类的名称，值得注意的是，<code>ServiceLoader</code>可以跨越jar包获取META-INF下的配置文件，具体加载配置的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">S</span>&gt;</span>&#123;<br>    Class&lt;S&gt; service;<br>    ClassLoader loader;<br>    Enumeration&lt;URL&gt; configs = <span class="hljs-keyword">null</span>;<br>    Iterator&lt;String&gt; pending = <span class="hljs-keyword">null</span>;<br>    String nextName = <span class="hljs-keyword">null</span>; <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNextService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//第二次调用的时候，已经解析完成了，直接返回</span><br>        <span class="hljs-keyword">if</span> (nextName != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (configs == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//META-INF/services/ 加上接口的全限定类名，就是文件服务类的文件</span><br>            <span class="hljs-comment">//META-INF/services/spi.WordParse</span><br>            String fullName = PREFIX + service.getName();<br>            <span class="hljs-comment">//将文件路径转成URL对象</span><br>            configs = loader.getResources(fullName);<br>        &#125;<br>        <span class="hljs-keyword">while</span> ((pending == <span class="hljs-keyword">null</span>) || !pending.hasNext()) &#123;<br>            <span class="hljs-comment">//解析URL文件对象，读取内容，最后返回</span><br>            pending = parse(service, configs.nextElement());<br>        &#125;<br>        <span class="hljs-comment">//拿到第一个实现类的类名</span><br>        nextName = pending.next();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 创建实例,见4.1.4</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> S <span class="hljs-title">nextService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//......</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-4-创建实例"><a href="#4-1-4-创建实例" class="headerlink" title="4.1.4 创建实例"></a>4.1.4 创建实例</h3><p>当然，调用next方法的时候，实际调用到的是<code>lookupIterator.nextService</code>。它通过反射的方式，创建实现类的实例并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">S</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> S <span class="hljs-title">nextService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!hasNextService()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchElementException();<br>        <span class="hljs-comment">//全限定类名</span><br>        String cn = nextName;<br>        nextName = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//创建类的Class对象</span><br>        Class&lt;?&gt; c = Class.forName(cn, <span class="hljs-keyword">false</span>, loader);<br>        <span class="hljs-comment">//通过newInstance实例化</span><br>        S p = service.cast(c.newInstance());<br>        <span class="hljs-comment">//放入集合，返回实例</span><br>        providers.put(cn, p);<br>        <span class="hljs-keyword">return</span> p; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、Spring实现"><a href="#5、Spring实现" class="headerlink" title="5、Spring实现"></a>5、Spring实现</h1><p>JDK中使用的是ServiceLoader</p><p>spring使用的是SpringFactoriesLoader实现，在org.springframework.core.io.support包中</p><p>文件路路径不同，spring配置在MATE-INF/spring.factories中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取某个已定义接口的实现类，跟JDK的ServiceLoader SPI相似度为90%</span><br>List&lt;BeanInfoFactory&gt; beanInfoFactories = SpringFactoriesLoader.loadFactories(BeanInfoFactory.class, classLoader);<br></code></pre></td></tr></table></figure><p>Spring通过classpath下META-INF/spring.factories配置文件，找到需要实例化的类进行实例化，其读取配置文件方式与jdk一致，但是比jdk更优势的地方是能指定bean进行实例化</p><h1 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h1><h2 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h2><p>使用Java SPI机制的优势是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，实现解耦。我们的应用程序可以根据实际业务情况启用框架扩展或替换框架组件。</p><p>相比使用提供接口jar包，供第三方服务模块实现接口的方式，SPI的方式，让我们不必关心接口的实现类的路径，可以不用通过下面的方式获取接口实现类：</p><ul><li>代码硬编码import 导入实现类</li><li>指定类全路径反射获取：例如在JDBC4.0之前，JDBC中获取数据库驱动类需要通过<code>Class.forName(“com.mysql.jdbc.Driver”)</code>，类似语句先动态加载数据库相关的驱动，然后再进行获取连接等的操作</li><li>第三方服务模块把接口实现类实例注册到指定地方，源框架从这个指定的地方访问实例</li></ul><p>通过SPI的方式，第三方服务模块实现接口后，在第三方的项目代码的META-INF/services目录下的配置文件指定实现类的全路径名，源码框架即可找到实现类。</p><h2 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h2><ul><li>虽然ServiceLoader也算是使用的延迟加载，但是基本只能通过遍历全部获取，也就是接口的实现类全部加载并实例化一遍。如果你并不想用某些实现类，它也被加载并实例化了，这就造成了浪费。获取某个实现类的方式不够灵活，只能通过Iterator形式获取，不能根据某个参数来获取对应的实现类。</li><li>多个并发多线程使用ServiceLoader类的实例是不安全的。</li></ul><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/JavaSPI">这里</a>查看源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2021/12/08/RabbitMQ/"/>
    <url>/2021/12/08/RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="1、快速入门"><a href="#1、快速入门" class="headerlink" title="1、快速入门"></a>1、快速入门</h1><h2 id="1-1-安装RabbitMQ"><a href="#1-1-安装RabbitMQ" class="headerlink" title="1.1 安装RabbitMQ"></a>1.1 安装RabbitMQ</h2><h3 id="1-1-1-基于docker安装："><a href="#1-1-1-基于docker安装：" class="headerlink" title="1.1.1 基于docker安装："></a>1.1.1 基于docker安装：</h3><p><strong>下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rabbitmq:3-management<br></code></pre></td></tr></table></figure><p><strong>启动MQ</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --hostname my-rabbit --name rabbitmq -e RABBITMQ_DEFAULT_USER=cherishll -e RABBITMQ_DEFAULT_PASS=123123 -p 15672:15672 -p 5672:5672 rabbitmq:3-management<br></code></pre></td></tr></table></figure><blockquote><p>–hostname 配置的主机名</p><p>-p 15672:15672 rabbitMQ管理平台的端口</p><p>-p 5672:5672 消息通信的端口</p></blockquote><p>启动后访问图形界面 localhost:15672</p><h3 id="1-1-2-MQ的基本结构"><a href="#1-1-2-MQ的基本结构" class="headerlink" title="1.1.2 MQ的基本结构"></a>1.1.2 MQ的基本结构</h3><p><img src="/img/blogImg/image-20210717162752376.png" alt="MQ基本结构"></p><h3 id="1-1-3-RabbitMQ中的角色"><a href="#1-1-3-RabbitMQ中的角色" class="headerlink" title="1.1.3 RabbitMQ中的角色"></a>1.1.3 RabbitMQ中的角色</h3><ul><li>publisher：生产者（负责发布消息）</li><li>consumer：消费者（负责订阅消息）</li><li>exchange：交换机，负责消息路由</li><li>queue：队列，负责接受并缓存消息</li><li>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离</li></ul><h2 id="1-2-RabbitMQ消息模型"><a href="#1-2-RabbitMQ消息模型" class="headerlink" title="1.2 RabbitMQ消息模型"></a>1.2 RabbitMQ消息模型</h2><p>RabbitMQ<a href="https://www.rabbitmq.com/getstarted.html">官方</a>提供了5个不同的Demo示例，对应了不同的消息模型：</p><ul><li><p>基本消息队列（BasicQueue）</p></li><li><p>工作消息队列（WorkQueue）</p><p><img src="/img/blogImg/mqdemo01.png" alt="demo"></p></li></ul><p>发布订阅（Publish、Subscribe），又根据交换机类型不同分为三种：</p><ul><li><p>Fanout Exchange：广播</p></li><li><p>Direct Exchange：路由</p></li><li><p>Topic Exchange：主题</p><p><img src="/img/blogImg/mqdemo02.png" alt="demo02"></p></li></ul><h2 id="1-3-RabbitMQ入门案例"><a href="#1-3-RabbitMQ入门案例" class="headerlink" title="1.3 RabbitMQ入门案例"></a>1.3 RabbitMQ入门案例</h2><h3 id="1-3-1-Demo中的Hello-World案例"><a href="#1-3-1-Demo中的Hello-World案例" class="headerlink" title="1.3.1 Demo中的Hello World案例"></a>1.3.1 Demo中的Hello World案例</h3><h4 id="1-3-1-1项目结构"><a href="#1-3-1-1项目结构" class="headerlink" title="1.3.1.1项目结构"></a>1.3.1.1项目结构</h4><p>包括三部分：</p><ul><li>mq-demo：父工程，管理项目依赖</li><li>publisher：消息的发送者</li><li>consumer：消息的消费者</li></ul><p>​    <img src="/img/blogImg/mqdemocode.png" alt="项目结构" style="zoom:50%;" /></p><p>​    父工程引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-1-2-简单队列模式的模型"><a href="#1-3-1-2-简单队列模式的模型" class="headerlink" title="1.3.1.2 简单队列模式的模型"></a>1.3.1.2 简单队列模式的模型</h4><p><img src="/img/blogImg/image-20210717163434647.png" alt="模型"></p><p>官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p><ul><li>publisher：消息发布者，将消息发送到队列queue</li><li>queue：消息队列，负责接受并缓存消息</li><li>consumer：订阅队列，处理队列中的消息</li></ul><h4 id="1-3-1-3-publisher实现"><a href="#1-3-1-3-publisher实现" class="headerlink" title="1.3.1.3 publisher实现"></a>1.3.1.3 publisher实现</h4><ul><li><p>建立连接</p></li><li><p>创建Channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel发送消息</p></li><li><p>关闭连接和channel</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PublisherTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendMessage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        ConnectionFactory factory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;cherishll&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123123&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        Connection connection = factory.newConnection();<br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 3.创建队列</span><br>        String queueName = <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 4.发送消息</span><br>        String message = <span class="hljs-string">&quot;hello, rabbitmq!&quot;</span>;<br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, queueName, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;发送消息成功：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br>        <span class="hljs-comment">// 5.关闭通道和连接</span><br>        channel.close();<br>        connection.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-3-1-4-consumer实现"><a href="#1-3-1-4-consumer实现" class="headerlink" title="1.3.1.4 consumer实现"></a>1.3.1.4 consumer实现</h4><ul><li>建立连接</li><li>创建Channel</li><li>利用channel声明队列</li><li>订阅消息<ul><li>定义consumer的消费行为handleDelivery()</li><li>利用channel将消费者与队列绑定</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">// 1.建立连接</span><br>        ConnectionFactory factory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span><br>        factory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        factory.setPort(<span class="hljs-number">5672</span>);<br>        factory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        factory.setUsername(<span class="hljs-string">&quot;cherishll&quot;</span>);<br>        factory.setPassword(<span class="hljs-string">&quot;123123&quot;</span>);<br>        <span class="hljs-comment">// 1.2.建立连接</span><br>        Connection connection = factory.newConnection();<br>        <span class="hljs-comment">// 2.创建通道Channel</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 3.创建队列</span><br>        String queueName = <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        channel.queueDeclare(queueName, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-comment">// 4.订阅消息</span><br>        channel.basicConsume(queueName, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope,</span></span><br><span class="hljs-params"><span class="hljs-function">                                       AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">// 5.处理消息</span><br>                String message = <span class="hljs-keyword">new</span> String(body);<br>                System.out.println(<span class="hljs-string">&quot;接收到消息：【&quot;</span> + message + <span class="hljs-string">&quot;】&quot;</span>);<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">&quot;等待接收消息。。。。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-2-总结"><a href="#1-3-2-总结" class="headerlink" title="1.3.2 总结"></a>1.3.2 总结</h3><p>基本消息队列的消息发送流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>利用channel向队列发送消息</p></li></ol><p>基本消息队列的消息接收流程：</p><ol><li><p>建立connection</p></li><li><p>创建channel</p></li><li><p>利用channel声明队列</p></li><li><p>定义consumer的消费行为handleDelivery()</p></li><li><p>利用channel将消费者与队列绑定</p></li></ol><h1 id="2、SpringAMQP"><a href="#2、SpringAMQP" class="headerlink" title="2、SpringAMQP"></a>2、SpringAMQP</h1><p>SpringAmqp的<a href="https://spring.io/projects/spring-amqp">官方地址</a></p><p>SpringAMQP是基于RabbitMQ封装的一套API规范，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。提供了模板来发送和接收消息，包含两个部分，其中spring-amqp是基础抽象类，spring-rabbit是底层的默认实现。</p><p>SpringAMQP提供了三个功能：</p><ul><li>自动声明队列、交换机及其绑定关系</li><li>基于注解的监听器模式，异步接收消息</li><li>封装了RabbitTemplate工具，用于发送消息 </li></ul><h2 id="2-1-Basic-Queue简单队列模型"><a href="#2-1-Basic-Queue简单队列模型" class="headerlink" title="2.1 Basic Queue简单队列模型"></a>2.1 Basic Queue简单队列模型</h2><h3 id="2-1-1-父工程引入AMQP依赖"><a href="#2-1-1-父工程引入AMQP依赖" class="headerlink" title="2.1.1 父工程引入AMQP依赖"></a>2.1.1 父工程引入AMQP依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-消息发送"><a href="#2-1-2-消息发送" class="headerlink" title="2.1.2 消息发送"></a>2.1.2 消息发送</h3><h4 id="2-1-2-1-配置application-yml"><a href="#2-1-2-1-配置application-yml" class="headerlink" title="2.1.2.1 配置application.yml"></a>2.1.2.1 配置application.yml</h4><p>​    首先配置MQ地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">cherishll</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><h4 id="2-1-2-2-编写测试类"><a href="#2-1-2-2-编写测试类" class="headerlink" title="2.1.2.2 编写测试类"></a>2.1.2.2 编写测试类</h4><p>在publisher服务中，编写测试类SpringAMQPTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringAmqpTest</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSimpleQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        String queueName = <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        String message = <span class="hljs-string">&quot;hello, spring amqp!&quot;</span>;<br>        <span class="hljs-comment">// 发送消息</span><br>        rabbitTemplate.convertAndSend(queueName, message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-3-消息接收"><a href="#2-1-3-消息接收" class="headerlink" title="2.1.3 消息接收"></a>2.1.3 消息接收</h3><h4 id="2-1-3-1-配置application-yml"><a href="#2-1-3-1-配置application-yml" class="headerlink" title="2.1.3.1 配置application.yml"></a>2.1.3.1 配置application.yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-comment"># 主机名</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span> <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span> <span class="hljs-comment"># 虚拟主机</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">cherishll</span> <span class="hljs-comment"># 用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123123</span> <span class="hljs-comment"># 密码</span><br></code></pre></td></tr></table></figure><h4 id="2-1-3-2-编写Rabbit监听"><a href="#2-1-3-2-编写Rabbit监听" class="headerlink" title="2.1.3.2 编写Rabbit监听"></a>2.1.3.2 编写Rabbit监听</h4><p>在consumer服务的<code>cn.lyq.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringRabbitListener</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenSimpleQueueMessage</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-4-测试"><a href="#2-1-4-测试" class="headerlink" title="2.1.4 测试"></a>2.1.4 测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息</p><h2 id="2-2-Work-Queue任务模型"><a href="#2-2-Work-Queue任务模型" class="headerlink" title="2.2 Work Queue任务模型"></a>2.2 Work Queue任务模型</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p><p><img src="/img/blogImg/workQueue.png" alt="workQueue"></p><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。</p><h3 id="2-2-1-消息发送"><a href="#2-2-1-消息发送" class="headerlink" title="2.2.1 消息发送"></a>2.2.1 消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。</p><p>在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向队列中不停发送消息，模拟消息堆积。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testWorkQueue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-comment">// 队列名称</span><br>        String queueName = <span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        <span class="hljs-comment">// 消息</span><br>        String message = <span class="hljs-string">&quot;hello, message_&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            <span class="hljs-comment">// 发送消息</span><br>            rabbitTemplate.convertAndSend(queueName, message + i);<br>            Thread.sleep(<span class="hljs-number">20</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-消息接收"><a href="#2-2-2-消息接收" class="headerlink" title="2.2.2 消息接收"></a>2.2.2 消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenWorkQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenWorkQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span> + LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。</p><h3 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3 测试"></a>2.2.3 测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。</p><p>可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。</p><p>也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。</p><h3 id="2-2-4-能者多劳"><a href="#2-2-4-能者多劳" class="headerlink" title="2.2.4 能者多劳"></a>2.2.4 能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">listener:</span><br>      <span class="hljs-attr">simple:</span><br>        <span class="hljs-attr">prefetch:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span><br></code></pre></td></tr></table></figure><h3 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5 总结"></a>2.2.5 总结</h3><p>Work模型的使用：</p><ul><li>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</li><li>通过设置prefetch来控制消费者预取的消息数量</li></ul><h2 id="2-3-发布-订阅"><a href="#2-3-发布-订阅" class="headerlink" title="2.3 发布/订阅"></a>2.3 发布/订阅</h2><p>发布订阅的模型如图：</p><p><img src="/img/blogImg/publisherAndConsumer.png" alt="发布订阅"></p><p>可以看到，在订阅模型中，多了一个<strong>exchange角色</strong>，而且过程略有变化：</p><ul><li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li>Consumer：消费者，与以前一样，订阅队列，没有变化</li><li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="2-4-Fanout"><a href="#2-4-Fanout" class="headerlink" title="2.4 Fanout"></a>2.4 Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。</p><p><img src="/img/blogImg/fanout.png" alt="fanoutQueue"></p><p>在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 exc.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机exc.fanout</li></ul><h3 id="2-4-1-声明队列和交换机"><a href="#2-4-1-声明队列和交换机" class="headerlink" title="2.4.1 声明队列和交换机"></a>2.4.1 声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：</p><p><img src="/img/blogImg/image-20210717165552676.png" alt="声明"></p><p>在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FanoutConfig</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 声明交换机</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Fanout类型交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title">fanoutExchange</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(<span class="hljs-string">&quot;exc.fanout&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第1个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">fanoutQueue1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">bindingQueue1</span><span class="hljs-params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 第2个队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">fanoutQueue2</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 绑定队列和交换机</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">bindingQueue2</span><span class="hljs-params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-4-2-消息发送"><a href="#2-4-2-消息发送" class="headerlink" title="2.4.2 消息发送"></a>2.4.2 消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFanoutExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 队列名称</span><br>    String exchangeName = <span class="hljs-string">&quot;exc.fanout&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    String message = <span class="hljs-string">&quot;hello, everyone!&quot;</span>;<br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-3-消息接收"><a href="#2-4-3-消息接收" class="headerlink" title="2.4.3 消息接收"></a>2.4.3 消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-总结"><a href="#2-4-4-总结" class="headerlink" title="2.4.4 总结"></a>2.4.4 总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li>Queue</li><li>FanoutExchange</li><li>Binding</li></ul><h2 id="2-5-Direct"><a href="#2-5-Direct" class="headerlink" title="2.5 Direct"></a>2.5 Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</p><p><img src="/img/blogImg/directqueue.png" alt="directQueue"></p><p>在Direct模型下：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><strong>案例需求如下</strong>：</p><ol><li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li><li>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li><li>在publisher中编写测试方法，向exc. direct发送消息</li></ol><h3 id="2-5-1-声明队列和交换机（基于注解）"><a href="#2-5-1-声明队列和交换机（基于注解）" class="headerlink" title="2.5.1 声明队列和交换机（基于注解）"></a>2.5.1 声明队列和交换机（基于注解）</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。</p><p>在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;exc.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenDirectQueue1</span><span class="hljs-params">(String msg)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;exc.direct&quot;, type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span><br><span class="hljs-meta">))</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenDirectQueue2</span><span class="hljs-params">(String msg)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-2-消息发送"><a href="#2-5-2-消息发送" class="headerlink" title="2.5.2 消息发送"></a>2.5.2 消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendDirectExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    String exchangeName = <span class="hljs-string">&quot;exc.direct&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    String message = <span class="hljs-string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;red&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-3-总结"><a href="#2-5-3-总结" class="headerlink" title="2.5.3 总结"></a>2.5.3 总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li>@QueueBinding</li><li>@Queue</li><li>@Exchange</li></ul><h2 id="2-6-Topic"><a href="#2-6-Topic" class="headerlink" title="2.6 Topic"></a>2.6 Topic</h2><h3 id="2-6-1-说明"><a href="#2-6-1-说明" class="headerlink" title="2.6.1 说明"></a>2.6.1 说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code></p><p><code>item.*</code>：只能匹配<code>item.spu</code></p><p>图示：</p><p> <img src="/img/blogImg/toppicQueue.png" alt="topicQueue"></p><p>解释：</p><ul><li>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</li><li>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</li></ul><h4 id="2-6-1-1-案例需求："><a href="#2-6-1-1-案例需求：" class="headerlink" title="2.6.1.1 案例需求："></a>2.6.1.1 案例需求：</h4><p>实现思路如下：</p><ol><li><p>并利用@RabbitListener声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p></li><li><p>在publisher中编写测试方法，向itcast. topic发送消息</p></li></ol><h3 id="2-6-2-消息发送"><a href="#2-6-2-消息发送" class="headerlink" title="2.6.2 消息发送"></a>2.6.2 消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * topicExchange</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendTopicExchange</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 交换机名称</span><br>    String exchangeName = <span class="hljs-string">&quot;exc.topic&quot;</span>;<br>    <span class="hljs-comment">// 消息</span><br>    String message = <span class="hljs-string">&quot;喜报！孙悟空大战哥斯拉，胜!&quot;</span>;<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(exchangeName, <span class="hljs-string">&quot;china.news&quot;</span>, message);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-3-消息接收"><a href="#2-6-3-消息接收" class="headerlink" title="2.6.3 消息接收"></a>2.6.3 消息接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;exc.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;china.#&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenTopicQueue1</span><span class="hljs-params">(String msg)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span><br><span class="hljs-meta">    exchange = @Exchange(name = &quot;exc.topic&quot;, type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">    key = &quot;#.news&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listenTopicQueue2</span><span class="hljs-params">(String msg)</span></span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="hljs-string">&quot;】&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-4-总结"><a href="#2-6-4-总结" class="headerlink" title="2.6.4.总结"></a>2.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</li><li>Topic交换机与队列绑定时的bindingKey可以指定通配符</li><li><code>#</code>：代表0个或多个词</li><li><code>*</code>：代表1个词</li></ul><h2 id="2-7-消息转换器"><a href="#2-7-消息转换器" class="headerlink" title="2.7.消息转换器"></a>2.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。</p><p>只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p><ul><li>数据体积过大</li><li>有安全漏洞</li><li>可读性差</li></ul><p>我们来测试一下。</p><h3 id="2-7-1-测试默认转换器"><a href="#2-7-1-测试默认转换器" class="headerlink" title="2.7.1.测试默认转换器"></a>2.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-comment">// 准备消息</span><br>    Map&lt;String,Object&gt; msg = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    msg.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    msg.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 发送消息</span><br>    rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;simple.queue&quot;</span>, msg);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-7-2-配置JSON转换器"><a href="#2-7-2-配置JSON转换器" class="headerlink" title="2.7.2.配置JSON转换器"></a>2.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。</p><h4 id="2-7-2-1-引入依赖"><a href="#2-7-2-1-引入依赖" class="headerlink" title="2.7.2.1 引入依赖"></a>2.7.2.1 引入依赖</h4><p>在publish</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>     <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-7-2-2-配置消息转换器"><a href="#2-7-2-2-配置消息转换器" class="headerlink" title="2.7.2.2 配置消息转换器"></a>2.7.2.2 配置消息转换器</h4><p>在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title">jsonMessageConverter</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Jackson2JsonMessageConverter();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>点击<a href="https://github.com/cherishll-git/MyRepo01/tree/master/SpringBootMQ">这里</a>查看源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
      <tag>消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识MQ</title>
    <link href="/2021/12/07/%E5%88%9D%E8%AF%86MQ/"/>
    <url>/2021/12/07/%E5%88%9D%E8%AF%86MQ/</url>
    
    <content type="html"><![CDATA[<h1 id="1、同步通讯"><a href="#1、同步通讯" class="headerlink" title="1、同步通讯"></a>1、同步通讯</h1><p>​    <strong>同步与异步通讯</strong>：</p><p>​        微服务间通讯有同步和异步两种方式：</p><p>​        同步通讯：就像打电话，需要实时响应。</p><p>​        异步通讯：就像发邮件，不需要马上回复。</p><p>两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。</p><p><strong>Feign调用</strong>就属于<strong>同步方式</strong>，虽然调用可以实时得到结果，但<strong>存在</strong>下面的<strong>问题</strong>：</p><ul><li>耦合度高。每次加入新的需求，都要修改原来的代码</li><li>性能下降。调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用时间的总和</li><li>浪费资源。调用链中的每个服务都在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</li><li>级联失败。如果服务提供者出现问题，所有调用方都会跟着出问题，如同多米诺骨牌一样，迅速导致整个微服务群故障</li></ul><p>同步调用的<strong>优点</strong>：</p><ul><li>时效性较强，可以立即得到结果</li></ul><h1 id="2、异步通讯"><a href="#2、异步通讯" class="headerlink" title="2、异步通讯"></a>2、异步通讯</h1><p>异步调用常见实现就是事件驱动模式。可以避免上述问题：</p><p>我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p><p>在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p><p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p><p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p><p><img src="/img/blogImg/broker.png" alt="事件驱动"></p><p>Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p>事件驱动的优势：</p><ul><li>服务解耦。每个服务都可以灵活插拔，可替换</li><li>性能提升，吞吐量提高。无需等待订阅者处理完成，响应更快速</li><li>服务没有强依赖，不用担心级联失败问题</li><li>调用间没有阻塞，不会造成无效的资源占用</li><li>流量削峰。不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。</p><h1 id="4、MQ常用框架"><a href="#4、MQ常用框架" class="headerlink" title="4、MQ常用框架"></a>4、MQ常用框架</h1><p>MQ（messageQueue），消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。</p><p>比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ</p><p>追求可靠性：RabbitMQ、RocketMQ</p><p>追求吞吐能力：RocketMQ、Kafka</p><p>追求消息低延迟：RabbitMQ、Kafka</p>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
      <tag>消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker的基本使用</title>
    <link href="/2021/12/06/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/06/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、镜像操作"><a href="#1、镜像操作" class="headerlink" title="1、镜像操作"></a>1、镜像操作</h1><h2 id="1-1-镜像的相关命令"><a href="#1-1-镜像的相关命令" class="headerlink" title="1.1 镜像的相关命令"></a>1.1 镜像的相关命令</h2><p>​    镜像名称：一般分为两部分  [repository]:[tag]   【在没有指定tag时，默认是latest，代表最新版本的镜像】</p><p><img src="/img/blogImg/dockerImage.png" alt="镜像"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker images      #查看镜像<br>docker rmi#删除镜像<br>docker pull#从服务拉取镜像<br>docker push#推送镜像到服务<br>docker save #保存镜像为压缩包<br>docker load#加载压缩包为镜像<br>docker build       #基于Dockerfile构建镜像<br></code></pre></td></tr></table></figure><h1 id="2、Docker的容器操作"><a href="#2、Docker的容器操作" class="headerlink" title="2、Docker的容器操作"></a>2、Docker的容器操作</h1><p><img src="/img/blogImg/dockerContiner.png" alt="容器操作"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.6#运行一个容器<br>--name #指定容器名称<br>  -p #指定端口映射<br>  -d 让容器后台运行<br>docker logs #查看容器日志命令，添加-f参数可以持续查看日志<br>docker ps #查看容器状态。添加-a参数查看所有状态的容器<br>docker exec -it [容器名] [要执行的命令] #进入容器执行<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">exec</span>命令可以进入容器修改文件，但是在容器内修改文件是不推荐的</span><br><span class="hljs-meta">#</span><span class="bash">docker <span class="hljs-built_in">exec</span> -it mn bash <span class="hljs-comment">## 其中bash是一个linux终端交互命令</span></span><br>docker rm  #不能删除运行中的容器，除非添加 -f 参数<br></code></pre></td></tr></table></figure><h2 id="2-1-运行redis容器"><a href="#2-1-运行redis容器" class="headerlink" title="2.1 运行redis容器"></a>2.1 运行redis容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -p 6379:6379 -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes<br><span class="hljs-meta">#</span><span class="bash">-v <span class="hljs-variable">$PWD</span>/data:/data : 将主机中当前目录下的data挂载到容器的/data</span><br><span class="hljs-meta">#</span><span class="bash">redis-server --appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置</span><br></code></pre></td></tr></table></figure><h3 id="2-1-2-简单操作"><a href="#2-1-2-简单操作" class="headerlink" title="2.1.2 简单操作"></a>2.1.2 简单操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it redis bash  #进入redis容器<br>redis-cli#执行redis-cli客户端命令<br></code></pre></td></tr></table></figure><h1 id="3、Docker数据卷"><a href="#3、Docker数据卷" class="headerlink" title="3、Docker数据卷"></a>3、Docker数据卷</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>容器与数据耦合的问题：</p><ul><li>不便于修改。eg: 当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便。</li><li>数据不可服用。在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。</li><li>升级维护困难。 数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了</li></ul><p><strong>数据卷</strong>：是一个虚拟目录指向宿主机文件系统中的某个目录（真实目录）。</p><p><img src="/img/blogImg/dockerVolume.png" alt="数据卷"></p><h2 id="3-2-操作数据卷"><a href="#3-2-操作数据卷" class="headerlink" title="3.2 操作数据卷"></a>3.2 操作数据卷</h2><p>数据卷操作的基本语法如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume [COMMAND]<br></code></pre></td></tr></table></figure><p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p><p>​    <code>create</code> 创建一个volume</p><p>​    <code>inspect</code> 显示一个或多个volume的信息</p><p>​    <code>ls</code> 列出所有的volume</p><p>​    <code>prune</code> 删除未使用的volume</p><p>​    <code>rm</code> 删除一个或多个指定的volume</p><blockquote><p>windows中创建的数据卷的地址为(点击<a href="file://wsl%24/docker-desktop-data/version-pack-data/community/docker/volumes/">这里</a>查看)：</p><p>file://wsl%24/docker-desktop-data/version-pack-data/community/docker/volumes/</p></blockquote><h2 id="3-3-挂载数据卷"><a href="#3-3-挂载数据卷" class="headerlink" title="3.3 挂载数据卷"></a>3.3 挂载数据卷</h2><p>创建容器时，可以通过 <code>-v</code> 参数来挂在一个数据卷到某个容器目录。</p><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name mynginx -p 8080:8080 -v html:/root/html  -d nginx <br><span class="hljs-meta">#</span><span class="bash">-v html:/root/html 把html数据卷挂载到容器内的/root/html这个目录中</span><br></code></pre></td></tr></table></figure><h3 id="3-3-1-案例-数据卷挂载-："><a href="#3-3-1-案例-数据卷挂载-：" class="headerlink" title="3.3.1 案例(数据卷挂载)："></a>3.3.1 案例(数据卷挂载)：</h3><p>​    创建nginx容器，修改容器内的html目录内的index.html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume create html  #创建html数据卷<br>docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx<br><span class="hljs-meta">#</span><span class="bash"> 查看html数据卷的位置</span><br>docker volume inspect html<br><span class="hljs-meta">#</span><span class="bash"> 进入该目录（Linux）</span><br>cd /var/lib/docker/volumes/html/_data<br><span class="hljs-meta">#</span><span class="bash"> 修改文件（Linux）</span><br>vi index.html<br></code></pre></td></tr></table></figure><blockquote><p>windows中关联数据卷，进入</p><p>file://wsl%24/docker-desktop-data/version-pack-data/community/docker/volumes/html/_data目录下，修改index.html</p></blockquote><h3 id="3-3-2-案例-宿主机目录挂载"><a href="#3-3-2-案例-宿主机目录挂载" class="headerlink" title="3.3.2 案例(宿主机目录挂载)"></a>3.3.2 案例(宿主机目录挂载)</h3><p>windows：</p><ul><li>路径盘符要小写</li><li>文件夹名称不能有空格</li><li>文件最好提前创建，不然自动创建出来的是个文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name myNginx -p 80:80 -d -v d:\AppData\docker\volumes\html:/usr/share/nginx/html nginx<br></code></pre></td></tr></table></figure><blockquote><p>​    在计算机的<code>d:\AppData\docker\volumes\html</code>目录下，新增或变更资源，都会同步到nginx的<code>/usr/share/nginx/html</code>目录中</p></blockquote><p>目录挂载与数据卷挂载的语法是类似的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">-v [宿主机目录]:[容器内目录]<br>-v [宿主机文件]:[容器内文件]<br></code></pre></td></tr></table></figure><h3 id="3-3-3-数据卷挂载与目录直接挂载的区别"><a href="#3-3-3-数据卷挂载与目录直接挂载的区别" class="headerlink" title="3.3.3 数据卷挂载与目录直接挂载的区别"></a>3.3.3 数据卷挂载与目录直接挂载的区别</h3><p>数据卷挂载：(自动化但隐藏细节) 数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</p><p>目录挂载: (细节自己实现，没有自动化) 目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</p><h1 id="4、Dockerfile自定义镜像"><a href="#4、Dockerfile自定义镜像" class="headerlink" title="4、Dockerfile自定义镜像"></a>4、Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="4-1-镜像结构"><a href="#4-1-镜像结构" class="headerlink" title="4.1 镜像结构"></a>4.1 镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><blockquote><p>底层函数库 -》 环境配置 -》依赖安装 -》应用安装 -》应用配置</p></blockquote><p><img src="/img/blogImg/imageStruct.png" alt="模拟Mysql镜像结构"></p><p>镜像是分层结构，每一层称为一个Layer</p><p>简单来说，镜像就是在系统函数库、运行环境<strong>基础</strong>上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="4-2-Dockerfile语法"><a href="#4-2-Dockerfile语法" class="headerlink" title="4.2 Dockerfile语法"></a>4.2 Dockerfile语法</h2><h3 id="4-2-1-什么是Dockerfile"><a href="#4-2-1-什么是Dockerfile" class="headerlink" title="4.2.1 什么是Dockerfile"></a>4.2.1 什么是Dockerfile</h3><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><table><thead><tr><th align="center">指令</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">FROM</td><td align="center">指定基础镜像</td><td align="center">FROM centos:6</td></tr><tr><td align="center">ENV</td><td align="center">设置环境变量，可在后面指令使用</td><td align="center">ENV key value</td></tr><tr><td align="center">COPY</td><td align="center">拷贝本地文件到镜像的指定目录</td><td align="center">COPY ./mysql-5.7.rpm /tmp</td></tr><tr><td align="center">RUN</td><td align="center">执行Linux的shell命令，一般是安装过程的命令</td><td align="center">RUN yum install gcc</td></tr><tr><td align="center">EXPOSE</td><td align="center">指定容器运行时监听的端口，是给镜像使用者看的</td><td align="center">EXPOSE 8080</td></tr><tr><td align="center">ENTRYPOINT</td><td align="center">镜像中应用的启动命令，容器运行时调用</td><td align="center">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>更新详细语法说明，请参考<a href="https://docs.docker.com/engine/reference/builder">官网文档</a></p><h2 id="4-3-构建Java项目"><a href="#4-3-构建Java项目" class="headerlink" title="4.3 构建Java项目"></a>4.3 构建Java项目</h2><h3 id="4-3-1-基于Ubuntu构建Java项目"><a href="#4-3-1-基于Ubuntu构建Java项目" class="headerlink" title="4.3.1 基于Ubuntu构建Java项目"></a>4.3.1 基于Ubuntu构建Java项目</h3><p>​    需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li><p>步骤1：新建一个空文件夹docker-demo</p></li><li><p>步骤2：拷贝docker-demo.jar文件到docker-demo这个目录</p></li><li><p>步骤3：拷贝jdk8.tar.gz文件到docker-demo这个目录</p></li><li><p>步骤4：拷贝Dockerfile到docker-demo这个目录</p></li></ul><p>Dockerfile内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 指定基础镜像</span><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><span class="hljs-comment"># 配置环境变量，JDK的安装目录</span><br><span class="hljs-keyword">ENV</span> JAVA_DIR=/usr/local<br><br><span class="hljs-comment"># 拷贝jdk和java项目的包</span><br><span class="hljs-keyword">COPY</span><span class="bash"> ./jdk8.tar.gz <span class="hljs-variable">$JAVA_DIR</span>/</span><br><span class="hljs-keyword">COPY</span><span class="bash"> ./docker-demo.jar /tmp/app.jar</span><br><br><span class="hljs-comment"># 安装JDK</span><br><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">cd</span> <span class="hljs-variable">$JAVA_DIR</span> \</span><br><span class="bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span><br><span class="bash"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span><br><br><span class="hljs-comment"># 配置环境变量</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8<br><span class="hljs-keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin<br><br><span class="hljs-comment"># 暴露端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8090</span><br><span class="hljs-comment"># 入口，java项目的启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> java -jar /tmp/app.jar</span><br></code></pre></td></tr></table></figure><ul><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p><p>构建镜像</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t javaweb:1.0 .<br></code></pre></td></tr></table></figure><h3 id="4-3-2-基于java8构建Java项目"><a href="#4-3-2-基于java8构建Java项目" class="headerlink" title="4.3.2 基于java8构建Java项目"></a>4.3.2 基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p></li><li><p>② 拷贝课前资料提供的docker-demo.jar到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）基于java:8-alpine作为基础镜像</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT</p><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs doc">FROM java:8-alpine<br>COPY ./app.jar /tmp/app.jar<br>EXPOSE 8090<br>ENTRYPOINT java -jar /tmp/app.jar<br></code></pre></td></tr></table></figure></li></ul></li><li><p>④ 使用docker build命令构建镜像</p></li><li><p>⑤ 使用docker run创建容器并运行</p></li></ul><h3 id="4-3-3-小结"><a href="#4-3-3-小结" class="headerlink" title="4.3.3 小结"></a>4.3.3 小结</h3><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h1 id="5、DockerCompose"><a href="#5、DockerCompose" class="headerlink" title="5、DockerCompose"></a>5、DockerCompose</h1><p>Docker Compose可以基于<strong>Compose文件</strong>帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><h2 id="5-1-初始DockerCompose"><a href="#5-1-初始DockerCompose" class="headerlink" title="5.1 初始DockerCompose"></a>5.1 初始DockerCompose</h2><p>Compose文件是一个<strong>文本文件</strong>，通过<strong>指令</strong>定义集群中的每个容器如何运行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br> <span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-string">image:</span> <span class="hljs-string">mysql:5.7.25</span><br>    <span class="hljs-attr">environment:</span><br>     <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span> <br>    <span class="hljs-attr">volumes:</span><br>     <span class="hljs-string">-</span> <span class="hljs-string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span><br>     <span class="hljs-string">-</span> <span class="hljs-string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-string">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8090:8090&quot;</span><br></code></pre></td></tr></table></figure><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考<a href="https://docs.docker.com/compose/compose-file/">官网</a></p><p>其实DockerCompose文件可以看做是将多个<code>docker run</code>命令写到一个文件，只是语法稍有差异。</p><h2 id="5-2-安装DockerCompose"><a href="#5-2-安装DockerCompose" class="headerlink" title="5.2 安装DockerCompose"></a>5.2 安装DockerCompose</h2><p>参考<a href="https://cherishll-git.github.io/2021/12/06/Docker%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/">docker的介绍与安装</a></p><h2 id="5-3-部署微服务集群"><a href="#5-3-部署微服务集群" class="headerlink" title="5.3 部署微服务集群"></a>5.3 部署微服务集群</h2><p><strong>需求</strong>：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><p>① 查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</p><p>② 修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</p><p>③ 使用maven打包工具，将项目中的每个微服务都打包为app.jar</p><p>④ 将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</p><p>⑤ 将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</p><h1 id="6、Docker镜像仓库"><a href="#6、Docker镜像仓库" class="headerlink" title="6、Docker镜像仓库"></a>6、Docker镜像仓库</h1><h2 id="6-1搭建私有镜像仓库"><a href="#6-1搭建私有镜像仓库" class="headerlink" title="6.1搭建私有镜像仓库"></a>6.1搭建私有镜像仓库</h2><p>参考<a href="https://cherishll-git.github.io/2021/12/06/Docker%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/">docker的介绍与安装</a></p><h2 id="6-2-推送、拉取镜像"><a href="#6-2-推送、拉取镜像" class="headerlink" title="6.2 推送、拉取镜像"></a>6.2 推送、拉取镜像</h2><p>推送镜像到<strong>私有镜像</strong>服务<strong>必须先tag</strong>，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag nginx:latest 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><p>② 推送镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker push 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure><p>③ 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull 192.168.150.101:8080/nginx:1.0 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker的安装</title>
    <link href="/2021/12/06/Docker%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2021/12/06/Docker%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Docker基本概念"><a href="#1、Docker基本概念" class="headerlink" title="1、Docker基本概念"></a>1、Docker基本概念</h1><h2 id="1-1-Docker初识"><a href="#1-1-Docker初识" class="headerlink" title="1.1 Docker初识"></a>1.1 Docker初识</h2><p>​    Docker是一个开源的应用容器框架</p><p>​    基于Go语言实现</p><p>​    Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上。</p><p>​    容器完全使用<strong>沙箱机制</strong>，相互隔离</p><p>​    容器性能开销极低</p><p>​    <strong>小结：docker是一个容器技术，解决软件跨环境迁移的问题</strong></p><h2 id="1-2-Docker解决兼容性问题"><a href="#1-2-Docker解决兼容性问题" class="headerlink" title="1.2 Docker解决兼容性问题"></a>1.2 Docker解决兼容性问题</h2><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li><p>依赖关系复杂，容易出现兼容性问题</p></li><li><p>开发、测试、生产环境有差异</p></li></ul><p>为了解决依赖的兼容问题的，采用了两个手段：</p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3 Docker架构"></a>1.3 Docker架构</h2><p>Docker中有几个重要的概念：</p><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p><p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。一个镜像可以运行多个容器</p><p>是一个C/S架构的程序，有两部分组成：</p><ul><li>服务端：Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><p>DockerHub：</p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><p>Docker的工作流：</p><ul><li><p>构建自定义镜像或者从DockerRegistry拉取镜像</p></li><li><p>根据镜像创建容器，并运行</p></li></ul><h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4 安装Docker"></a>1.4 安装Docker</h2><h3 id="1-4-1-安装Windows版"><a href="#1-4-1-安装Windows版" class="headerlink" title="1.4.1 安装Windows版"></a>1.4.1 安装Windows版</h3><pre><code>此处参考[博客](https://www.cnblogs.com/wangyang0210/p/13212610.html)</code></pre><h3 id="1-4-2-Linux版-CentOS-7-为例"><a href="#1-4-2-Linux版-CentOS-7-为例" class="headerlink" title="1.4.2 Linux版(CentOS 7 为例)"></a>1.4.2 Linux版(CentOS 7 为例)</h3><p>Docker 分为CE和EE两大版本。</p><p>Linux版：Docker CE支持64位版本CentOS 7，并且要求内核版本不低于3.10，CentOS 7 满足最低内核要求。</p><h4 id="1-4-2-1-卸载（可选）"><a href="#1-4-2-1-卸载（可选）" class="headerlink" title="1.4.2.1 卸载（可选）"></a>1.4.2.1 卸载（可选）</h4><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#反斜杠的作用是连接作用</span></span><br>yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine \<br>                  docker-ce<br></code></pre></td></tr></table></figure><h4 id="1-4-2-2-安装yum工具"><a href="#1-4-2-2-安装yum工具" class="headerlink" title="1.4.2.2 安装yum工具"></a>1.4.2.2 安装yum工具</h4><p>首先需要虚拟机联网，安装yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>           device-mapper-persistent-data \<br>           lvm2 --skip-broken<br></code></pre></td></tr></table></figure><p>更新XFS文件系统管理工具及本地镜像源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update xfsprogs -y<br></code></pre></td></tr></table></figure><p>然后更新本地镜像源:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#设置docker镜像源</span></span><br>yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>    <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#解决域名问题</span></span><br>sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><h4 id="1-4-2-3-安装docker（ce版本）"><a href="#1-4-2-3-安装docker（ce版本）" class="headerlink" title="1.4.2.3 安装docker（ce版本）"></a>1.4.2.3 安装docker（ce版本）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y docker-ce  ##-y 安装过程中不用询问，问就是yes<br></code></pre></td></tr></table></figure><h4 id="1-4-2-4-启动docker"><a href="#1-4-2-4-启动docker" class="headerlink" title="1.4.2.4 启动docker"></a>1.4.2.4 启动docker</h4><p>Docker应用需要用到各种端口，逐一去修改防火墙设置，会非常麻烦，建议<strong>关闭防火墙</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭</span><br>systemctl stop firewalld<br><span class="hljs-meta">#</span><span class="bash"> 禁止开机启动防火墙</span><br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><p>通过命令启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#启动后查看docker版本</span></span><br>docker --version<br></code></pre></td></tr></table></figure><h4 id="1-4-2-5-配置docker镜像"><a href="#1-4-2-5-配置docker镜像" class="headerlink" title="1.4.2.5 配置docker镜像"></a>1.4.2.5 配置docker镜像</h4><p>docker官方镜像仓库网速较差，我们需要设置国内镜像：</p><p>参考阿里云的<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">镜像加速文档</a></p><h3 id="1-4-3-win10-安装docker-desktop"><a href="#1-4-3-win10-安装docker-desktop" class="headerlink" title="1.4.3 win10 安装docker desktop"></a>1.4.3 win10 安装docker desktop</h3><p>参考<a href="https://www.cnblogs.com/wangyang0210/p/13212610.html">博客</a></p><h1 id="2、安装DockerCompose"><a href="#2、安装DockerCompose" class="headerlink" title="2、安装DockerCompose"></a>2、安装DockerCompose</h1><h2 id="2-1-Linux版本"><a href="#2-1-Linux版本" class="headerlink" title="2.1 Linux版本"></a>2.1 Linux版本</h2><h3 id="2-1-1-下载"><a href="#2-1-1-下载" class="headerlink" title="2.1.1 下载"></a>2.1.1 下载</h3><p>Linux下需要通过命令下载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>curl -L https://github.com/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="2-1-2-修改文件权限"><a href="#2-1-2-修改文件权限" class="headerlink" title="2.1.2 修改文件权限"></a>2.1.2 修改文件权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改权限</span><br>chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h3 id="2-1-3-Base自动补全命令"><a href="#2-1-3-Base自动补全命令" class="headerlink" title="2.1.3 Base自动补全命令"></a>2.1.3 Base自动补全命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 补全命令</span><br>curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose<br></code></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的hosts文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;199.232.68.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><h2 id="2-2-Window安装"><a href="#2-2-Window安装" class="headerlink" title="2.2 Window安装"></a>2.2 Window安装</h2><h3 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1 下载"></a>2.2.1 下载</h3><p><a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p><h3 id="2-2-2-安装"><a href="#2-2-2-安装" class="headerlink" title="2.2.2 安装"></a>2.2.2 安装</h3><p>双击下载的安装包直接安装</p><h1 id="3、Docker镜像仓库"><a href="#3、Docker镜像仓库" class="headerlink" title="3、Docker镜像仓库"></a>3、Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p><h2 id="3-1-简化版镜像仓库"><a href="#3-1-简化版镜像仓库" class="headerlink" title="3.1 简化版镜像仓库"></a>3.1 简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>    --restart=always \<br>    --name registry\<br>    -p 5000:5000 \<br>    -v registry-data:/var/lib/registry \<br>    registry<br></code></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p><p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p><h2 id="3-2-带有图形化界面版本"><a href="#3-2-带有图形化界面版本" class="headerlink" title="3.2 带有图形化界面版本"></a>3.2 带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry</p><p>docker-compose.yml文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./registry-data:/var/lib/registry</span><br>  <span class="hljs-attr">ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">joxit/docker-registry-ui:static</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_TITLE=私有仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_URL=http://registry:5000</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><p>执行命令构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br></code></pre></td></tr></table></figure><h2 id="3-3-配置Docker信任地址"><a href="#3-3-配置Docker信任地址" class="headerlink" title="3.3 配置Docker信任地址"></a>3.3 配置Docker信任地址</h2><p>我们的私服采用的http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#打开要修改的文件</span><br>vi /etc/docker/daemon.json<br><span class="hljs-comment">#添加内容</span><br><span class="hljs-string">&quot;insecure-registries&quot;</span>:[<span class="hljs-string">&quot;http://192.168.150.101:8080&quot;</span>]<br><span class="hljs-comment">#重加载</span><br>systemctl daemon-reload<br><span class="hljs-comment">#重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Json字符串与对象的互转</title>
    <link href="/2021/12/03/Json%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <url>/2021/12/03/Json%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BA%92%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<p>在开发过程中，经常需要和别的系统交换数据，数据交换的格式有XML、JSON等，JSON作为一个轻量级的数据格式比xml效率要高，XML需要很多的标签，这无疑占据了网络流量，JSON在这方面则做的很好，下面先看下JSON的格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;JSON&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京市西城区&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">25</span>&#125;<span class="hljs-comment">//JSON的对象格式的字符串</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;com.lyq.pojo.Student&quot;</span>,&#123;<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;211&quot;</span>,<span class="hljs-attr">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;Jane&quot;</span>,<span class="hljs-attr">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-attr">&quot;db&quot;</span>:<span class="hljs-string">&quot;mysql&quot;</span>&#125;]<span class="hljs-comment">//数组对象格式</span><br></code></pre></td></tr></table></figure><h2 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h2><p>​    要实现JSON与java对象之间的互转，需要借助<strong>第三方jar包</strong>，此处使用json-lib这个jar包，可以冲<a href="https://mvnrepository.com/">此处</a>下载相关jar包，json-lib需要<code>commons-beanutils-1.8.0.jar、commons-collections-3.2.1.jar、commons-lang-2.5.jar、commons-logging-1.1.1.jar、ezmorph-1.0.6.jar </code>五个包的支持。</p><p>json-lib提供了几个类可以完成此功能，例<code>JSONObject、JSONArray</code>从类的名字上可以看出JSONObject转化的应该是对象格式的，而JSONArray转化的则应该是数组对象（即，带[]形式）的。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json-lib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classifier</span>&gt;</span>jdk15<span class="hljs-tag">&lt;/<span class="hljs-name">classifier</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ezmorph<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、Java普通对象和JSON字符串的互转"><a href="#2、Java普通对象和JSON字符串的互转" class="headerlink" title="2、Java普通对象和JSON字符串的互转"></a>2、Java普通对象和JSON字符串的互转</h2><h3 id="2-1-Java对象-–》Json字符串"><a href="#2-1-Java对象-–》Json字符串" class="headerlink" title="2.1 Java对象 –》Json字符串"></a>2.1 Java对象 –》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String stuno;<br>    <span class="hljs-keyword">private</span> String stuname;<br>    <span class="hljs-keyword">private</span> String stusex;<br>    <span class="hljs-keyword">private</span> String db;<br>    <br>    <span class="hljs-comment">//此处省略setter和getter</span><br>&#125;<br></code></pre></td></tr></table></figure><p>​    Java对象转Json字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Student对象通过JSONObject和JSONArray两种方式转Json字符串</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">convertObject</span><span class="hljs-params">()</span> </span>&#123;        <br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;成武&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        JSONObject json = JSONObject.fromObject(stu);<br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray array=JSONArray.fromObject(stu);<br>        <br>        String strJson=json.toString();<br>        String strArray=array.toString();<br>        <br>        System.out.println(<span class="hljs-string">&quot;strJson:&quot;</span>+strJson);<br>        System.out.println(<span class="hljs-string">&quot;strArray:&quot;</span>+strArray);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    下面为打印结果：</p><blockquote><p>strJson:{“db”:”Mysql”,”id”:3,”stuname”:”成武”,”stuno”:”100”,”stusex”:”M”}<br>strArray:[{“db”:”Mysql”,”id”:3,”stuname”:”成武”,”stuno”:”100”,”stusex”:”M”}]</p></blockquote><p>​    两种方法都可以把java对象转化为JSON字符串，只是转化后的<strong>结构</strong>不同。</p><h3 id="2-2-JSON字符串-—》Java对象"><a href="#2-2-JSON字符串-—》Java对象" class="headerlink" title="2.2 JSON字符串 —》Java对象"></a>2.2 JSON字符串 —》Java对象</h3><p>​    首先需要定义两种不同格式的字符串，需要使用\对双引号进行转义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonStrToJava</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//定义两种不同格式的字符串</span><br>        String objectStr=<span class="hljs-string">&quot;&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;李四\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;&quot;</span>;<br>        String arrayStr=<span class="hljs-string">&quot;[&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;李四\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;]&quot;</span>;<br>    <br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        JSONObject jsonObject=JSONObject.fromObject(objectStr);<br>        Student stu=(Student)JSONObject.toBean(jsonObject, Student.class);<br>        <br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray jsonArray=JSONArray.fromObject(arrayStr);<br>        <span class="hljs-comment">//获得jsonArray的第一个元素</span><br>        Object o=jsonArray.get(<span class="hljs-number">0</span>);<br>        JSONObject jsonObject2=JSONObject.fromObject(o);<br>        Student stu2=(Student)JSONObject.toBean(jsonObject2, Student.class);<br>        System.out.println(<span class="hljs-string">&quot;stu:&quot;</span>+stu);<br>        System.out.println(<span class="hljs-string">&quot;stu2:&quot;</span>+stu2);<br>&#125;<br></code></pre></td></tr></table></figure><p>​    下面为打印结果：</p><blockquote><p>stu:Student{id=3, stuno=’100’, stuname=’李四’, stusex=’M’, db=’Mysql’}<br>stu2:Student{id=3, stuno=’100’, stuname=’李四’, stusex=’M’, db=’Mysql’}</p></blockquote><p>​    使用<code>JSONObject</code>可以轻松的把JSON格式的字符串转化为java对象，但是使用<code>JSONArray</code>就没那么容易了，因为它有<strong>“[]”</strong>符号，所以我们这里在<strong>获得了JSONArray的对象之后</strong>，<strong>取其第一个元素</strong>即我们需要的一个student的变形，然后使用JSONObject轻松获得</p><h2 id="3、list和json字符串的互转"><a href="#3、list和json字符串的互转" class="headerlink" title="3、list和json字符串的互转"></a>3、<strong>list和json字符串的互转</strong></h2><h3 id="3-1-list-–》Json字符串"><a href="#3-1-list-–》Json字符串" class="headerlink" title="3.1 list –》Json字符串"></a>3.1 list –》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">listToJSON</span><span class="hljs-params">()</span></span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;王建&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br>        Student stu2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;李承&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        List&lt;Student&gt; lists=<span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        lists.add(stu);<br>        lists.add(stu2);<br>        <span class="hljs-comment">//1、使用JSONObject</span><br>        <span class="hljs-comment">//JSONObject listObject=JSONObject.fromObject(lists);//会报错</span><br>        <span class="hljs-comment">//2、使用JSONArray</span><br>        JSONArray listArray=JSONArray.fromObject(lists);<br><br>        <span class="hljs-comment">//System.out.println(&quot;listObject:&quot;+listObject.toString());</span><br>        System.out.println(<span class="hljs-string">&quot;listArray:&quot;</span>+listArray.toString());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​    我把使用JSONObject的方式给注掉了，我们先看注释之前的结果：</p><blockquote><p>net.sf.json.JSONException: ‘object’ is an array. Use JSONArray instead</p></blockquote><p>​    注释后，正确执行结果为：</p><blockquote><p>listArray:[{“db”:”Mysql”,”id”:4,”stuname”:”王建”,”stuno”:”101”,”stusex”:”M”},{“db”:”Mysql”,”id”:5,”stuname”:”李承”,”stuno”:”102”,”stusex”:”N”}]</p></blockquote><h3 id="3-2-Json字符串-–》list"><a href="#3-2-Json字符串-–》list" class="headerlink" title="3.2 Json字符串 –》list"></a>3.2 Json字符串 –》list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonToList</span><span class="hljs-params">()</span></span>&#123;<br>        String arrayStr=<span class="hljs-string">&quot;[&#123;\&quot;id\&quot;:\&quot;4\&quot;,\&quot;stuname\&quot;:\&quot;王建\&quot;,\&quot;stuno\&quot;:\&quot;101\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;]&quot;</span>;<br>        <span class="hljs-comment">//转化为list</span><br>        List&lt;Student&gt; list2=(List&lt;Student&gt;)JSONArray.toList(JSONArray.fromObject(arrayStr), Student.class);<br><br>        <span class="hljs-keyword">for</span> (Student stu : list2) &#123;<br>            System.out.println(stu);<br>        &#125;<br>        <span class="hljs-comment">//转化为数组</span><br>        Student[] ss =(Student[])JSONArray.toArray(JSONArray.fromObject(arrayStr),Student.class);<br>        <span class="hljs-keyword">for</span> (Student student : ss) &#123;<br>            System.out.println(student);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;王建&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br>Student&#123;<span class="hljs-attribute">id</span>=4, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;101&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;王建&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>由于字符串的格式为带有“[]”的格式，所以这里<strong>选择JSONArray</strong>这个对象，它有<code>toArray、toList</code>方法可供使用，前者转化为java中的<strong>数组</strong>，后者转化为java中的<strong>list</strong>，由于这里有实体类进行对应，所以在使用时指定了泛型的类型（Student.class），这样就可以得到转化后的对象</p><h2 id="4、map和Json字符串的互转"><a href="#4、map和Json字符串的互转" class="headerlink" title="4、map和Json字符串的互转"></a>4、map和Json字符串的互转</h2><h3 id="4-1-Map-—》Json字符串"><a href="#4-1-Map-—》Json字符串" class="headerlink" title="4.1 Map —》Json字符串"></a>4.1 Map —》Json字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mapToJSON</span><span class="hljs-params">()</span></span>&#123;<br>        Student stu = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;100&quot;</span>, <span class="hljs-string">&quot;成武&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br>        Student stu1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;王建&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Mysql&quot;</span>);<br><br>        HashMap&lt;String, Student&gt; stuMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Student&gt;();<br>        stuMap.put(<span class="hljs-string">&quot;first&quot;</span>,stu);<br>        stuMap.put(<span class="hljs-string">&quot;second&quot;</span>,stu1);<br><br>        <span class="hljs-comment">//1、JSONObject</span><br>        JSONObject mapObject= JSONObject.fromObject(stuMap);<br>        System.out.println(<span class="hljs-string">&quot;mapObject&quot;</span>+mapObject.toString());<br><br>        <span class="hljs-comment">//2、JSONArray</span><br>        JSONArray mapArray=JSONArray.fromObject(stuMap);<br>        System.out.println(<span class="hljs-string">&quot;mapArray:&quot;</span>+mapArray.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mapObject</span>&#123;<span class="hljs-string">&quot;first&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;成武&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;100&quot;</span>&#125;,<span class="hljs-string">&quot;second&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;王建&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;101&quot;</span>&#125;&#125;<br><span class="hljs-attribute">mapArray</span>:[&#123;<span class="hljs-string">&quot;first&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">3</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;成武&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;100&quot;</span>&#125;,<span class="hljs-string">&quot;second&quot;</span>:&#123;<span class="hljs-string">&quot;stusex&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&quot;stuname&quot;</span>:<span class="hljs-string">&quot;王建&quot;</span>,<span class="hljs-string">&quot;db&quot;</span>:<span class="hljs-string">&quot;Mysql&quot;</span>,<span class="hljs-string">&quot;stuno&quot;</span>:<span class="hljs-string">&quot;101&quot;</span>&#125;&#125;]<br></code></pre></td></tr></table></figure><h3 id="4-2-Json字符串-—》Map"><a href="#4-2-Json字符串-—》Map" class="headerlink" title="4.2 Json字符串 —》Map"></a>4.2 Json字符串 —》Map</h3><p>JSON字符串不能直接转化为map对象，要想取得map中的键对应的值需要别的方式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Student first;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">getFirst</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFirst</span><span class="hljs-params">(Student first)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.first = first;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">jsonToMap</span><span class="hljs-params">()</span></span>&#123;<br>        String strObject=<span class="hljs-string">&quot;&#123;\&quot;first\&quot;:&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;stuname\&quot;:\&quot;成武\&quot;,\&quot;stuno\&quot;:\&quot;100\&quot;,\&quot;stusex\&quot;:\&quot;M\&quot;,\&quot;db\&quot;:\&quot;Mysql\&quot;&#125;&#125;&quot;</span>;<br><br>        <span class="hljs-comment">//JSONObject</span><br>        JSONObject jsonObject=JSONObject.fromObject(strObject);<br>        Map map=<span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;first&quot;</span>, Student.class);<br><br>        <span class="hljs-comment">//使用了toBean方法，需要三个参数</span><br>        MyBean my=(MyBean)JSONObject.toBean(jsonObject, MyBean.class, map);<br>        System.out.println(my.getFirst());<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>​    打印结果为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">stuno</span>=<span class="hljs-string">&#x27;100&#x27;</span>, <span class="hljs-attribute">stuname</span>=<span class="hljs-string">&#x27;成武&#x27;</span>, <span class="hljs-attribute">stusex</span>=<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-attribute">db</span>=<span class="hljs-string">&#x27;Mysql&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p>使用toBean()方法是传入了三个参数，第一个是JSONObject对象，第二个是MyBean.class，第三个是一个Map对象。通过MyBean可以知道此类中要有一个first的属性，且其类型为Student，要和map中的键和值类型对应，即，first对应键 first类型对应值的类型。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown的基本使用</title>
    <link href="/2021/12/01/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/12/01/Markdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Markdown标题"><a href="#1、Markdown标题" class="headerlink" title="1、Markdown标题"></a>1、Markdown标题</h1><h2 id="1-1-使用-和-标记一级和二级标题"><a href="#1-1-使用-和-标记一级和二级标题" class="headerlink" title="1.1 使用 = 和 - 标记一级和二级标题"></a>1.1 使用 = 和 - 标记一级和二级标题</h2><p>= 和 - 标记语法格式如下:</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">我展示的是一级标题</span><br><span class="hljs-section">=================</span><br><br><span class="hljs-section">我展示的是二级标题</span><br><span class="hljs-section">-----------------</span><br></code></pre></td></tr></table></figure><h2 id="1-2-使用-号标记"><a href="#1-2-使用-号标记" class="headerlink" title="1.2 使用#号标记"></a>1.2 使用#号标记</h2><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure><h1 id="2、段落格式"><a href="#2、段落格式" class="headerlink" title="2、段落格式"></a>2、段落格式</h1><h2 id="2-1-字体"><a href="#2-1-字体" class="headerlink" title="2.1 字体"></a>2.1 字体</h2><p>markdown可以使用一下几种字体</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure><h2 id="2-2-分割线"><a href="#2-2-分割线" class="headerlink" title="2.2 分割线"></a>2.2 分割线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">- - -</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"></span></span><br><span class="hljs-emphasis"><span class="hljs-strong">----------</span></span><br></code></pre></td></tr></table></figure><h2 id="2-3-删除线"><a href="#2-3-删除线" class="headerlink" title="2.3 删除线"></a>2.3 删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml">~~BAIDU.COM~~<br></code></pre></td></tr></table></figure><p>效果如：<del>BAIDU.COM</del></p><h2 id="2-4-下划线"><a href="#2-4-下划线" class="headerlink" title="2.4 下划线"></a>2.4 下划线</h2><p>下划线可以通过 HTML 的 <code>^&lt;u&gt;</code> 标签来实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示效果为： <u>带下划线文本</u></p><h2 id="2-5-注脚"><a href="#2-5-注脚" class="headerlink" title="2.5 注脚"></a>2.5 注脚</h2><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[^要注明的文本]<br></code></pre></td></tr></table></figure><h1 id="3、Markdown-列表"><a href="#3、Markdown-列表" class="headerlink" title="3、Markdown 列表"></a>3、Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。</p><h2 id="3-1无序列表"><a href="#3-1无序列表" class="headerlink" title="3.1无序列表"></a>3.1无序列表</h2><p>  使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要<strong>添加一个空格</strong>，然后再填写内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><h2 id="3-2有序列表"><a href="#3-2有序列表" class="headerlink" title="3.2有序列表"></a>3.2有序列表</h2><p>  使用数字并加上 . 号来表示，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><h2 id="3-3-列表嵌套"><a href="#3-3-列表嵌套" class="headerlink" title="3.3 列表嵌套"></a>3.3 列表嵌套</h2><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><p>显示结果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h1 id="4、Markdown区块"><a href="#4、Markdown区块" class="headerlink" title="4、Markdown区块"></a>4、Markdown区块</h1><p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">区块引用</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">菜鸟教程</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">学的不仅是技术更是梦想</span><br></code></pre></td></tr></table></figure><p>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">最外层</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">&gt; 第一层嵌套</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">&gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><p>展示效果如下：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><h2 id="4-1-区块中使用列表"><a href="#4-1-区块中使用列表" class="headerlink" title="4.1 区块中使用列表"></a>4.1 区块中使用列表</h2><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta">&gt;</span> <span class="javascript">区块中使用列表</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-number">1.</span> 第一项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-number">2.</span> 第二项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第一项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第二项</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">+ 第三项</span><br></code></pre></td></tr></table></figure><p>显示结果如下：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li></ul></blockquote><h2 id="4-2-列表中使用区块"><a href="#4-2-列表中使用区块" class="headerlink" title="4.2 列表中使用区块"></a>4.2 列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 &gt; 前<strong>添加四个空格</strong>的缩进。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>第一项<br><span class="hljs-code">    &gt; 菜鸟教程</span><br><span class="hljs-code">    &gt; 学的不仅是技术更是梦想</span><br><span class="hljs-bullet">* </span>第二项<br></code></pre></td></tr></table></figure><p>显示效果如下</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项</li></ul><h1 id="5、Markdown代码"><a href="#5、Markdown代码" class="headerlink" title="5、Markdown代码"></a>5、Markdown代码</h1><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`printf()` 函数<br></code></pre></td></tr></table></figure><p>显示效果为： <code>printf()</code> 函数</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。</p><p>也可以使用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：</p><h1 id="6、Markdown-链接"><a href="#6、Markdown-链接" class="headerlink" title="6、Markdown 链接"></a>6、Markdown 链接</h1><h2 id="6-1-使用方法："><a href="#6-1-使用方法：" class="headerlink" title="6.1 使用方法："></a>6.1 使用方法：</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br><br>或者<br><br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><p>例如：<code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code><br>效果为：这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a><br>直接使用链接地址： <code>&lt;https://www.runoob.com&gt;</code><br>效果为：<a href="https://www.runoob.com/">https://www.runoob.com</a></p><h2 id="6-2-高级链接"><a href="#6-2-高级链接" class="headerlink" title="6.2 高级链接"></a>6.2 高级链接</h2><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less">这个链接用 <span class="hljs-selector-tag">1</span> 作为网址变量 <span class="hljs-selector-attr">[Google]</span><span class="hljs-selector-attr">[1]</span><br>这个链接用 <span class="hljs-selector-tag">runoob</span> 作为网址变量 <span class="hljs-selector-attr">[Runoob]</span><span class="hljs-selector-attr">[runoob]</span><br>然后在文档的结尾为变量赋值（网址）<br><br>  <span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br>  <span class="hljs-selector-attr">[runoob]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.runoob.com/</span><br></code></pre></td></tr></table></figure><p>效果为：<br>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p><h1 id="7、Markdown-图片"><a href="#7、Markdown-图片" class="headerlink" title="7、Markdown 图片"></a>7、Markdown 图片</h1><p>Markdown 图片语法格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br><br>!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址 <span class="hljs-string">&quot;可选标题&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>使用实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png)<br><br>![RUNOOB 图标](http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png <span class="hljs-string">&quot;RUNOOB&quot;</span>)<br></code></pre></td></tr></table></figure><p>显示效果为:<br><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p><p>当然，你也可以像网址那样对图片网址使用变量:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">这个链接用 <span class="hljs-number">1</span> 作为网址变量 [RUNOOB][<span class="hljs-number">1</span>].<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-number">1</span>]: http:<span class="hljs-regexp">//</span>static.runoob.com<span class="hljs-regexp">/images/</span>runoob-logo.png<br></code></pre></td></tr></table></figure><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="8、Markdown-表格"><a href="#8、Markdown-表格" class="headerlink" title="8、Markdown 表格"></a>8、Markdown 表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  ----  </span>|<span class="hljs-string"> ----  </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><p>显示的效果为：<br>|  表头   | 表头  |<br>|  —-  | —-  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br>对齐方式<br>我们可以设置表格的对齐方式：</p><ul><li>-: 设置内容和标题栏居右对齐。</li><li>:- 设置内容和标题栏居左对齐。</li><li>:-: 设置内容和标题栏居中对齐。、<br>实例如下：<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure>显示效果为为：<table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table></li></ul>]]></content>
    
    
    <categories>
      
      <category>Markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/27/hello-world/"/>
    <url>/2021/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! 这是hexo自动生成的第一个欢迎也面. 查看 <a href="https://hexo.io/docs/">文档</a> 了解更多信息. 如果您在使用Hexo时遇到任何问题，可以在 <a href="https://hexo.io/docs/troubleshooting.html">疑难解答</a>中找到答案 ,也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>上询问我.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新的也面"><a href="#创建一个新的也面" class="headerlink" title="创建一个新的也面"></a>创建一个新的也面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="启动blog服务"><a href="#启动blog服务" class="headerlink" title="启动blog服务"></a>启动blog服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="发布到远端"><a href="#发布到远端" class="headerlink" title="发布到远端"></a>发布到远端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
